// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../dist/app.js":[function(require,module,exports) {
// Generated by purs bundle 0.13.8
var PS = {};

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);

(function (exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});

(function (exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});

(function (exports) {
  "use strict";

  var unsafeCompareImpl = function unsafeCompareImpl(lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };

  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});

(function (exports) {
  "use strict";

  var refEq = function refEq(r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];

  var Eq = function Eq(eq) {
    this.eq = eq;
  };

  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];

  var LT = function () {
    function LT() {}

    ;
    LT.value = new LT();
    return LT;
  }();

  var GT = function () {
    function GT() {}

    ;
    GT.value = new GT();
    return GT;
  }();

  var EQ = function () {
    function EQ() {}

    ;
    EQ.value = new EQ();
    return EQ;
  }();

  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];

  var Ord = function Ord(Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
  };

  var ordNumber = new Ord(function () {
    return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
    return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));

  var compare = function compare(dict) {
    return dict.compare;
  };

  var comparing = function comparing(dictOrd) {
    return function (f) {
      return function (x) {
        return function (y) {
          return compare(dictOrd)(f(x))(f(y));
        };
      };
    };
  };

  var max = function max(dictOrd) {
    return function (x) {
      return function (y) {
        var v = compare(dictOrd)(x)(y);

        if (v instanceof Data_Ordering.LT) {
          return y;
        }

        ;

        if (v instanceof Data_Ordering.EQ) {
          return x;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return x;
        }

        ;
        throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
      };
    };
  };

  var min = function min(dictOrd) {
    return function (x) {
      return function (y) {
        var v = compare(dictOrd)(x)(y);

        if (v instanceof Data_Ordering.LT) {
          return x;
        }

        ;

        if (v instanceof Data_Ordering.EQ) {
          return x;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return y;
        }

        ;
        throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [v.constructor.name]);
      };
    };
  };

  var clamp = function clamp(dictOrd) {
    return function (low) {
      return function (hi) {
        return function (x) {
          return min(dictOrd)(hi)(max(dictOrd)(low)(x));
        };
      };
    };
  };

  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];

  var Bounded = function Bounded(Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
  };

  var top = function top(dict) {
    return dict.top;
  };

  var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);

  var bottom = function bottom(dict) {
    return dict.bottom;
  };

  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];

  var Alt = function Alt(Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
  };

  var alt = function alt(dict) {
    return dict.alt;
  };

  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];

  var Semigroupoid = function Semigroupoid(compose) {
    this.compose = compose;
  };

  var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
      return function (x) {
        return f(g(x));
      };
    };
  });

  var compose = function compose(dict) {
    return dict.compose;
  };

  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];

  var Category = function Category(Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
  };

  var identity = function identity(dict) {
    return dict.identity;
  };

  var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
    return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];

  var flip = function flip(f) {
    return function (b) {
      return function (a) {
        return f(a)(b);
      };
    };
  };

  var $$const = function $$const(a) {
    return function (v) {
      return a;
    };
  };

  var applyFlipped = function applyFlipped(x) {
    return function (f) {
      return f(x);
    };
  };

  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);

(function (exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);

      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }

      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});

(function (exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];

  var Functor = function Functor(map) {
    this.map = map;
  };

  var map = function map(dict) {
    return dict.map;
  };

  var $$void = function $$void(dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };

  var voidLeft = function voidLeft(dictFunctor) {
    return function (f) {
      return function (x) {
        return map(dictFunctor)(Data_Function["const"](x))(f);
      };
    };
  };

  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];

  var Nothing = function () {
    function Nothing() {}

    ;
    Nothing.value = new Nothing();
    return Nothing;
  }();

  var Just = function () {
    function Just(value0) {
      this.value0 = value0;
    }

    ;

    Just.create = function (value0) {
      return new Just(value0);
    };

    return Just;
  }();

  var maybe = function maybe(v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Nothing) {
          return v;
        }

        ;

        if (v2 instanceof Just) {
          return v1(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };

  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
    return function (v1) {
      if (v1 instanceof Just) {
        return new Just(v(v1.value0));
      }

      ;
      return Nothing.value;
    };
  });

  var fromMaybe = function fromMaybe(a) {
    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };

  var fromJust = function fromJust(dictPartial) {
    return function (v) {
      if (v instanceof Just) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [v.constructor.name]);
    };
  };

  var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
  }, function (v) {
    return function (v1) {
      if (v instanceof Nothing) {
        return v1;
      }

      ;
      return v;
    };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
  exports["altMaybe"] = altMaybe;
})(PS);

(function (exports) {
  /* globals exports */
  "use strict";

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);

(function (exports) {
  "use strict"; // module Math

  exports.abs = Math.abs;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;
  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["round"] = $foreign.round;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  var unsafeClamp = function unsafeClamp(x) {
    if (x === Global.infinity) {
      return 0;
    }

    ;

    if (x === -Global.infinity) {
      return 0;
    }

    ;

    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
      return Data_Bounded.top(Data_Bounded.boundedInt);
    }

    ;

    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
      return Data_Bounded.bottom(Data_Bounded.boundedInt);
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_Maybe.fromMaybe(0)(fromNumber(x));
    }

    ;
    throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [x.constructor.name]);
  };

  var round = function round($23) {
    return unsafeClamp($$Math.round($23));
  };

  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS);

(function (exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];

  var Show = function Show(show) {
    this.show = show;
  };

  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);

  var show = function show(dict) {
    return dict.show;
  };

  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];

  var HSLA = function () {
    function HSLA(value0, value1, value2, value3) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
    }

    ;

    HSLA.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return new HSLA(value0, value1, value2, value3);
          };
        };
      };
    };

    return HSLA;
  }();

  var modPos = function modPos(x) {
    return function (y) {
      return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
    };
  };

  var rgba = function rgba(red$prime) {
    return function (green$prime) {
      return function (blue$prime) {
        return function (alpha) {
          var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
          var r = Data_Int.toNumber(red) / 255.0;
          var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
          var g = Data_Int.toNumber(green) / 255.0;
          var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
          var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
          var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
          var chroma = maxChroma - minChroma | 0;
          var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
          var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);

          var saturation = function () {
            if (chroma === 0) {
              return 0.0;
            }

            ;

            if (Data_Boolean.otherwise) {
              return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
            }

            ;
            throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + []);
          }();

          var b = Data_Int.toNumber(blue) / 255.0;

          var hue$prime = function hue$prime(v) {
            if (v === 0) {
              return 0.0;
            }

            ;

            if (maxChroma === red) {
              return modPos((g - b) / chroma$prime)(6.0);
            }

            ;

            if (maxChroma === green) {
              return (b - r) / chroma$prime + 2.0;
            }

            ;

            if (Data_Boolean.otherwise) {
              return (r - g) / chroma$prime + 4.0;
            }

            ;
            throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [v.constructor.name]);
          };

          var hue = 60.0 * hue$prime(chroma);
          return new HSLA(hue, saturation, lightness, alpha);
        };
      };
    };
  };

  var rgb = function rgb(r) {
    return function (g) {
      return function (b) {
        return rgba(r)(g)(b)(1.0);
      };
    };
  };

  var hsla = function hsla(h) {
    return function (s) {
      return function (l) {
        return function (a) {
          var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
          var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
          var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
          return new HSLA(h, s$prime, l$prime, a$prime);
        };
      };
    };
  };

  var lighten = function lighten(f) {
    return function (v) {
      return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
    };
  };

  var cssStringHSLA = function cssStringHSLA(v) {
    var toString = function toString(n) {
      return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
    };

    var saturation = toString(v.value1 * 100.0) + "%";
    var lightness = toString(v.value2 * 100.0) + "%";
    var hue = toString(v.value0);
    var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
    var $59 = v.value3 === 1.0;

    if ($59) {
      return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
    }

    ;
    return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };

  exports["rgb"] = rgb;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["lighten"] = lighten;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Color.Scheme.MaterialDesign"] = $PS["Color.Scheme.MaterialDesign"] || {};
  var exports = $PS["Color.Scheme.MaterialDesign"];
  var Color = $PS["Color"];
  var blueGrey = Color.rgb(96)(125)(139);
  exports["blueGrey"] = blueGrey;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];

  var Alternative = function Alternative(Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
  };

  exports["Alternative"] = Alternative;
})(PS);

(function (exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l * k);
      var n = 0;

      for (var i = 0; i < l; i++) {
        var f = fs[i];

        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }

      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];

  var Apply = function Apply(Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
  };

  var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
  }, $foreign.arrayApply);

  var apply = function apply(dict) {
    return dict.apply;
  };

  var applySecond = function applySecond(dictApply) {
    return function (a) {
      return function (b) {
        return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
      };
    };
  };

  var lift2 = function lift2(dictApply) {
    return function (f) {
      return function (a) {
        return function (b) {
          return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
        };
      };
    };
  };

  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];

  var Applicative = function Applicative(Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
  };

  var pure = function pure(dict) {
    return dict.pure;
  };

  var unless = function unless(dictApplicative) {
    return function (v) {
      return function (v1) {
        if (!v) {
          return v1;
        }

        ;

        if (v) {
          return pure(dictApplicative)(Data_Unit.unit);
        }

        ;
        throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };

  var when = function when(dictApplicative) {
    return function (v) {
      return function (v1) {
        if (v) {
          return v1;
        }

        ;

        if (!v) {
          return pure(dictApplicative)(Data_Unit.unit);
        }

        ;
        throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };

  var liftA1 = function liftA1(dictApplicative) {
    return function (f) {
      return function (a) {
        return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
      };
    };
  };

  var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
  }, function (x) {
    return [x];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);

(function (exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];

      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }

      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];

  var Bind = function Bind(Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
  };

  var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
  }, $foreign.arrayBind);

  var bind = function bind(dict) {
    return dict.bind;
  };

  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];

  var Monad = function Monad(Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
  };

  var unlessM = function unlessM(dictMonad) {
    return function (mb) {
      return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
          return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
        });
      };
    };
  };

  var ap = function ap(dictMonad) {
    return function (f) {
      return function (a) {
        return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
          return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
          });
        });
      };
    };
  };

  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["unlessM"] = unlessM;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];

  var Plus = function Plus(Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
  };

  exports["Plus"] = Plus;
})(PS);

(function (exports) {
  "use strict"; //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start,
          n = 0;

      while (i !== end) {
        result[n++] = i;
        i += step;
      }

      result[n] = i;
      return result;
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }

          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  }; //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------


  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];

  var sortBy = function sortBy(comp) {
    return function (xs) {
      var comp$prime = function comp$prime(x) {
        return function (y) {
          var v = comp(x)(y);

          if (v instanceof Data_Ordering.GT) {
            return 1;
          }

          ;

          if (v instanceof Data_Ordering.EQ) {
            return 0;
          }

          ;

          if (v instanceof Data_Ordering.LT) {
            return -1 | 0;
          }

          ;
          throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [v.constructor.name]);
        };
      };

      return $foreign.sortImpl(comp$prime)(xs);
    };
  };

  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  var deleteBy = function deleteBy(v) {
    return function (v1) {
      return function (v2) {
        if (v2.length === 0) {
          return [];
        }

        ;
        return Data_Maybe.maybe(v2)(function (i) {
          return Data_Maybe.fromJust()(deleteAt(i)(v2));
        })(findIndex(v(v1))(v2));
      };
    };
  };

  exports["sortBy"] = sortBy;
  exports["deleteBy"] = deleteBy;
  exports["range"] = $foreign.range;
})(PS);

(function (exports) {
  "use strict";

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});

(function (exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];

  var Semiring = function Semiring(add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
  };

  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);

  var one = function one(dict) {
    return dict.one;
  };

  var mul = function mul(dict) {
    return dict.mul;
  };

  var add = function add(dict) {
    return dict.add;
  };

  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringNumber"] = semiringNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];

  var Ring = function Ring(Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
  };

  var sub = function sub(dict) {
    return dict.sub;
  };

  var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  exports["sub"] = sub;
  exports["ringNumber"] = ringNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];

  var CommutativeRing = function CommutativeRing(Ring0) {
    this.Ring0 = Ring0;
  };

  var commutativeRingNumber = new CommutativeRing(function () {
    return Data_Ring.ringNumber;
  });
  exports["commutativeRingNumber"] = commutativeRingNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];

  var Compactable = function Compactable(compact, separate) {
    this.compact = compact;
    this.separate = separate;
  };

  exports["Compactable"] = Compactable;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];

  var unInstant = function unInstant(v) {
    return v;
  };

  exports["unInstant"] = unInstant;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.DivisionRing"] = $PS["Data.DivisionRing"] || {};
  var exports = $PS["Data.DivisionRing"];
  var Data_Ring = $PS["Data.Ring"];

  var DivisionRing = function DivisionRing(Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
  };

  var divisionringNumber = new DivisionRing(function () {
    return Data_Ring.ringNumber;
  }, function (x) {
    return 1.0 / x;
  });
  exports["divisionringNumber"] = divisionringNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];

  var Left = function () {
    function Left(value0) {
      this.value0 = value0;
    }

    ;

    Left.create = function (value0) {
      return new Left(value0);
    };

    return Left;
  }();

  var Right = function () {
    function Right(value0) {
      this.value0 = value0;
    }

    ;

    Right.create = function (value0) {
      return new Right(value0);
    };

    return Right;
  }();

  var fromRight = function fromRight(dictPartial) {
    return function (v) {
      if (v instanceof Right) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [v.constructor.name]);
    };
  };

  var fromLeft = function fromLeft(dictPartial) {
    return function (v) {
      if (v instanceof Left) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [v.constructor.name]);
    };
  };

  var either = function either(v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }

        ;

        if (v2 instanceof Right) {
          return v1(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };

  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["hush"] = hush;
})(PS);

(function (exports) {
  "use strict";

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];

  var EuclideanRing = function EuclideanRing(CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
  };

  var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
    return 1;
  }, $foreign.numDiv, function (v) {
    return function (v1) {
      return 0.0;
    };
  });

  var div = function div(dict) {
    return dict.div;
  };

  exports["div"] = div;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Field"] = $PS["Data.Field"] || {};
  var exports = $PS["Data.Field"];

  var Field = function Field(DivisionRing1, EuclideanRing0) {
    this.DivisionRing1 = DivisionRing1;
    this.EuclideanRing0 = EuclideanRing0;
  };

  var field = function field(dictEuclideanRing) {
    return function (dictDivisionRing) {
      return new Field(function () {
        return dictDivisionRing;
      }, function () {
        return dictEuclideanRing;
      });
    };
  };

  exports["field"] = field;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];

  var Filterable = function Filterable(Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
    this.Compactable0 = Compactable0;
    this.Functor1 = Functor1;
    this.filter = filter;
    this.filterMap = filterMap;
    this.partition = partition;
    this.partitionMap = partitionMap;
  };

  var filterMap = function filterMap(dict) {
    return dict.filterMap;
  };

  exports["Filterable"] = Filterable;
  exports["filterMap"] = filterMap;
})(PS);

(function (exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;

        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }

        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;

        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }

        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});

(function (exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];

  var Semigroup = function Semigroup(append) {
    this.append = append;
  };

  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);

  var append = function append(dict) {
    return dict.append;
  };

  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];

  var Monoid = function Monoid(Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
  };

  var monoidString = new Monoid(function () {
    return Data_Semigroup.semigroupString;
  }, "");

  var mempty = function mempty(dict) {
    return dict.mempty;
  };

  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];

  var Foldable = function Foldable(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
  };

  var foldr = function foldr(dict) {
    return dict.foldr;
  };

  var traverse_ = function traverse_(dictApplicative) {
    return function (dictFoldable) {
      return function (f) {
        return foldr(dictFoldable)(function () {
          var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
          return function ($198) {
            return $197(f($198));
          };
        }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
      };
    };
  };

  var for_ = function for_(dictApplicative) {
    return function (dictFoldable) {
      return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
  };

  var sequence_ = function sequence_(dictApplicative) {
    return function (dictFoldable) {
      return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
  };

  var foldl = function foldl(dict) {
    return dict.foldl;
  };

  var intercalate = function intercalate(dictFoldable) {
    return function (dictMonoid) {
      return function (sep) {
        return function (xs) {
          var go = function go(v) {
            return function (x) {
              if (v.init) {
                return {
                  init: false,
                  acc: x
                };
              }

              ;
              return {
                init: false,
                acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
              };
            };
          };

          return foldl(dictFoldable)(go)({
            init: true,
            acc: Data_Monoid.mempty(dictMonoid)
          })(xs).acc;
        };
      };
    };
  };

  var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
      return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
          return Data_Monoid.mempty(dictMonoid);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return f(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [f.constructor.name, v.constructor.name]);
      };
    };
  }, function (v) {
    return function (z) {
      return function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return z;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return v(z)(v1.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  }, function (v) {
    return function (z) {
      return function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return z;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return v(v1.value0)(z);
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  });

  var foldMapDefaultR = function foldMapDefaultR(dictFoldable) {
    return function (dictMonoid) {
      return function (f) {
        return foldr(dictFoldable)(function (x) {
          return function (acc) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
          };
        })(Data_Monoid.mempty(dictMonoid));
      };
    };
  };

  var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);

  var foldMap = function foldMap(dict) {
    return dict.foldMap;
  };

  var fold = function fold(dictFoldable) {
    return function (dictMonoid) {
      return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
    };
  };

  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);

(function (exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];

  var HeytingAlgebra = function HeytingAlgebra(conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
  };

  var not = function not(dict) {
    return dict.not;
  };

  var disj = function disj(dict) {
    return dict.disj;
  };

  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
      return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
  }, $foreign.boolNot, true);
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];

  var Nil = function () {
    function Nil() {}

    ;
    Nil.value = new Nil();
    return Nil;
  }();

  var Cons = function () {
    function Cons(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Cons.create = function (value0) {
      return function (value1) {
        return new Cons(value0, value1);
      };
    };

    return Cons;
  }();

  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
      return Data_Foldable.foldl(foldableList)(function (acc) {
        var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
        return function ($203) {
          return $202(f($203));
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  }, function (f) {
    var go = function go($copy_b) {
      return function ($copy_v) {
        var $tco_var_b = $copy_b;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(b, v) {
          if (v instanceof Nil) {
            $tco_done = true;
            return b;
          }

          ;

          if (v instanceof Cons) {
            $tco_var_b = f(b)(v.value0);
            $copy_v = v.value1;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_b, $copy_v);
        }

        ;
        return $tco_result;
      };
    };

    return go;
  }, function (f) {
    return function (b) {
      var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
      var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
      return function ($205) {
        return $204(rev($205));
      };
    };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
      return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["foldableList"] = foldableList;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];

  var singleton = function singleton(a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };

  exports["singleton"] = singleton;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];

  var Tuple = function () {
    function Tuple(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Tuple.create = function (value0) {
      return function (value1) {
        return new Tuple(value0, value1);
      };
    };

    return Tuple;
  }();

  var snd = function snd(v) {
    return v.value1;
  };

  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];

  var Leaf = function () {
    function Leaf() {}

    ;
    Leaf.value = new Leaf();
    return Leaf;
  }();

  var Two = function () {
    function Two(value0, value1, value2, value3) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
    }

    ;

    Two.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return new Two(value0, value1, value2, value3);
          };
        };
      };
    };

    return Two;
  }();

  var Three = function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
      this.value4 = value4;
      this.value5 = value5;
      this.value6 = value6;
    }

    ;

    Three.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return function (value4) {
              return function (value5) {
                return function (value6) {
                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                };
              };
            };
          };
        };
      };
    };

    return Three;
  }();

  var TwoLeft = function () {
    function TwoLeft(value0, value1, value2) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
    }

    ;

    TwoLeft.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return new TwoLeft(value0, value1, value2);
        };
      };
    };

    return TwoLeft;
  }();

  var TwoRight = function () {
    function TwoRight(value0, value1, value2) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
    }

    ;

    TwoRight.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return new TwoRight(value0, value1, value2);
        };
      };
    };

    return TwoRight;
  }();

  var ThreeLeft = function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
      this.value4 = value4;
      this.value5 = value5;
    }

    ;

    ThreeLeft.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return function (value4) {
              return function (value5) {
                return new ThreeLeft(value0, value1, value2, value3, value4, value5);
              };
            };
          };
        };
      };
    };

    return ThreeLeft;
  }();

  var ThreeMiddle = function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
      this.value4 = value4;
      this.value5 = value5;
    }

    ;

    ThreeMiddle.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return function (value4) {
              return function (value5) {
                return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
              };
            };
          };
        };
      };
    };

    return ThreeMiddle;
  }();

  var ThreeRight = function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
      this.value4 = value4;
      this.value5 = value5;
    }

    ;

    ThreeRight.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return function (value4) {
              return function (value5) {
                return new ThreeRight(value0, value1, value2, value3, value4, value5);
              };
            };
          };
        };
      };
    };

    return ThreeRight;
  }();

  var KickUp = function () {
    function KickUp(value0, value1, value2, value3) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
    }

    ;

    KickUp.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return new KickUp(value0, value1, value2, value3);
          };
        };
      };
    };

    return KickUp;
  }();

  var isEmpty = function isEmpty(v) {
    if (v instanceof Leaf) {
      return true;
    }

    ;
    return false;
  };

  var fromZipper = function fromZipper($copy_dictOrd) {
    return function ($copy_v) {
      return function ($copy_tree) {
        var $tco_var_dictOrd = $copy_dictOrd;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(dictOrd, v, tree) {
          if (v instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return tree;
          }

          ;

          if (v instanceof Data_List_Types.Cons) {
            if (v.value0 instanceof TwoLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
              return;
            }

            ;

            if (v.value0 instanceof TwoRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
              return;
            }

            ;

            if (v.value0 instanceof ThreeLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }

            ;

            if (v.value0 instanceof ThreeMiddle) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }

            ;

            if (v.value0 instanceof ThreeRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [v.value0.constructor.name]);
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [v.constructor.name, tree.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
        }

        ;
        return $tco_result;
      };
    };
  };

  var insert = function insert(dictOrd) {
    return function (k) {
      return function (v) {
        var up = function up($copy_v1) {
          return function ($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v1, v2) {
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
              }

              ;

              if (v1 instanceof Data_List_Types.Cons) {
                if (v1.value0 instanceof TwoLeft) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                }

                ;

                if (v1.value0 instanceof TwoRight) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                }

                ;

                if (v1.value0 instanceof ThreeLeft) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }

                ;

                if (v1.value0 instanceof ThreeMiddle) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }

                ;

                if (v1.value0 instanceof ThreeRight) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                  return;
                }

                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
              }

              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [v1.constructor.name, v2.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }

            ;
            return $tco_result;
          };
        };

        var comp = Data_Ord.compare(dictOrd);

        var down = function down($copy_ctx) {
          return function ($copy_v1) {
            var $tco_var_ctx = $copy_ctx;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(ctx, v1) {
              if (v1 instanceof Leaf) {
                $tco_done = true;
                return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
              }

              ;

              if (v1 instanceof Two) {
                var v2 = comp(k)(v1.value1);

                if (v2 instanceof Data_Ordering.EQ) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                }

                ;

                if (v2 instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }

                ;
                $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                $copy_v1 = v1.value3;
                return;
              }

              ;

              if (v1 instanceof Three) {
                var v3 = comp(k)(v1.value1);

                if (v3 instanceof Data_Ordering.EQ) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                }

                ;
                var v4 = comp(k)(v1.value4);

                if (v4 instanceof Data_Ordering.EQ) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                }

                ;

                if (v3 instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }

                ;

                if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value3;
                  return;
                }

                ;
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                $copy_v1 = v1.value6;
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ctx.constructor.name, v1.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
            }

            ;
            return $tco_result;
          };
        };

        return down(Data_List_Types.Nil.value);
      };
    };
  };

  var pop = function pop(dictOrd) {
    return function (k) {
      var up = function up($copy_ctxs) {
        return function ($copy_tree) {
          var $tco_var_ctxs = $copy_ctxs;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(ctxs, tree) {
            if (ctxs instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return tree;
            }

            ;

            if (ctxs instanceof Data_List_Types.Cons) {
              if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
              }

              ;

              if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
              }

              ;

              if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                $tco_var_ctxs = ctxs.value1;
                $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                return;
              }

              ;

              if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                $tco_var_ctxs = ctxs.value1;
                $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                return;
              }

              ;

              if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
              }

              ;

              if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
              }

              ;

              if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
              }

              ;

              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
              }

              ;

              if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
              }

              ;

              if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }

              ;

              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }

              ;

              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
              }

              ;

              if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
              }

              ;

              if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }

              ;

              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }

              ;

              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
              }

              ;

              if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
              }

              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ctxs.value0.constructor.name, tree.constructor.name]);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ctxs.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
          }

          ;
          return $tco_result;
        };
      };

      var removeMaxNode = function removeMaxNode($copy_ctx) {
        return function ($copy_m) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(ctx, m) {
            if (m instanceof Two && m.value0 instanceof Leaf && m.value3 instanceof Leaf) {
              $tco_done = true;
              return up(ctx)(Leaf.value);
            }

            ;

            if (m instanceof Two) {
              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
              $copy_m = m.value3;
              return;
            }

            ;

            if (m instanceof Three && m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
              $tco_done = true;
              return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
            }

            ;

            if (m instanceof Three) {
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
              $copy_m = m.value6;
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [m.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_m);
          }

          ;
          return $tco_result;
        };
      };

      var maxNode = function maxNode($copy_m) {
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(m) {
          if (m instanceof Two && m.value3 instanceof Leaf) {
            $tco_done = true;
            return {
              key: m.value1,
              value: m.value2
            };
          }

          ;

          if (m instanceof Two) {
            $copy_m = m.value3;
            return;
          }

          ;

          if (m instanceof Three && m.value6 instanceof Leaf) {
            $tco_done = true;
            return {
              key: m.value4,
              value: m.value5
            };
          }

          ;

          if (m instanceof Three) {
            $copy_m = m.value6;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [m.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($copy_m);
        }

        ;
        return $tco_result;
      };

      var comp = Data_Ord.compare(dictOrd);

      var down = function down($copy_ctx) {
        return function ($copy_m) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(ctx, m) {
            if (m instanceof Leaf) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }

            ;

            if (m instanceof Two) {
              var v = comp(k)(m.value1);

              if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
              }

              ;

              if (v instanceof Data_Ordering.EQ) {
                var max = maxNode(m.value0);
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
              }

              ;

              if (v instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                $copy_m = m.value0;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
              $copy_m = m.value3;
              return;
            }

            ;

            if (m instanceof Three) {
              var leaves = function () {
                if (m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
                  return true;
                }

                ;
                return false;
              }();

              var v = comp(k)(m.value4);
              var v3 = comp(k)(m.value1);

              if (leaves && v3 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
              }

              ;

              if (leaves && v instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
              }

              ;

              if (v3 instanceof Data_Ordering.EQ) {
                var max = maxNode(m.value0);
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
              }

              ;

              if (v instanceof Data_Ordering.EQ) {
                var max = maxNode(m.value3);
                $tco_done = true;
                return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
              }

              ;

              if (v3 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                $copy_m = m.value0;
                return;
              }

              ;

              if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                $copy_m = m.value3;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
              $copy_m = m.value6;
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [m.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_m);
          }

          ;
          return $tco_result;
        };
      };

      return down(Data_List_Types.Nil.value);
    };
  };

  var empty = Leaf.value;

  var $$delete = function $$delete(dictOrd) {
    return function (k) {
      return function (m) {
        return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
      };
    };
  };

  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];

  var Newtype = function Newtype(unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
  };

  var wrap = function wrap(dict) {
    return dict.wrap;
  };

  var unwrap = function unwrap(dict) {
    return dict.unwrap;
  };

  var over = function over(dictNewtype) {
    return function (dictNewtype1) {
      return function (v) {
        return function (f) {
          var $90 = wrap(dictNewtype1);
          var $91 = unwrap(dictNewtype);
          return function ($92) {
            return $90(f($91($92)));
          };
        };
      };
    };
  };

  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["over"] = over;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];

  var isEmpty = function isEmpty(v) {
    return Data_Map_Internal.isEmpty(v);
  };

  var insert = function insert(dictOrd) {
    return function (a) {
      return function (v) {
        return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
      };
    };
  };

  var empty = Data_Map_Internal.empty;

  var $$delete = function $$delete(dictOrd) {
    return function (a) {
      return function (v) {
        return Data_Map_Internal["delete"](dictOrd)(a)(v);
      };
    };
  };

  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Data_Newtype = $PS["Data.Newtype"];

  var Seconds = function Seconds(x) {
    return x;
  };

  var Milliseconds = function Milliseconds(x) {
    return x;
  };

  var Duration = function Duration(fromDuration, toDuration) {
    this.fromDuration = fromDuration;
    this.toDuration = toDuration;
  };

  var toDuration = function toDuration(dict) {
    return dict.toDuration;
  };

  var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
    return n;
  }, Seconds);
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
    return n;
  }, Milliseconds);
  var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
    return v * 1000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
    return v / 1000.0;
  }));
  exports["toDuration"] = toDuration;
  exports["newtypeSeconds"] = newtypeSeconds;
  exports["durationSeconds"] = durationSeconds;
})(PS);

(function (exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var monadEffect = new Control_Monad.Monad(function () {
    return applicativeEffect;
  }, function () {
    return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
    return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
    return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
    return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);

(function (exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);

(function (exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return {
        value: val
      };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];

  var modify = function modify(f) {
    return $foreign["modify'"](function (s) {
      var s$prime = f(s);
      return {
        state: s$prime,
        value: s$prime
      };
    });
  };

  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);

(function (exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Maybe = $PS["Data.Maybe"];

  var IsEvent = function IsEvent(Alternative0, Filterable1, fix, fold, keepLatest, sampleOn) {
    this.Alternative0 = Alternative0;
    this.Filterable1 = Filterable1;
    this.fix = fix;
    this.fold = fold;
    this.keepLatest = keepLatest;
    this.sampleOn = sampleOn;
  };

  var sampleOn = function sampleOn(dict) {
    return dict.sampleOn;
  };

  var keepLatest = function keepLatest(dict) {
    return dict.keepLatest;
  };

  var fold = function fold(dict) {
    return dict.fold;
  };

  var withLast = function withLast(dictIsEvent) {
    return function (e) {
      var step = function step(a) {
        return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just({
              now: a,
              last: Data_Maybe.Nothing.value
            });
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just({
              now: a,
              last: new Data_Maybe.Just(v.value0.now)
            });
          }

          ;
          throw new Error("Failed pattern match at FRP.Event.Class (line 51, column 3 - line 51, column 60): " + [a.constructor.name, v.constructor.name]);
        };
      };

      return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Control_Category.identity(Control_Category.categoryFn))(fold(dictIsEvent)(step)(e)(Data_Maybe.Nothing.value));
    };
  };

  var fix = function fix(dict) {
    return dict.fix;
  };

  exports["IsEvent"] = IsEvent;
  exports["fold"] = fold;
  exports["withLast"] = withLast;
  exports["sampleOn"] = sampleOn;
  exports["keepLatest"] = keepLatest;
  exports["fix"] = fix;
})(PS);

(function (exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];

  var Event = function Event(x) {
    return x;
  };

  var subscribe = function subscribe(v) {
    return function (k) {
      return v(function () {
        var $45 = Data_Functor["void"](Effect.functorEffect);
        return function ($46) {
          return $45(k($46));
        };
      }());
    };
  };

  var sampleOn = function sampleOn(v) {
    return function (v1) {
      return function (k) {
        return function __do() {
          var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          var c1 = v(function (a) {
            return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
          })();
          var c2 = v1(function (f) {
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($47) {
              return k(f($47));
            }));
          })();
          return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
        };
      };
    };
  };

  var makeEvent = Event;

  var keepLatest = function keepLatest(v) {
    return function (k) {
      return function __do() {
        var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
        var cancelOuter = v(function (inner) {
          return function __do() {
            Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
            var c = subscribe(inner)(k)();
            return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
          };
        })();
        return function __do() {
          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
          return cancelOuter();
        };
      };
    };
  };

  var functorEvent = new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (k) {
        return v(function ($48) {
          return k(f($48));
        });
      };
    };
  });

  var fold = function fold(f) {
    return function (v) {
      return function (b) {
        return function (k) {
          return function __do() {
            var result = Effect_Ref["new"](b)();
            return v(function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
            })();
          };
        };
      };
    };
  };

  var filter = function filter(p) {
    return function (v) {
      return function (k) {
        return v(function (a) {
          var $34 = p(a);

          if ($34) {
            return k(a);
          }

          ;
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        });
      };
    };
  };

  var create = function __do() {
    var subscribers = Effect_Ref["new"]([])();
    return {
      event: function event(k) {
        return function __do() {
          Effect_Ref.modify(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([k]);
          })(subscribers)();
          return function __do() {
            Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
            return Data_Unit.unit;
          };
        };
      },
      push: function push(a) {
        return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
          return k(a);
        }));
      }
    };
  };

  var fix = function fix(f) {
    var v = Effect_Unsafe.unsafePerformEffect(create);
    var v1 = f(v.event);
    return function (k) {
      return function __do() {
        var c1 = subscribe(v1.input)(v.push)();
        var c2 = subscribe(v1.output)(k)();
        return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
      };
    };
  };

  var compactableEvent = new Data_Compactable.Compactable(function (xs) {
    return Data_Functor.map(functorEvent)(function (x) {
      return Data_Maybe.fromJust()(x);
    })(filter(Data_Maybe.isJust)(xs));
  }, function (xs) {
    return {
      left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
      right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
    };
  });
  var filterableEvent = new Data_Filterable.Filterable(function () {
    return compactableEvent;
  }, function () {
    return functorEvent;
  }, filter, function (f) {
    var $49 = Data_Functor.map(functorEvent)(function (x) {
      return Data_Maybe.fromJust()(x);
    });
    var $50 = filter(Data_Maybe.isJust);
    var $51 = Data_Functor.map(functorEvent)(f);
    return function ($52) {
      return $49($50($51($52)));
    };
  }, function (p) {
    return function (xs) {
      return {
        yes: filter(p)(xs),
        no: filter(function () {
          var $53 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
          return function ($54) {
            return $53(p($54));
          };
        }())(xs)
      };
    };
  }, function (f) {
    return function (xs) {
      return {
        left: Data_Filterable.filterMap(filterableEvent)(function () {
          var $55 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
          return function ($56) {
            return $55(f($56));
          };
        }())(xs),
        right: Data_Filterable.filterMap(filterableEvent)(function ($57) {
          return Data_Either.hush(f($57));
        })(xs)
      };
    };
  });
  var applyEvent = new Control_Apply.Apply(function () {
    return functorEvent;
  }, function (v) {
    return function (v1) {
      return function (k) {
        return function __do() {
          var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          var c1 = v(function (a) {
            return function __do() {
              Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($58) {
                return k(a($58));
              }))();
            };
          })();
          var c2 = v1(function (b) {
            return function __do() {
              Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($59) {
                return k(function (v2) {
                  return v2(b);
                }($59));
              }))();
            };
          })();
          return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
        };
      };
    };
  });
  var applicativeEvent = new Control_Applicative.Applicative(function () {
    return applyEvent;
  }, function (a) {
    return function (k) {
      return function __do() {
        k(a)();
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
    };
  });
  var altEvent = new Control_Alt.Alt(function () {
    return functorEvent;
  }, function (v) {
    return function (v1) {
      return function (k) {
        return function __do() {
          var c1 = v(k)();
          var c2 = v1(k)();
          return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
        };
      };
    };
  });
  var plusEvent = new Control_Plus.Plus(function () {
    return altEvent;
  }, function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
  });
  var alternativeEvent = new Control_Alternative.Alternative(function () {
    return applicativeEvent;
  }, function () {
    return plusEvent;
  });
  var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
    return alternativeEvent;
  }, function () {
    return filterableEvent;
  }, fix, fold, keepLatest, sampleOn);
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["applicativeEvent"] = applicativeEvent;
  exports["altEvent"] = altEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);

(function (exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);

(function (exports) {
  "use strict";

  exports._requestAnimationFrame = function (fn) {
    return function (window) {
      return function () {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});

(function (exports) {
  "use strict"; // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];

  var RequestAnimationFrameId = function RequestAnimationFrameId(x) {
    return x;
  };

  var toEventTarget = Unsafe_Coerce.unsafeCoerce;

  var requestAnimationFrame = function requestAnimationFrame(fn) {
    var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
    var $34 = $foreign["_requestAnimationFrame"](fn);
    return function ($35) {
      return $33($34($35));
    };
  };

  exports["toEventTarget"] = toEventTarget;
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Event.AnimationFrame"] = $PS["FRP.Event.AnimationFrame"] || {};
  var exports = $PS["FRP.Event.AnimationFrame"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var animationFrame = FRP_Event.makeEvent(function (k) {
    return function __do() {
      var w = Web_HTML.window();
      var cancelled = Effect_Ref["new"](false)();
      var loop = Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(function __do() {
        k(Data_Unit.unit)();
        return Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(cancelled))(loop)();
      })(w));
      loop();
      return Effect_Ref.write(true)(cancelled);
    };
  });
  exports["animationFrame"] = animationFrame;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_AnimationFrame = $PS["FRP.Event.AnimationFrame"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];

  var ABehavior = function ABehavior(x) {
    return x;
  };

  var step = function step(dictIsEvent) {
    return function (a) {
      return function (e) {
        return FRP_Event_Class.sampleOn(dictIsEvent)(Control_Alt.alt(dictIsEvent.Alternative0().Plus1().Alt0())(Control_Applicative.pure(dictIsEvent.Alternative0().Applicative0())(a))(e));
      };
    };
  };

  var sample = function sample(v) {
    return function (e) {
      return v(e);
    };
  };

  var functorABehavior = function functorABehavior(dictFunctor) {
    return new Data_Functor.Functor(function (f) {
      return function (v) {
        return function (e) {
          return v(Data_Functor.map(dictFunctor)(function (v1) {
            return function ($66) {
              return v1(f($66));
            };
          })(e));
        };
      };
    });
  };

  var sampleBy = function sampleBy(dictIsEvent) {
    return function (f) {
      return function (b) {
        return function (e) {
          return sample(Data_Functor.map(functorABehavior(dictIsEvent.Filterable1().Functor1()))(f)(b))(Data_Functor.map(dictIsEvent.Filterable1().Functor1())(Data_Function.applyFlipped)(e));
        };
      };
    };
  };

  var integral = function integral(dictIsEvent) {
    return function (dictField) {
      return function (dictSemiring) {
        return function (g) {
          return function (initial) {
            return function (t) {
              return function (b) {
                var two = Data_Semiring.add(dictField.DivisionRing1().Ring0().Semiring0())(Data_Semiring.one(dictField.DivisionRing1().Ring0().Semiring0()))(Data_Semiring.one(dictField.DivisionRing1().Ring0().Semiring0()));

                var approx = function approx(v) {
                  return function (s) {
                    if (v.last instanceof Data_Maybe.Nothing) {
                      return s;
                    }

                    ;

                    if (v.last instanceof Data_Maybe.Just) {
                      return Data_Semiring.add(dictSemiring)(s)(g(function (f) {
                        return Data_EuclideanRing.div(dictField.EuclideanRing0())(Data_Semiring.mul(dictField.DivisionRing1().Ring0().Semiring0())(f(Data_Semiring.add(dictSemiring)(v.last.value0.value1)(v.now.value1)))(Data_Ring.sub(dictField.DivisionRing1().Ring0())(v.now.value0)(v.last.value0.value0)))(two);
                      }));
                    }

                    ;
                    throw new Error("Failed pattern match at FRP.Behavior (line 132, column 5 - line 132, column 35): " + [v.constructor.name, s.constructor.name]);
                  };
                };

                return function (e) {
                  var x = sample(b)(Data_Functor.voidLeft(dictIsEvent.Filterable1().Functor1())(e)(Control_Category.identity(Control_Category.categoryFn)));
                  var y = FRP_Event_Class.withLast(dictIsEvent)(sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
                  var z = FRP_Event_Class.fold(dictIsEvent)(approx)(y)(initial);
                  return Control_Apply.apply(dictIsEvent.Alternative0().Applicative0().Apply0())(e)(z);
                };
              };
            };
          };
        };
      };
    };
  };

  var integral$prime = function integral$prime(dictIsEvent) {
    return function (dictField) {
      return integral(dictIsEvent)(dictField)(dictField.DivisionRing1().Ring0().Semiring0())(function (v) {
        return v(Control_Category.identity(Control_Category.categoryFn));
      });
    };
  };

  var sample_ = function sample_(dictIsEvent) {
    return sampleBy(dictIsEvent)(Data_Function["const"]);
  };

  var behavior = ABehavior;

  var fixB = function fixB(a) {
    return function (f) {
      return behavior(function (s) {
        return FRP_Event_Class.fix(FRP_Event.eventIsEvent)(function (event) {
          var b = f(step(FRP_Event.eventIsEvent)(a)(event));
          return {
            input: sample_(FRP_Event.eventIsEvent)(b)(s),
            output: FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(event)(s)
          };
        });
      });
    };
  };

  var switcher = function switcher(b0) {
    return function (e) {
      return behavior(function (s) {
        return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(Control_Applicative.pure(FRP_Event.applicativeEvent)(sample(b0)(s)))(Data_Functor.map(FRP_Event.functorEvent)(function (b) {
          return sample(b)(s);
        })(e)));
      });
    };
  };

  var applyABehavior = function applyABehavior(dictFunctor) {
    return new Control_Apply.Apply(function () {
      return functorABehavior(dictFunctor);
    }, function (v) {
      return function (v1) {
        return function (e) {
          return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
        };
      };
    });
  };

  var semigroupABehavior = function semigroupABehavior(dictFunctor) {
    return function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyABehavior(dictFunctor))(Data_Semigroup.append(dictSemigroup)));
    };
  };

  var applicativeABehavior = function applicativeABehavior(dictFunctor) {
    return new Control_Applicative.Applicative(function () {
      return applyABehavior(dictFunctor);
    }, function (a) {
      return function (e) {
        return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
      };
    });
  };

  var animate = function animate(scene) {
    return function (render) {
      return FRP_Event.subscribe(sample_(FRP_Event.eventIsEvent)(scene)(FRP_Event_AnimationFrame.animationFrame))(render);
    };
  };

  exports["behavior"] = behavior;
  exports["switcher"] = switcher;
  exports["integral'"] = integral$prime;
  exports["fixB"] = fixB;
  exports["animate"] = animate;
  exports["functorABehavior"] = functorABehavior;
  exports["applyABehavior"] = applyABehavior;
  exports["applicativeABehavior"] = applicativeABehavior;
  exports["semigroupABehavior"] = semigroupABehavior;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var Data_Newtype = $PS["Data.Newtype"];

  var EventType = function EventType(x) {
    return x;
  };

  var newtypeEventType = new Data_Newtype.Newtype(function (n) {
    return n;
  }, EventType);
  exports["newtypeEventType"] = newtypeEventType;
})(PS);

(function (exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);

(function (exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.button = function (e) {
    return e.button;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});

(function (exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];

      if (ty != null && value instanceof ty) {
        return just(value);
      }

      return nothing;
    }

    var obj = value;

    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;

      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }

      obj = proto;
    }

    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];

  var unsafeReadProtoTagged = function unsafeReadProtoTagged(name) {
    return function (value) {
      return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
    };
  };

  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["button"] = $foreign.button;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Event.Mouse"] = $PS["FRP.Event.Mouse"] || {};
  var exports = $PS["FRP.Event.Mouse"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];

  var withPosition = function withPosition(v) {
    return function (e) {
      return FRP_Event.makeEvent(function (k) {
        return FRP_Event.subscribe(e)(function (value) {
          return function __do() {
            var pos = Effect_Ref.read(v.position)();
            return k({
              value: value,
              pos: pos
            })();
          };
        });
      });
    };
  };

  var withButtons = function withButtons(v) {
    return function (e) {
      return FRP_Event.makeEvent(function (k) {
        return FRP_Event.subscribe(e)(function (value) {
          return function __do() {
            var buttonsValue = Effect_Ref.read(v.buttons)();
            return k({
              value: value,
              buttons: buttonsValue
            })();
          };
        });
      });
    };
  };

  var getMouse = function __do() {
    var position = Effect_Ref["new"](Data_Maybe.Nothing.value)();
    var buttons = Effect_Ref["new"](Data_Set.empty)();
    var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
    var mouseMoveListener = Web_Event_EventTarget.eventListener(function (e) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
        return Effect_Ref.write(new Data_Maybe.Just({
          x: Web_UIEvent_MouseEvent.clientX(me),
          y: Web_UIEvent_MouseEvent.clientY(me)
        }))(position);
      })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
        return Effect_Ref.modify(Data_Set.insert(Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
      })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
        return Effect_Ref.modify(Data_Set["delete"](Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
      })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(mouseMoveListener)(false)(target)();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target)();

    var dispose = function __do() {
      Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(mouseMoveListener)(false)(target)();
      Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
      return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target)();
    };

    return {
      position: position,
      buttons: buttons,
      dispose: dispose
    };
  };

  var down = FRP_Event.makeEvent(function (k) {
    return function __do() {
      var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
      var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
          return k(Web_UIEvent_MouseEvent.button(me));
        })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
      return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target);
    };
  });
  exports["getMouse"] = getMouse;
  exports["down"] = down;
  exports["withPosition"] = withPosition;
  exports["withButtons"] = withButtons;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Behavior.Mouse"] = $PS["FRP.Behavior.Mouse"] || {};
  var exports = $PS["FRP.Behavior.Mouse"];
  var Data_Functor = $PS["Data.Functor"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Mouse = $PS["FRP.Event.Mouse"];

  var position = function position(m) {
    return FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
        return v.value(v.pos);
      })(FRP_Event_Mouse.withPosition(m)(e));
    });
  };

  var buttons = function buttons(m) {
    return FRP_Behavior.behavior(function (e) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
        return v.value(v.buttons);
      })(FRP_Event_Mouse.withButtons(m)(e));
    });
  };

  exports["position"] = position;
  exports["buttons"] = buttons;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var FRP_Event = $PS["FRP.Event"];

  var withTime = function withTime(e) {
    return FRP_Event.makeEvent(function (k) {
      return FRP_Event.subscribe(e)(function (value) {
        return function __do() {
          var time = Effect_Now.now();
          return k({
            time: time,
            value: value
          })();
        };
      });
    });
  };

  exports["withTime"] = withTime;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["FRP.Behavior.Time"] = $PS["FRP.Behavior.Time"] || {};
  var exports = $PS["FRP.Behavior.Time"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];
  var instant = FRP_Behavior.behavior(function (e) {
    return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
      return v.value(v.time);
    })(FRP_Event_Time.withTime(e));
  });
  var seconds = Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(function () {
    var $4 = Data_Time_Duration.toDuration(Data_Time_Duration.durationSeconds);
    return function ($5) {
      return $4(Data_DateTime_Instant.unInstant($5));
    };
  }())(instant);
  exports["seconds"] = seconds;
})(PS);

(function (exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function (id, Just, Nothing) {
    return function () {
      var el = document.getElementById(id);

      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };

  exports.getContext2D = function (c) {
    return function () {
      return c.getContext('2d');
    };
  };

  exports.getCanvasWidth = function (canvas) {
    return function () {
      return canvas.width;
    };
  };

  exports.getCanvasHeight = function (canvas) {
    return function () {
      return canvas.height;
    };
  };

  exports.setCanvasWidth = function (canvas) {
    return function (width) {
      return function () {
        canvas.width = width;
      };
    };
  };

  exports.setCanvasHeight = function (canvas) {
    return function (height) {
      return function () {
        canvas.height = height;
      };
    };
  };

  exports.setLineWidth = function (ctx) {
    return function (width) {
      return function () {
        ctx.lineWidth = width;
      };
    };
  };

  exports.setFillStyle = function (ctx) {
    return function (style) {
      return function () {
        ctx.fillStyle = style;
      };
    };
  };

  exports.setStrokeStyle = function (ctx) {
    return function (style) {
      return function () {
        ctx.strokeStyle = style;
      };
    };
  };

  exports.setShadowColor = function (ctx) {
    return function (color) {
      return function () {
        ctx.shadowColor = color;
      };
    };
  };

  exports.setShadowBlur = function (ctx) {
    return function (blur) {
      return function () {
        ctx.shadowBlur = blur;
      };
    };
  };

  exports.setShadowOffsetX = function (ctx) {
    return function (offsetX) {
      return function () {
        ctx.shadowOffsetX = offsetX;
      };
    };
  };

  exports.setShadowOffsetY = function (ctx) {
    return function (offsetY) {
      return function () {
        ctx.shadowOffsetY = offsetY;
      };
    };
  };

  exports.beginPath = function (ctx) {
    return function () {
      ctx.beginPath();
    };
  };

  exports.stroke = function (ctx) {
    return function () {
      ctx.stroke();
    };
  };

  exports.fill = function (ctx) {
    return function () {
      ctx.fill();
    };
  };

  exports.clip = function (ctx) {
    return function () {
      ctx.clip();
    };
  };

  exports.lineTo = function (ctx) {
    return function (x) {
      return function (y) {
        return function () {
          ctx.lineTo(x, y);
        };
      };
    };
  };

  exports.moveTo = function (ctx) {
    return function (x) {
      return function (y) {
        return function () {
          ctx.moveTo(x, y);
        };
      };
    };
  };

  exports.closePath = function (ctx) {
    return function () {
      ctx.closePath();
    };
  };

  exports.arc = function (ctx) {
    return function (a) {
      return function () {
        ctx.arc(a.x, a.y, a.radius, a.start, a.end);
      };
    };
  };

  exports.rect = function (ctx) {
    return function (r) {
      return function () {
        ctx.rect(r.x, r.y, r.width, r.height);
      };
    };
  };

  exports.scale = function (ctx) {
    return function (t) {
      return function () {
        ctx.scale(t.scaleX, t.scaleY);
      };
    };
  };

  exports.rotate = function (ctx) {
    return function (angle) {
      return function () {
        ctx.rotate(angle);
      };
    };
  };

  exports.translate = function (ctx) {
    return function (t) {
      return function () {
        ctx.translate(t.translateX, t.translateY);
      };
    };
  };

  exports.setFont = function (ctx) {
    return function (fontspec) {
      return function () {
        ctx.font = fontspec;
      };
    };
  };

  exports.fillText = function (ctx) {
    return function (text) {
      return function (x) {
        return function (y) {
          return function () {
            ctx.fillText(text, x, y);
          };
        };
      };
    };
  };

  exports.save = function (ctx) {
    return function () {
      ctx.save();
    };
  };

  exports.restore = function (ctx) {
    return function () {
      ctx.restore();
    };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];

  var withContext = function withContext(ctx) {
    return function (action) {
      return function __do() {
        $foreign.save(ctx)();
        var a = action();
        $foreign.restore(ctx)();
        return a;
      };
    };
  };

  var strokePath = function strokePath(ctx) {
    return function (path) {
      return function __do() {
        $foreign.beginPath(ctx)();
        var a = path();
        $foreign.stroke(ctx)();
        return a;
      };
    };
  };

  var getCanvasElementById = function getCanvasElementById(elId) {
    return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };

  var fillPath = function fillPath(ctx) {
    return function (path) {
      return function __do() {
        $foreign.beginPath(ctx)();
        var a = path();
        $foreign.fill(ctx)();
        return a;
      };
    };
  };

  exports["getCanvasElementById"] = getCanvasElementById;
  exports["strokePath"] = strokePath;
  exports["fillPath"] = fillPath;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["clip"] = $foreign.clip;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["arc"] = $foreign.arc;
  exports["rect"] = $foreign.rect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Graphics.Drawing.Font"] = $PS["Graphics.Drawing.Font"] || {};
  var exports = $PS["Graphics.Drawing.Font"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];

  var optionsString = function optionsString(v) {
    return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight)]);
  };

  var fontString = function fontString(v) {
    return optionsString(v.value2) + (" " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("px " + v.value0)));
  };

  exports["fontString"] = fontString;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["Graphics.Drawing"] = $PS["Graphics.Drawing"] || {};
  var exports = $PS["Graphics.Drawing"];
  var Color = $PS["Color"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Drawing_Font = $PS["Graphics.Drawing.Font"];
  var $$Math = $PS["Math"];

  var Path = function () {
    function Path(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Path.create = function (value0) {
      return function (value1) {
        return new Path(value0, value1);
      };
    };

    return Path;
  }();

  var Rectangle = function () {
    function Rectangle(value0) {
      this.value0 = value0;
    }

    ;

    Rectangle.create = function (value0) {
      return new Rectangle(value0);
    };

    return Rectangle;
  }();

  var Arc = function () {
    function Arc(value0) {
      this.value0 = value0;
    }

    ;

    Arc.create = function (value0) {
      return new Arc(value0);
    };

    return Arc;
  }();

  var Composite = function () {
    function Composite(value0) {
      this.value0 = value0;
    }

    ;

    Composite.create = function (value0) {
      return new Composite(value0);
    };

    return Composite;
  }();

  var Fill = function () {
    function Fill(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Fill.create = function (value0) {
      return function (value1) {
        return new Fill(value0, value1);
      };
    };

    return Fill;
  }();

  var Outline = function () {
    function Outline(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Outline.create = function (value0) {
      return function (value1) {
        return new Outline(value0, value1);
      };
    };

    return Outline;
  }();

  var Text = function () {
    function Text(value0, value1, value2, value3, value4) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value2;
      this.value3 = value3;
      this.value4 = value4;
    }

    ;

    Text.create = function (value0) {
      return function (value1) {
        return function (value2) {
          return function (value3) {
            return function (value4) {
              return new Text(value0, value1, value2, value3, value4);
            };
          };
        };
      };
    };

    return Text;
  }();

  var Many = function () {
    function Many(value0) {
      this.value0 = value0;
    }

    ;

    Many.create = function (value0) {
      return new Many(value0);
    };

    return Many;
  }();

  var Scale = function () {
    function Scale(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Scale.create = function (value0) {
      return function (value1) {
        return new Scale(value0, value1);
      };
    };

    return Scale;
  }();

  var Translate = function () {
    function Translate(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Translate.create = function (value0) {
      return function (value1) {
        return new Translate(value0, value1);
      };
    };

    return Translate;
  }();

  var Rotate = function () {
    function Rotate(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Rotate.create = function (value0) {
      return function (value1) {
        return new Rotate(value0, value1);
      };
    };

    return Rotate;
  }();

  var Clipped = function () {
    function Clipped(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    Clipped.create = function (value0) {
      return function (value1) {
        return new Clipped(value0, value1);
      };
    };

    return Clipped;
  }();

  var WithShadow = function () {
    function WithShadow(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }

    ;

    WithShadow.create = function (value0) {
      return function (value1) {
        return new WithShadow(value0, value1);
      };
    };

    return WithShadow;
  }();

  var translate = function translate(tx) {
    return function (ty) {
      return Translate.create({
        translateX: tx,
        translateY: ty
      });
    };
  };

  var semigroupOutlineStyle = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return {
        color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color),
        lineWidth: Control_Alt.alt(Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
      };
    };
  });
  var semigroupDrawing = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      if (v instanceof Many) {
        return new Many(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
      }

      ;

      if (v1 instanceof Many) {
        return new Many(new Data_List_Types.Cons(v, v1.value0));
      }

      ;
      return new Many(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
    };
  });

  var scale = function scale(sx) {
    return function (sy) {
      return Scale.create({
        scaleX: sx,
        scaleY: sy
      });
    };
  };

  var rotate = Rotate.create;

  var render = function render(ctx) {
    var renderShape = function renderShape(v) {
      if (v instanceof Path && v.value1 instanceof Data_List_Types.Nil) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      }

      ;

      if (v instanceof Path && v.value1 instanceof Data_List_Types.Cons) {
        return function __do() {
          Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value1.value1)(function (pt) {
            return Graphics_Canvas.lineTo(ctx)(pt.x)(pt.y);
          })();
          return Control_Applicative.when(Effect.applicativeEffect)(v.value0)(Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.closePath(ctx)))();
        };
      }

      ;

      if (v instanceof Rectangle) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.rect(ctx)(v.value0));
      }

      ;

      if (v instanceof Arc) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.arc(ctx)(v.value0));
      }

      ;

      if (v instanceof Composite) {
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(renderShape);
      }

      ;
      throw new Error("Failed pattern match at Graphics.Drawing (line 268, column 3 - line 268, column 38): " + [v.constructor.name]);
    };

    var applyShadow = function applyShadow(v) {
      return function __do() {
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
          return Graphics_Canvas.setShadowColor(ctx)(Color.cssStringHSLA(color));
        })();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
          return Graphics_Canvas.setShadowBlur(ctx)(blur);
        })();
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
          return function __do() {
            Graphics_Canvas.setShadowOffsetX(ctx)(offset.x)();
            return Graphics_Canvas.setShadowOffsetY(ctx)(offset.y)();
          };
        })();
      };
    };

    var applyOutlineStyle = function applyOutlineStyle(v) {
      return function __do() {
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
          return Graphics_Canvas.setStrokeStyle(ctx)(Color.cssStringHSLA(color));
        })();
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
          return Graphics_Canvas.setLineWidth(ctx)(width);
        })();
      };
    };

    var applyFillStyle = function applyFillStyle(v) {
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
        return Graphics_Canvas.setFillStyle(ctx)(Color.cssStringHSLA(color));
      });
    };

    var go = function go(v) {
      if (v instanceof Fill) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          applyFillStyle(v.value1)();
          return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
        }));
      }

      ;

      if (v instanceof Outline) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          applyOutlineStyle(v.value1)();
          return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
        }));
      }

      ;

      if (v instanceof Many) {
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(go);
      }

      ;

      if (v instanceof Scale) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          Graphics_Canvas.scale(ctx)(v.value0)();
          return go(v.value1)();
        }));
      }

      ;

      if (v instanceof Translate) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          Graphics_Canvas.translate(ctx)(v.value0)();
          return go(v.value1)();
        }));
      }

      ;

      if (v instanceof Rotate) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          Graphics_Canvas.rotate(ctx)(v.value0)();
          return go(v.value1)();
        }));
      }

      ;

      if (v instanceof Clipped) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          renderShape(v.value0)();
          Graphics_Canvas.clip(ctx)();
          return go(v.value1)();
        }));
      }

      ;

      if (v instanceof WithShadow) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          applyShadow(v.value0)();
          return go(v.value1)();
        }));
      }

      ;

      if (v instanceof Text) {
        return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
          Graphics_Canvas.setFont(ctx)(Graphics_Drawing_Font.fontString(v.value0))();
          applyFillStyle(v.value3)();
          return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
        }));
      }

      ;
      throw new Error("Failed pattern match at Graphics.Drawing (line 221, column 3 - line 224, column 21): " + [v.constructor.name]);
    };

    return go;
  };

  var rectangle = function rectangle(x) {
    return function (y) {
      return function (width) {
        return function (height) {
          return new Rectangle({
            x: x,
            y: y,
            width: width,
            height: height
          });
        };
      };
    };
  };

  var outlined = Data_Function.flip(Outline.create);

  var outlineColor = function outlineColor(c) {
    return {
      color: new Data_Maybe.Just(c),
      lineWidth: Data_Maybe.Nothing.value
    };
  };

  var monoidDrawing = new Data_Monoid.Monoid(function () {
    return semigroupDrawing;
  }, new Many(Data_Monoid.mempty(Data_List_Types.monoidList)));

  var lineWidth = function lineWidth(c) {
    return {
      color: Data_Maybe.Nothing.value,
      lineWidth: new Data_Maybe.Just(c)
    };
  };

  var filled = Data_Function.flip(Fill.create);

  var fillColor = function fillColor(c) {
    return {
      color: new Data_Maybe.Just(c)
    };
  };

  var arc = function arc(x) {
    return function (y) {
      return function (start) {
        return function (end) {
          return function (radius) {
            return new Arc({
              x: x,
              y: y,
              start: start,
              end: end,
              radius: radius
            });
          };
        };
      };
    };
  };

  var circle = function circle(x) {
    return function (y) {
      return arc(x)(y)(0.0)($$Math.pi * 2.0);
    };
  };

  exports["rectangle"] = rectangle;
  exports["circle"] = circle;
  exports["fillColor"] = fillColor;
  exports["outlineColor"] = outlineColor;
  exports["lineWidth"] = lineWidth;
  exports["filled"] = filled;
  exports["outlined"] = outlined;
  exports["scale"] = scale;
  exports["translate"] = translate;
  exports["render"] = render;
  exports["semigroupOutlineStyle"] = semigroupOutlineStyle;
  exports["semigroupDrawing"] = semigroupDrawing;
  exports["monoidDrawing"] = monoidDrawing;
})(PS);

(function ($PS) {
  // Generated by purs version 0.13.8
  "use strict";

  $PS["ReceptiveField.Main"] = $PS["ReceptiveField.Main"] || {};
  var exports = $PS["ReceptiveField.Main"];
  var Color = $PS["Color"];
  var Color_Scheme_MaterialDesign = $PS["Color.Scheme.MaterialDesign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Field = $PS["Data.Field"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Unit = $PS["Data.Unit"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Behavior_Mouse = $PS["FRP.Behavior.Mouse"];
  var FRP_Behavior_Time = $PS["FRP.Behavior.Time"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Mouse = $PS["FRP.Event.Mouse"];
  var Global = $PS["Global"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Drawing = $PS["Graphics.Drawing"];

  var scene = function scene(mouse) {
    return function (v) {
      var swell = function () {
        var f = function f(bs) {
          return function (s) {
            return function (ds) {
              if (Data_Set.isEmpty(bs)) {
                return -8.0 * (s - 1.0) - ds * 2.0;
              }

              ;

              if (Data_Boolean.otherwise) {
                return 2.0 * (4.0 - s);
              }

              ;
              throw new Error("Failed pattern match at ReceptiveField.Main (line 62, column 7 - line 63, column 46): " + [bs.constructor.name, s.constructor.name, ds.constructor.name]);
            };
          };
        };

        return FRP_Behavior.fixB(2.0)(function (b) {
          return FRP_Behavior["integral'"](FRP_Event.eventIsEvent)(Data_Field.field(Data_EuclideanRing.euclideanRingNumber)(Data_DivisionRing.divisionringNumber))(2.0)(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Newtype.unwrap(Data_Time_Duration.newtypeSeconds))(FRP_Behavior_Time.seconds))(function () {
            var db = FRP_Behavior.fixB(10.0)(function (db_) {
              return FRP_Behavior["integral'"](FRP_Event.eventIsEvent)(Data_Field.field(Data_EuclideanRing.euclideanRingNumber)(Data_DivisionRing.divisionringNumber))(10.0)(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Newtype.unwrap(Data_Time_Duration.newtypeSeconds))(FRP_Behavior_Time.seconds))(Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(f)(FRP_Behavior_Mouse.buttons(mouse)))(b))(db_));
            });
            return FRP_Behavior.switcher(db)(Data_Functor.voidLeft(FRP_Event.functorEvent)(FRP_Event_Mouse.down)(db));
          }());
        });
      }();

      var scaleFactor = Data_Ord.max(Data_Ord.ordNumber)(v.w)(v.h) / 16.0;

      var renderCircle = function renderCircle(v1) {
        return Graphics_Drawing.scale(scaleFactor)(scaleFactor)(Graphics_Drawing.translate(v1.x)(v1.y)(Graphics_Drawing.scale(v1.size)(v1.size)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(Color.lighten(0.2 + v1.size * 0.2)(Color_Scheme_MaterialDesign.blueGrey)))(Graphics_Drawing.lineWidth((1.0 + v1.size * 2.0) / scaleFactor)))(Graphics_Drawing.circle(0.0)(0.0)(0.5)))));
      };

      var renderCircles = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Graphics_Drawing.monoidDrawing)(renderCircle);

      var circles = function () {
        var toCircles = function toCircles(m) {
          return function (sw) {
            var dist = function dist(x) {
              return function (y) {
                return Data_Maybe.maybe(Global.infinity)(function (v1) {
                  var dy = y - Data_Int.toNumber(v1.y) / scaleFactor;
                  var dx = x - Data_Int.toNumber(v1.x) / scaleFactor;
                  return dx * dx + dy * dy;
                });
              };
            };

            return Data_Array.sortBy(Data_Ord.comparing(Data_Ord.ordNumber)(function (v1) {
              return -dist(v1.x)(v1.y)(m);
            }))(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(16))(function (i) {
              return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(16))(function (j) {
                var y = Data_Int.toNumber(j);
                var x = Data_Int.toNumber(i);
                var d = dist(x)(y)(m);
                return Control_Applicative.pure(Control_Applicative.applicativeArray)({
                  x: x,
                  y: y,
                  size: 0.1 + (1.0 + sw) / (d + 1.5)
                });
              });
            }));
          };
        };

        return Control_Apply.apply(FRP_Behavior.applyABehavior(FRP_Event.functorEvent))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(toCircles)(FRP_Behavior_Mouse.position(mouse)))(swell);
      }();

      var background = Graphics_Drawing.filled(Graphics_Drawing.fillColor(Color_Scheme_MaterialDesign.blueGrey))(Graphics_Drawing.rectangle(0.0)(0.0)(v.w)(v.h));
      return Data_Semigroup.append(FRP_Behavior.semigroupABehavior(FRP_Event.functorEvent)(Graphics_Drawing.semigroupDrawing))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(background))(Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(renderCircles)(circles));
    };
  };

  var main = function __do() {
    var mcanvas = Graphics_Canvas.getCanvasElementById("canvas")();
    var canvas = Data_Maybe.fromJust()(mcanvas);
    var ctx = Graphics_Canvas.getContext2D(canvas)();
    var w = Graphics_Canvas.getCanvasWidth(canvas)();
    var h = Graphics_Canvas.getCanvasHeight(canvas)();
    Graphics_Canvas.setCanvasWidth(canvas)(w)();
    Graphics_Canvas.setCanvasHeight(canvas)(h)();
    var mouse = FRP_Event_Mouse.getMouse();
    FRP_Behavior.animate(scene(mouse)({
      w: w,
      h: h
    }))(Graphics_Drawing.render(ctx))();
    return Data_Unit.unit;
  };

  exports["scene"] = scene;
  exports["main"] = main;
})(PS);

PS["ReceptiveField.Main"].main();
},{}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "41523" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","../dist/app.js"], null)
//# sourceMappingURL=/app.73158d74.js.map