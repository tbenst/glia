// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../output/Data.Functor/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);

    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }

    return result;
  };
};
},{}],"../output/Control.Semigroupoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Semigroupoid = function Semigroupoid(compose) {
  this.compose = compose;
};

var semigroupoidFn = new Semigroupoid(function (f) {
  return function (g) {
    return function (x) {
      return f(g(x));
    };
  };
});

var compose = function compose(dict) {
  return dict.compose;
};

var composeFlipped = function composeFlipped(dictSemigroupoid) {
  return function (f) {
    return function (g) {
      return compose(dictSemigroupoid)(g)(f);
    };
  };
};

module.exports = {
  compose: compose,
  Semigroupoid: Semigroupoid,
  composeFlipped: composeFlipped,
  semigroupoidFn: semigroupoidFn
};
},{}],"../output/Data.Boolean/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var otherwise = true;
module.exports = {
  otherwise: otherwise
};
},{}],"../output/Data.Function/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var on = function on(f) {
  return function (g) {
    return function (x) {
      return function (y) {
        return f(g(x))(g(y));
      };
    };
  };
};

var flip = function flip(f) {
  return function (b) {
    return function (a) {
      return f(a)(b);
    };
  };
};

var $$const = function $$const(a) {
  return function (v) {
    return a;
  };
};

var applyN = function applyN(f) {
  var go = function go($copy_n) {
    return function ($copy_acc) {
      var $tco_var_n = $copy_n;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(n, acc) {
        if (n <= 0) {
          $tco_done = true;
          return acc;
        }

        ;

        if (Data_Boolean.otherwise) {
          $tco_var_n = n - 1 | 0;
          $copy_acc = f(acc);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [n.constructor.name, acc.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_n, $copy_acc);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var applyFlipped = function applyFlipped(x) {
  return function (f) {
    return f(x);
  };
};

var apply = function apply(f) {
  return function (x) {
    return f(x);
  };
};

module.exports = {
  flip: flip,
  "const": $$const,
  apply: apply,
  applyFlipped: applyFlipped,
  applyN: applyN,
  on: on
};
},{"../Data.Boolean/index.js":"../output/Data.Boolean/index.js"}],"../output/Data.Unit/foreign.js":[function(require,module,exports) {
"use strict";

exports.unit = {};
},{}],"../output/Data.Show/foreign.js":[function(require,module,exports) {
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);

  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07":
        return "'\\a'";

      case "\b":
        return "'\\b'";

      case "\f":
        return "'\\f'";

      case "\n":
        return "'\\n'";

      case "\r":
        return "'\\r'";

      case "\t":
        return "'\\t'";

      case "\v":
        return "'\\v'";
    }

    return "'\\" + code.toString(10) + "'";
  }

  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(/[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
  function (c, i) {
    switch (c) {
      case "\"":
      case "\\":
        return "\\" + c;

      case "\x07":
        return "\\a";

      case "\b":
        return "\\b";

      case "\f":
        return "\\f";

      case "\n":
        return "\\n";

      case "\r":
        return "\\r";

      case "\t":
        return "\\t";

      case "\v":
        return "\\v";
    }

    var k = i + 1;
    var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
    return "\\" + c.charCodeAt(0).toString(10) + empty;
  }) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];

    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }

    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};
},{}],"../output/Data.Symbol/foreign.js":[function(require,module,exports) {
"use strict"; // module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};
},{}],"../output/Data.Symbol/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var SProxy = function () {
  function SProxy() {}

  ;
  SProxy.value = new SProxy();
  return SProxy;
}();

var IsSymbol = function IsSymbol(reflectSymbol) {
  this.reflectSymbol = reflectSymbol;
};

var reifySymbol = function reifySymbol(s) {
  return function (f) {
    return $foreign.unsafeCoerce(function (dictIsSymbol) {
      return f(dictIsSymbol);
    })({
      reflectSymbol: function reflectSymbol(v) {
        return s;
      }
    })(SProxy.value);
  };
};

var reflectSymbol = function reflectSymbol(dict) {
  return dict.reflectSymbol;
};

module.exports = {
  IsSymbol: IsSymbol,
  reflectSymbol: reflectSymbol,
  reifySymbol: reifySymbol,
  SProxy: SProxy
};
},{"./foreign.js":"../output/Data.Symbol/foreign.js"}],"../output/Record.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};

      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }

      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};

    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }

    return copy;
  };
};
},{}],"../output/Record.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafeHas: $foreign.unsafeHas,
  unsafeGet: $foreign.unsafeGet,
  unsafeSet: $foreign.unsafeSet,
  unsafeDelete: $foreign.unsafeDelete
};
},{"./foreign.js":"../output/Record.Unsafe/foreign.js"}],"../output/Type.Data.RowList/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var RLProxy = function () {
  function RLProxy() {}

  ;
  RLProxy.value = new RLProxy();
  return RLProxy;
}();

module.exports = {
  RLProxy: RLProxy
};
},{}],"../output/Data.Show/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var ShowRecordFields = function ShowRecordFields(showRecordFields) {
  this.showRecordFields = showRecordFields;
};

var Show = function Show(show) {
  this.show = show;
};

var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
  return function (v1) {
    return [];
  };
});

var showRecordFields = function showRecordFields(dict) {
  return dict.showRecordFields;
};

var showRecord = function showRecord(dictRowToList) {
  return function (dictShowRecordFields) {
    return new Show(function (record) {
      var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);

      if (v.length === 0) {
        return "{}";
      }

      ;
      return $foreign.join(" ")(["{", $foreign.join(", ")(v), "}"]);
    });
  };
};

var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
  if (v) {
    return "true";
  }

  ;

  if (!v) {
    return "false";
  }

  ;
  throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [v.constructor.name]);
});

var show = function show(dict) {
  return dict.show;
};

var showArray = function showArray(dictShow) {
  return new Show($foreign.showArrayImpl(show(dictShow)));
};

var showRecordFieldsCons = function showRecordFieldsCons(dictIsSymbol) {
  return function (dictShowRecordFields) {
    return function (dictShow) {
      return new ShowRecordFields(function (v) {
        return function (record) {
          var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
          var focus = Record_Unsafe.unsafeGet(key)(record);
          return $foreign.cons($foreign.join(": ")([key, show(dictShow)(focus)]))(tail);
        };
      });
    };
  };
};

module.exports = {
  Show: Show,
  show: show,
  ShowRecordFields: ShowRecordFields,
  showRecordFields: showRecordFields,
  showBoolean: showBoolean,
  showInt: showInt,
  showNumber: showNumber,
  showChar: showChar,
  showString: showString,
  showArray: showArray,
  showRecord: showRecord,
  showRecordFieldsNil: showRecordFieldsNil,
  showRecordFieldsCons: showRecordFieldsCons
};
},{"./foreign.js":"../output/Data.Show/foreign.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Unit/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var showUnit = new Data_Show.Show(function (v) {
  return "unit";
});
module.exports = {
  showUnit: showUnit,
  unit: $foreign.unit
};
},{"./foreign.js":"../output/Data.Unit/foreign.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Functor/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Functor = function Functor(map) {
  this.map = map;
};

var map = function map(dict) {
  return dict.map;
};

var mapFlipped = function mapFlipped(dictFunctor) {
  return function (fa) {
    return function (f) {
      return map(dictFunctor)(f)(fa);
    };
  };
};

var $$void = function $$void(dictFunctor) {
  return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};

var voidLeft = function voidLeft(dictFunctor) {
  return function (f) {
    return function (x) {
      return map(dictFunctor)(Data_Function["const"](x))(f);
    };
  };
};

var voidRight = function voidRight(dictFunctor) {
  return function (x) {
    return map(dictFunctor)(Data_Function["const"](x));
  };
};

var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);

var flap = function flap(dictFunctor) {
  return function (ff) {
    return function (x) {
      return map(dictFunctor)(function (f) {
        return f(x);
      })(ff);
    };
  };
};

module.exports = {
  Functor: Functor,
  map: map,
  mapFlipped: mapFlipped,
  "void": $$void,
  voidRight: voidRight,
  voidLeft: voidLeft,
  flap: flap,
  functorFn: functorFn,
  functorArray: functorArray
};
},{"./foreign.js":"../output/Data.Functor/foreign.js","../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Semigroup/foreign.js":[function(require,module,exports) {
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};
},{}],"../output/Data.Void/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Show = require("../Data.Show/index.js");

var Void = function Void(x) {
  return x;
};

var absurd = function absurd(a) {
  var spin = function spin($copy_v) {
    var $tco_result;

    function $tco_loop(v) {
      $copy_v = v;
      return;
    }

    ;

    while (!false) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return spin(a);
};

var showVoid = new Data_Show.Show(absurd);
module.exports = {
  absurd: absurd,
  showVoid: showVoid
};
},{"../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Semigroup/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Data_Void = require("../Data.Void/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var SemigroupRecord = function SemigroupRecord(appendRecord) {
  this.appendRecord = appendRecord;
};

var Semigroup = function Semigroup(append) {
  this.append = append;
};

var semigroupVoid = new Semigroup(function (v) {
  return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
});
var semigroupArray = new Semigroup($foreign.concatArray);

var appendRecord = function appendRecord(dict) {
  return dict.appendRecord;
};

var semigroupRecord = function semigroupRecord(dictRowToList) {
  return function (dictSemigroupRecord) {
    return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var append = function append(dict) {
  return dict.append;
};

var semigroupFn = function semigroupFn(dictSemigroup) {
  return new Semigroup(function (f) {
    return function (g) {
      return function (x) {
        return append(dictSemigroup)(f(x))(g(x));
      };
    };
  });
};

var semigroupRecordCons = function semigroupRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemigroupRecord) {
      return function (dictSemigroup) {
        return new SemigroupRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
            };
          };
        });
      };
    };
  };
};

module.exports = {
  Semigroup: Semigroup,
  append: append,
  SemigroupRecord: SemigroupRecord,
  appendRecord: appendRecord,
  semigroupString: semigroupString,
  semigroupUnit: semigroupUnit,
  semigroupVoid: semigroupVoid,
  semigroupFn: semigroupFn,
  semigroupArray: semigroupArray,
  semigroupRecord: semigroupRecord,
  semigroupRecordNil: semigroupRecordNil,
  semigroupRecordCons: semigroupRecordCons
};
},{"./foreign.js":"../output/Data.Semigroup/foreign.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Data.Void/index.js":"../output/Data.Void/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Control.Alt/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Alt = function Alt(Functor0, alt) {
  this.Functor0 = Functor0;
  this.alt = alt;
};

var altArray = new Alt(function () {
  return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));

var alt = function alt(dict) {
  return dict.alt;
};

module.exports = {
  Alt: Alt,
  alt: alt,
  altArray: altArray
};
},{"../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js"}],"../output/Control.Apply/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;

    for (var i = 0; i < l; i++) {
      var f = fs[i];

      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }

    return result;
  };
};
},{}],"../output/Control.Category/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Category = function Category(Semigroupoid0, identity) {
  this.Semigroupoid0 = Semigroupoid0;
  this.identity = identity;
};

var identity = function identity(dict) {
  return dict.identity;
};

var categoryFn = new Category(function () {
  return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
  return x;
});
module.exports = {
  Category: Category,
  identity: identity,
  categoryFn: categoryFn
};
},{"../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js"}],"../output/Control.Apply/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Apply = function Apply(Functor0, apply) {
  this.Functor0 = Functor0;
  this.apply = apply;
};

var applyFn = new Apply(function () {
  return Data_Functor.functorFn;
}, function (f) {
  return function (g) {
    return function (x) {
      return f(x)(g(x));
    };
  };
});
var applyArray = new Apply(function () {
  return Data_Functor.functorArray;
}, $foreign.arrayApply);

var apply = function apply(dict) {
  return dict.apply;
};

var applyFirst = function applyFirst(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
    };
  };
};

var applySecond = function applySecond(dictApply) {
  return function (a) {
    return function (b) {
      return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
    };
  };
};

var lift2 = function lift2(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
      };
    };
  };
};

var lift3 = function lift3(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
        };
      };
    };
  };
};

var lift4 = function lift4(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
          };
        };
      };
    };
  };
};

var lift5 = function lift5(dictApply) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
            };
          };
        };
      };
    };
  };
};

module.exports = {
  Apply: Apply,
  apply: apply,
  applyFirst: applyFirst,
  applySecond: applySecond,
  lift2: lift2,
  lift3: lift3,
  lift4: lift4,
  lift5: lift5,
  applyFn: applyFn,
  applyArray: applyArray
};
},{"./foreign.js":"../output/Control.Apply/foreign.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js"}],"../output/Control.Applicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Applicative = function Applicative(Apply0, pure) {
  this.Apply0 = Apply0;
  this.pure = pure;
};

var pure = function pure(dict) {
  return dict.pure;
};

var unless = function unless(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (!v) {
        return v1;
      }

      ;

      if (v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var when = function when(dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return pure(dictApplicative)(Data_Unit.unit);
      }

      ;
      throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var liftA1 = function liftA1(dictApplicative) {
  return function (f) {
    return function (a) {
      return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
    };
  };
};

var applicativeFn = new Applicative(function () {
  return Control_Apply.applyFn;
}, function (x) {
  return function (v) {
    return x;
  };
});
var applicativeArray = new Applicative(function () {
  return Control_Apply.applyArray;
}, function (x) {
  return [x];
});
module.exports = {
  Applicative: Applicative,
  pure: pure,
  liftA1: liftA1,
  unless: unless,
  when: when,
  applicativeFn: applicativeFn,
  applicativeArray: applicativeArray
};
},{"../Control.Apply/index.js":"../output/Control.Apply/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Control.Plus/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Plus = function Plus(Alt0, empty) {
  this.Alt0 = Alt0;
  this.empty = empty;
};

var plusArray = new Plus(function () {
  return Control_Alt.altArray;
}, []);

var empty = function empty(dict) {
  return dict.empty;
};

module.exports = {
  Plus: Plus,
  empty: empty,
  plusArray: plusArray
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js"}],"../output/Control.Alternative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Alternative = function Alternative(Applicative0, Plus1) {
  this.Applicative0 = Applicative0;
  this.Plus1 = Plus1;
};

var alternativeArray = new Alternative(function () {
  return Control_Applicative.applicativeArray;
}, function () {
  return Control_Plus.plusArray;
});
module.exports = {
  Alternative: Alternative,
  alternativeArray: alternativeArray
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js"}],"../output/Control.Bind/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];

    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }

    return result;
  };
};
},{}],"../output/Control.Bind/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Function = require("../Data.Function/index.js");

var Discard = function Discard(discard) {
  this.discard = discard;
};

var Bind = function Bind(Apply0, bind) {
  this.Apply0 = Apply0;
  this.bind = bind;
};

var discard = function discard(dict) {
  return dict.discard;
};

var bindFn = new Bind(function () {
  return Control_Apply.applyFn;
}, function (m) {
  return function (f) {
    return function (x) {
      return f(m(x))(x);
    };
  };
});
var bindArray = new Bind(function () {
  return Control_Apply.applyArray;
}, $foreign.arrayBind);

var bind = function bind(dict) {
  return dict.bind;
};

var bindFlipped = function bindFlipped(dictBind) {
  return Data_Function.flip(bind(dictBind));
};

var composeKleisliFlipped = function composeKleisliFlipped(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bindFlipped(dictBind)(f)(g(a));
      };
    };
  };
};

var composeKleisli = function composeKleisli(dictBind) {
  return function (f) {
    return function (g) {
      return function (a) {
        return bind(dictBind)(f(a))(g);
      };
    };
  };
};

var discardUnit = new Discard(function (dictBind) {
  return bind(dictBind);
});

var ifM = function ifM(dictBind) {
  return function (cond) {
    return function (t) {
      return function (f) {
        return bind(dictBind)(cond)(function (cond$prime) {
          if (cond$prime) {
            return t;
          }

          ;
          return f;
        });
      };
    };
  };
};

var join = function join(dictBind) {
  return function (m) {
    return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  Bind: Bind,
  bind: bind,
  bindFlipped: bindFlipped,
  Discard: Discard,
  discard: discard,
  join: join,
  composeKleisli: composeKleisli,
  composeKleisliFlipped: composeKleisliFlipped,
  ifM: ifM,
  bindFn: bindFn,
  bindArray: bindArray,
  discardUnit: discardUnit
};
},{"./foreign.js":"../output/Control.Bind/foreign.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Function/index.js":"../output/Data.Function/index.js"}],"../output/Control.Extend/foreign.js":[function(require,module,exports) {
"use strict";

exports.arrayExtend = function (f) {
  return function (xs) {
    return xs.map(function (_, i, xs) {
      return f(xs.slice(i));
    });
  };
};
},{}],"../output/Control.Extend/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Extend = function Extend(Functor0, extend) {
  this.Functor0 = Functor0;
  this.extend = extend;
};

var extendFn = function extendFn(dictSemigroup) {
  return new Extend(function () {
    return Data_Functor.functorFn;
  }, function (f) {
    return function (g) {
      return function (w) {
        return f(function (w$prime) {
          return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
        });
      };
    };
  });
};

var extendArray = new Extend(function () {
  return Data_Functor.functorArray;
}, $foreign.arrayExtend);

var extend = function extend(dict) {
  return dict.extend;
};

var extendFlipped = function extendFlipped(dictExtend) {
  return function (w) {
    return function (f) {
      return extend(dictExtend)(f)(w);
    };
  };
};

var duplicate = function duplicate(dictExtend) {
  return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};

var composeCoKleisliFlipped = function composeCoKleisliFlipped(dictExtend) {
  return function (f) {
    return function (g) {
      return function (w) {
        return f(extend(dictExtend)(g)(w));
      };
    };
  };
};

var composeCoKleisli = function composeCoKleisli(dictExtend) {
  return function (f) {
    return function (g) {
      return function (w) {
        return g(extend(dictExtend)(f)(w));
      };
    };
  };
};

module.exports = {
  Extend: Extend,
  extend: extend,
  extendFlipped: extendFlipped,
  composeCoKleisli: composeCoKleisli,
  composeCoKleisliFlipped: composeCoKleisliFlipped,
  duplicate: duplicate,
  extendFn: extendFn,
  extendArray: extendArray
};
},{"./foreign.js":"../output/Control.Extend/foreign.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js"}],"../output/Control.Monad/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Monad = function Monad(Applicative0, Bind1) {
  this.Applicative0 = Applicative0;
  this.Bind1 = Bind1;
};

var whenM = function whenM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var unlessM = function unlessM(dictMonad) {
  return function (mb) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
        return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
      });
    };
  };
};

var monadFn = new Monad(function () {
  return Control_Applicative.applicativeFn;
}, function () {
  return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
  return Control_Applicative.applicativeArray;
}, function () {
  return Control_Bind.bindArray;
});

var liftM1 = function liftM1(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
        return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
      });
    };
  };
};

var ap = function ap(dictMonad) {
  return function (f) {
    return function (a) {
      return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
        return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
          return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
        });
      });
    };
  };
};

module.exports = {
  Monad: Monad,
  liftM1: liftM1,
  ap: ap,
  whenM: whenM,
  unlessM: unlessM,
  monadFn: monadFn,
  monadArray: monadArray
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js"}],"../output/Control.MonadZero/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var MonadZero = function MonadZero(Alternative1, Monad0) {
  this.Alternative1 = Alternative1;
  this.Monad0 = Monad0;
};

var monadZeroArray = new MonadZero(function () {
  return Control_Alternative.alternativeArray;
}, function () {
  return Control_Monad.monadArray;
});

var guard = function guard(dictMonadZero) {
  return function (v) {
    if (v) {
      return Control_Applicative.pure(dictMonadZero.Alternative1().Applicative0())(Data_Unit.unit);
    }

    ;

    if (!v) {
      return Control_Plus.empty(dictMonadZero.Alternative1().Plus1());
    }

    ;
    throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [v.constructor.name]);
  };
};

module.exports = {
  MonadZero: MonadZero,
  guard: guard,
  monadZeroArray: monadZeroArray
};
},{"../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Bounded/foreign.js":[function(require,module,exports) {
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;
exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);
exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;
},{}],"../output/Data.Ord/foreign.js":[function(require,module,exports) {
"use strict";

var unsafeCompareImpl = function unsafeCompareImpl(lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;

      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);

        if (o !== 0) {
          return o;
        }

        i++;
      }

      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};
},{}],"../output/Data.Eq/foreign.js":[function(require,module,exports) {
"use strict";

var refEq = function refEq(r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs === ys) return true;
      if (xs.length !== ys.length) return false;

      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }

      return true;
    };
  };
};
},{}],"../output/Data.Eq/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var EqRecord = function EqRecord(eqRecord) {
  this.eqRecord = eqRecord;
};

var Eq1 = function Eq1(eq1) {
  this.eq1 = eq1;
};

var Eq = function Eq(eq) {
  this.eq = eq;
};

var eqVoid = new Eq(function (v) {
  return function (v1) {
    return true;
  };
});
var eqUnit = new Eq(function (v) {
  return function (v1) {
    return true;
  };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return true;
    };
  };
});

var eqRecord = function eqRecord(dict) {
  return dict.eqRecord;
};

var eqRec = function eqRec(dictRowToList) {
  return function (dictEqRecord) {
    return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);

var eq1 = function eq1(dict) {
  return dict.eq1;
};

var eq = function eq(dict) {
  return dict.eq;
};

var eqArray = function eqArray(dictEq) {
  return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};

var eq1Array = new Eq1(function (dictEq) {
  return eq(eqArray(dictEq));
});

var eqRowCons = function eqRowCons(dictEqRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictEq) {
        return new EqRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var get = Record_Unsafe.unsafeGet(key);
              return eq(dictEq)(get(ra))(get(rb)) && tail;
            };
          };
        });
      };
    };
  };
};

var notEq = function notEq(dictEq) {
  return function (x) {
    return function (y) {
      return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
    };
  };
};

var notEq1 = function notEq1(dictEq1) {
  return function (dictEq) {
    return function (x) {
      return function (y) {
        return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
      };
    };
  };
};

module.exports = {
  Eq: Eq,
  eq: eq,
  notEq: notEq,
  Eq1: Eq1,
  eq1: eq1,
  notEq1: notEq1,
  EqRecord: EqRecord,
  eqRecord: eqRecord,
  eqBoolean: eqBoolean,
  eqInt: eqInt,
  eqNumber: eqNumber,
  eqChar: eqChar,
  eqString: eqString,
  eqUnit: eqUnit,
  eqVoid: eqVoid,
  eqArray: eqArray,
  eqRec: eqRec,
  eq1Array: eq1Array,
  eqRowNil: eqRowNil,
  eqRowCons: eqRowCons
};
},{"./foreign.js":"../output/Data.Eq/foreign.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Ordering/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var LT = function () {
  function LT() {}

  ;
  LT.value = new LT();
  return LT;
}();

var GT = function () {
  function GT() {}

  ;
  GT.value = new GT();
  return GT;
}();

var EQ = function () {
  function EQ() {}

  ;
  EQ.value = new EQ();
  return EQ;
}();

var showOrdering = new Data_Show.Show(function (v) {
  if (v instanceof LT) {
    return "LT";
  }

  ;

  if (v instanceof GT) {
    return "GT";
  }

  ;

  if (v instanceof EQ) {
    return "EQ";
  }

  ;
  throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [v.constructor.name]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v instanceof LT) {
      return LT.value;
    }

    ;

    if (v instanceof GT) {
      return GT.value;
    }

    ;

    if (v instanceof EQ) {
      return v1;
    }

    ;
    throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [v.constructor.name, v1.constructor.name]);
  };
});

var invert = function invert(v) {
  if (v instanceof GT) {
    return LT.value;
  }

  ;

  if (v instanceof EQ) {
    return EQ.value;
  }

  ;

  if (v instanceof LT) {
    return GT.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
};

var eqOrdering = new Data_Eq.Eq(function (v) {
  return function (v1) {
    if (v instanceof LT && v1 instanceof LT) {
      return true;
    }

    ;

    if (v instanceof GT && v1 instanceof GT) {
      return true;
    }

    ;

    if (v instanceof EQ && v1 instanceof EQ) {
      return true;
    }

    ;
    return false;
  };
});
module.exports = {
  LT: LT,
  GT: GT,
  EQ: EQ,
  invert: invert,
  eqOrdering: eqOrdering,
  semigroupOrdering: semigroupOrdering,
  showOrdering: showOrdering
};
},{"../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Ring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};
},{}],"../output/Data.Semiring/foreign.js":[function(require,module,exports) {
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};
},{}],"../output/Type.Data.Row/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var RProxy = function () {
  function RProxy() {}

  ;
  RProxy.value = new RProxy();
  return RProxy;
}();

module.exports = {
  RProxy: RProxy
};
},{}],"../output/Data.Semiring/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_Row = require("../Type.Data.Row/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var SemiringRecord = function SemiringRecord(addRecord, mulRecord, oneRecord, zeroRecord) {
  this.addRecord = addRecord;
  this.mulRecord = mulRecord;
  this.oneRecord = oneRecord;
  this.zeroRecord = zeroRecord;
};

var Semiring = function Semiring(add, mul, one, zero) {
  this.add = add;
  this.mul = mul;
  this.one = one;
  this.zero = zero;
};

var zeroRecord = function zeroRecord(dict) {
  return dict.zeroRecord;
};

var zero = function zero(dict) {
  return dict.zero;
};

var semiringUnit = new Semiring(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return {};
  };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);

var oneRecord = function oneRecord(dict) {
  return dict.oneRecord;
};

var one = function one(dict) {
  return dict.one;
};

var mulRecord = function mulRecord(dict) {
  return dict.mulRecord;
};

var mul = function mul(dict) {
  return dict.mul;
};

var addRecord = function addRecord(dict) {
  return dict.addRecord;
};

var semiringRecord = function semiringRecord(dictRowToList) {
  return function (dictSemiringRecord) {
    return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
  };
};

var add = function add(dict) {
  return dict.add;
};

var semiringFn = function semiringFn(dictSemiring) {
  return new Semiring(function (f) {
    return function (g) {
      return function (x) {
        return add(dictSemiring)(f(x))(g(x));
      };
    };
  }, function (f) {
    return function (g) {
      return function (x) {
        return mul(dictSemiring)(f(x))(g(x));
      };
    };
  }, function (v) {
    return one(dictSemiring);
  }, function (v) {
    return zero(dictSemiring);
  });
};

var semiringRecordCons = function semiringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictSemiringRecord) {
      return function (dictSemiring) {
        return new SemiringRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (v1) {
            var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(one(dictSemiring))(tail);
          };
        }, function (v) {
          return function (v1) {
            var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(zero(dictSemiring))(tail);
          };
        });
      };
    };
  };
};

module.exports = {
  Semiring: Semiring,
  add: add,
  zero: zero,
  mul: mul,
  one: one,
  SemiringRecord: SemiringRecord,
  addRecord: addRecord,
  mulRecord: mulRecord,
  oneRecord: oneRecord,
  zeroRecord: zeroRecord,
  semiringInt: semiringInt,
  semiringNumber: semiringNumber,
  semiringFn: semiringFn,
  semiringUnit: semiringUnit,
  semiringRecord: semiringRecord,
  semiringRecordNil: semiringRecordNil,
  semiringRecordCons: semiringRecordCons
};
},{"./foreign.js":"../output/Data.Semiring/foreign.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.Row/index.js":"../output/Type.Data.Row/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Ring/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var RingRecord = function RingRecord(SemiringRecord0, subRecord) {
  this.SemiringRecord0 = SemiringRecord0;
  this.subRecord = subRecord;
};

var Ring = function Ring(Semiring0, sub) {
  this.Semiring0 = Semiring0;
  this.sub = sub;
};

var subRecord = function subRecord(dict) {
  return dict.subRecord;
};

var sub = function sub(dict) {
  return dict.sub;
};

var ringUnit = new Ring(function () {
  return Data_Semiring.semiringUnit;
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
});
var ringRecordNil = new RingRecord(function () {
  return Data_Semiring.semiringRecordNil;
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
});

var ringRecordCons = function ringRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictRingRecord) {
      return function (dictRing) {
        return new RingRecord(function () {
          return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
            };
          };
        });
      };
    };
  };
};

var ringRecord = function ringRecord(dictRowToList) {
  return function (dictRingRecord) {
    return new Ring(function () {
      return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
    }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var ringNumber = new Ring(function () {
  return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
  return Data_Semiring.semiringInt;
}, $foreign.intSub);

var ringFn = function ringFn(dictRing) {
  return new Ring(function () {
    return Data_Semiring.semiringFn(dictRing.Semiring0());
  }, function (f) {
    return function (g) {
      return function (x) {
        return sub(dictRing)(f(x))(g(x));
      };
    };
  });
};

var negate = function negate(dictRing) {
  return function (a) {
    return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
  };
};

module.exports = {
  Ring: Ring,
  sub: sub,
  negate: negate,
  RingRecord: RingRecord,
  subRecord: subRecord,
  ringInt: ringInt,
  ringNumber: ringNumber,
  ringUnit: ringUnit,
  ringFn: ringFn,
  ringRecord: ringRecord,
  ringRecordNil: ringRecordNil,
  ringRecordCons: ringRecordCons
};
},{"./foreign.js":"../output/Data.Ring/foreign.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Ord/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var OrdRecord = function OrdRecord(EqRecord0, compareRecord) {
  this.EqRecord0 = EqRecord0;
  this.compareRecord = compareRecord;
};

var Ord1 = function Ord1(Eq10, compare1) {
  this.Eq10 = Eq10;
  this.compare1 = compare1;
};

var Ord = function Ord(Eq0, compare) {
  this.Eq0 = Eq0;
  this.compare = compare;
};

var ordVoid = new Ord(function () {
  return Data_Eq.eqVoid;
}, function (v) {
  return function (v1) {
    return Data_Ordering.EQ.value;
  };
});
var ordUnit = new Ord(function () {
  return Data_Eq.eqUnit;
}, function (v) {
  return function (v1) {
    return Data_Ordering.EQ.value;
  };
});
var ordString = new Ord(function () {
  return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function () {
  return Data_Eq.eqRowNil;
}, function (v) {
  return function (v1) {
    return function (v2) {
      return Data_Ordering.EQ.value;
    };
  };
});
var ordOrdering = new Ord(function () {
  return Data_Ordering.eqOrdering;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (v instanceof Data_Ordering.LT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
      return Data_Ordering.GT.value;
    }

    ;

    if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
      return Data_Ordering.LT.value;
    }

    ;

    if (v instanceof Data_Ordering.GT) {
      return Data_Ordering.GT.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 119, column 21): " + [v.constructor.name, v1.constructor.name]);
  };
});
var ordNumber = new Ord(function () {
  return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function () {
  return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function () {
  return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function () {
  return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));

var compareRecord = function compareRecord(dict) {
  return dict.compareRecord;
};

var ordRecord = function ordRecord(dictRowToList) {
  return function (dictOrdRecord) {
    return new Ord(function () {
      return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
    }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var compare1 = function compare1(dict) {
  return dict.compare1;
};

var compare = function compare(dict) {
  return dict.compare;
};

var comparing = function comparing(dictOrd) {
  return function (f) {
    return function (x) {
      return function (y) {
        return compare(dictOrd)(f(x))(f(y));
      };
    };
  };
};

var greaterThan = function greaterThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var greaterThanOrEq = function greaterThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var signum = function signum(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($43) {
        return Data_Semiring.one(dictRing.Semiring0());
      }

      ;
      return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
    };
  };
};

var lessThan = function lessThan(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.LT) {
        return true;
      }

      ;
      return false;
    };
  };
};

var lessThanOrEq = function lessThanOrEq(dictOrd) {
  return function (a1) {
    return function (a2) {
      var v = compare(dictOrd)(a1)(a2);

      if (v instanceof Data_Ordering.GT) {
        return false;
      }

      ;
      return true;
    };
  };
};

var max = function max(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return y;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return x;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
    };
  };
};

var min = function min(dictOrd) {
  return function (x) {
    return function (y) {
      var v = compare(dictOrd)(x)(y);

      if (v instanceof Data_Ordering.LT) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return x;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return y;
      }

      ;
      throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [v.constructor.name]);
    };
  };
};

var ordArray = function ordArray(dictOrd) {
  return new Ord(function () {
    return Data_Eq.eqArray(dictOrd.Eq0());
  }, function () {
    var toDelta = function toDelta(x) {
      return function (y) {
        var v = compare(dictOrd)(x)(y);

        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }

        ;

        if (v instanceof Data_Ordering.LT) {
          return 1;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return -1 | 0;
        }

        ;
        throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 68, column 17): " + [v.constructor.name]);
      };
    };

    return function (xs) {
      return function (ys) {
        return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
      };
    };
  }());
};

var ord1Array = new Ord1(function () {
  return Data_Eq.eq1Array;
}, function (dictOrd) {
  return compare(ordArray(dictOrd));
});

var ordRecordCons = function ordRecordCons(dictOrdRecord) {
  return function (dictCons) {
    return function (dictIsSymbol) {
      return function (dictOrd) {
        return new OrdRecord(function () {
          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
              var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);

              if ($49) {
                return left;
              }

              ;
              return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
            };
          };
        });
      };
    };
  };
};

var clamp = function clamp(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        return min(dictOrd)(hi)(max(dictOrd)(low)(x));
      };
    };
  };
};

var between = function between(dictOrd) {
  return function (low) {
    return function (hi) {
      return function (x) {
        if (lessThan(dictOrd)(x)(low)) {
          return false;
        }

        ;

        if (greaterThan(dictOrd)(x)(hi)) {
          return false;
        }

        ;
        return true;
      };
    };
  };
};

var abs = function abs(dictOrd) {
  return function (dictRing) {
    return function (x) {
      var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));

      if ($53) {
        return x;
      }

      ;
      return Data_Ring.negate(dictRing)(x);
    };
  };
};

module.exports = {
  Ord: Ord,
  compare: compare,
  Ord1: Ord1,
  compare1: compare1,
  lessThan: lessThan,
  lessThanOrEq: lessThanOrEq,
  greaterThan: greaterThan,
  greaterThanOrEq: greaterThanOrEq,
  comparing: comparing,
  min: min,
  max: max,
  clamp: clamp,
  between: between,
  abs: abs,
  signum: signum,
  OrdRecord: OrdRecord,
  compareRecord: compareRecord,
  ordBoolean: ordBoolean,
  ordInt: ordInt,
  ordNumber: ordNumber,
  ordString: ordString,
  ordChar: ordChar,
  ordUnit: ordUnit,
  ordVoid: ordVoid,
  ordArray: ordArray,
  ordOrdering: ordOrdering,
  ord1Array: ord1Array,
  ordRecordNil: ordRecordNil,
  ordRecordCons: ordRecordCons,
  ordRecord: ordRecord
};
},{"./foreign.js":"../output/Data.Ord/foreign.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Bounded/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Bounded = function Bounded(Ord0, bottom, top) {
  this.Ord0 = Ord0;
  this.bottom = bottom;
  this.top = top;
};

var top = function top(dict) {
  return dict.top;
};

var boundedUnit = new Bounded(function () {
  return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
  return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function () {
  return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function () {
  return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
  return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
  return Data_Ord.ordBoolean;
}, false, true);

var bottom = function bottom(dict) {
  return dict.bottom;
};

module.exports = {
  Bounded: Bounded,
  bottom: bottom,
  top: top,
  boundedBoolean: boundedBoolean,
  boundedInt: boundedInt,
  boundedChar: boundedChar,
  boundedOrdering: boundedOrdering,
  boundedUnit: boundedUnit,
  boundedNumber: boundedNumber
};
},{"./foreign.js":"../output/Data.Bounded/foreign.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Functor.Invariant/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Invariant = function Invariant(imap) {
  this.imap = imap;
};

var invariantMultiplicative = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantEndo = new Invariant(function (ab) {
  return function (ba) {
    return function (v) {
      return function ($31) {
        return ab(v(ba($31)));
      };
    };
  };
});
var invariantDual = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantDisj = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantConj = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});
var invariantAdditive = new Invariant(function (f) {
  return function (v) {
    return function (v1) {
      return f(v1);
    };
  };
});

var imapF = function imapF(dictFunctor) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(f);
    };
  };
};

var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));

var imap = function imap(dict) {
  return dict.imap;
};

module.exports = {
  imap: imap,
  Invariant: Invariant,
  imapF: imapF,
  invariantFn: invariantFn,
  invariantArray: invariantArray,
  invariantAdditive: invariantAdditive,
  invariantConj: invariantConj,
  invariantDisj: invariantDisj,
  invariantDual: invariantDual,
  invariantEndo: invariantEndo,
  invariantMultiplicative: invariantMultiplicative
};
},{"../Data.Functor/index.js":"../output/Data.Functor/index.js"}],"../output/Data.EuclideanRing/foreign.js":[function(require,module,exports) {
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
}; // See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.


exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return (x % yy + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};
},{}],"../output/Data.CommutativeRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Ring = require("../Data.Ring/index.js");

var CommutativeRingRecord = function CommutativeRingRecord(RingRecord0) {
  this.RingRecord0 = RingRecord0;
};

var CommutativeRing = function CommutativeRing(Ring0) {
  this.Ring0 = Ring0;
};

var commutativeRingUnit = new CommutativeRing(function () {
  return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
  return Data_Ring.ringRecordNil;
});

var commutativeRingRecordCons = function commutativeRingRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictCommutativeRingRecord) {
      return function (dictCommutativeRing) {
        return new CommutativeRingRecord(function () {
          return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
        });
      };
    };
  };
};

var commutativeRingRecord = function commutativeRingRecord(dictRowToList) {
  return function (dictCommutativeRingRecord) {
    return new CommutativeRing(function () {
      return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
    });
  };
};

var commutativeRingNumber = new CommutativeRing(function () {
  return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
  return Data_Ring.ringInt;
});

var commutativeRingFn = function commutativeRingFn(dictCommutativeRing) {
  return new CommutativeRing(function () {
    return Data_Ring.ringFn(dictCommutativeRing.Ring0());
  });
};

module.exports = {
  CommutativeRing: CommutativeRing,
  CommutativeRingRecord: CommutativeRingRecord,
  commutativeRingInt: commutativeRingInt,
  commutativeRingNumber: commutativeRingNumber,
  commutativeRingUnit: commutativeRingUnit,
  commutativeRingFn: commutativeRingFn,
  commutativeRingRecord: commutativeRingRecord,
  commutativeRingRecordNil: commutativeRingRecordNil,
  commutativeRingRecordCons: commutativeRingRecordCons
};
},{"../Data.Ring/index.js":"../output/Data.Ring/index.js"}],"../output/Data.EuclideanRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var EuclideanRing = function EuclideanRing(CommutativeRing0, degree, div, mod) {
  this.CommutativeRing0 = CommutativeRing0;
  this.degree = degree;
  this.div = div;
  this.mod = mod;
};

var mod = function mod(dict) {
  return dict.mod;
};

var gcd = function gcd($copy_dictEq) {
  return function ($copy_dictEuclideanRing) {
    return function ($copy_a) {
      return function ($copy_b) {
        var $tco_var_dictEq = $copy_dictEq;
        var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
        var $tco_var_a = $copy_a;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(dictEq, dictEuclideanRing, a, b) {
          var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

          if ($7) {
            $tco_done = true;
            return a;
          }

          ;
          $tco_var_dictEq = dictEq;
          $tco_var_dictEuclideanRing = dictEuclideanRing;
          $tco_var_a = b;
          $copy_b = mod(dictEuclideanRing)(a)(b);
          return;
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
        }

        ;
        return $tco_result;
      };
    };
  };
};

var euclideanRingNumber = new EuclideanRing(function () {
  return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
  return 1;
}, $foreign.numDiv, function (v) {
  return function (v1) {
    return 0.0;
  };
});
var euclideanRingInt = new EuclideanRing(function () {
  return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);

var div = function div(dict) {
  return dict.div;
};

var lcm = function lcm(dictEq) {
  return function (dictEuclideanRing) {
    return function (a) {
      return function (b) {
        var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));

        if ($8) {
          return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
        }

        ;
        return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
      };
    };
  };
};

var degree = function degree(dict) {
  return dict.degree;
};

module.exports = {
  EuclideanRing: EuclideanRing,
  degree: degree,
  div: div,
  mod: mod,
  gcd: gcd,
  lcm: lcm,
  euclideanRingInt: euclideanRingInt,
  euclideanRingNumber: euclideanRingNumber
};
},{"./foreign.js":"../output/Data.EuclideanRing/foreign.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js"}],"../output/Data.Monoid/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var MonoidRecord = function MonoidRecord(SemigroupRecord0, memptyRecord) {
  this.SemigroupRecord0 = SemigroupRecord0;
  this.memptyRecord = memptyRecord;
};

var Monoid = function Monoid(Semigroup0, mempty) {
  this.Semigroup0 = Semigroup0;
  this.mempty = mempty;
};

var monoidUnit = new Monoid(function () {
  return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
  return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function () {
  return Data_Semigroup.semigroupRecordNil;
}, function (v) {
  return {};
});
var monoidOrdering = new Monoid(function () {
  return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function () {
  return Data_Semigroup.semigroupArray;
}, []);

var memptyRecord = function memptyRecord(dict) {
  return dict.memptyRecord;
};

var monoidRecord = function monoidRecord(dictRowToList) {
  return function (dictMonoidRecord) {
    return new Monoid(function () {
      return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
    }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
  };
};

var mempty = function mempty(dict) {
  return dict.mempty;
};

var monoidFn = function monoidFn(dictMonoid) {
  return new Monoid(function () {
    return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
  }, function (v) {
    return mempty(dictMonoid);
  });
};

var monoidRecordCons = function monoidRecordCons(dictIsSymbol) {
  return function (dictMonoid) {
    return function (dictCons) {
      return function (dictMonoidRecord) {
        return new MonoidRecord(function () {
          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
        }, function (v) {
          var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
          var insert = Record_Unsafe.unsafeSet(key);
          return insert(mempty(dictMonoid))(tail);
        });
      };
    };
  };
};

var power = function power(dictMonoid) {
  return function (x) {
    var go = function go(p) {
      if (p <= 0) {
        return mempty(dictMonoid);
      }

      ;

      if (p === 1) {
        return x;
      }

      ;

      if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
      }

      ;

      if (Data_Boolean.otherwise) {
        var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
        return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [p.constructor.name]);
    };

    return go;
  };
};

var guard = function guard(dictMonoid) {
  return function (v) {
    return function (v1) {
      if (v) {
        return v1;
      }

      ;

      if (!v) {
        return mempty(dictMonoid);
      }

      ;
      throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

module.exports = {
  Monoid: Monoid,
  mempty: mempty,
  power: power,
  guard: guard,
  MonoidRecord: MonoidRecord,
  memptyRecord: memptyRecord,
  monoidUnit: monoidUnit,
  monoidOrdering: monoidOrdering,
  monoidFn: monoidFn,
  monoidString: monoidString,
  monoidArray: monoidArray,
  monoidRecord: monoidRecord,
  monoidRecordNil: monoidRecordNil,
  monoidRecordCons: monoidRecordCons
};
},{"../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Maybe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Nothing = function () {
  function Nothing() {}

  ;
  Nothing.value = new Nothing();
  return Nothing;
}();

var Just = function () {
  function Just(value0) {
    this.value0 = value0;
  }

  ;

  Just.create = function (value0) {
    return new Just(value0);
  };

  return Just;
}();

var showMaybe = function showMaybe(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof Just) {
      return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
    }

    ;

    if (v instanceof Nothing) {
      return "Nothing";
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [v.constructor.name]);
  });
};

var semigroupMaybe = function semigroupMaybe(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      if (v instanceof Nothing) {
        return v1;
      }

      ;

      if (v1 instanceof Nothing) {
        return v;
      }

      ;

      if (v instanceof Just && v1 instanceof Just) {
        return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [v.constructor.name, v1.constructor.name]);
    };
  });
};

var optional = function optional(dictAlternative) {
  return function (a) {
    return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
  };
};

var monoidMaybe = function monoidMaybe(dictSemigroup) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMaybe(dictSemigroup);
  }, Nothing.value);
};

var maybe$prime = function maybe$prime(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v(Data_Unit.unit);
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var maybe = function maybe(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Nothing) {
        return v;
      }

      ;

      if (v2 instanceof Just) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof Just) {
      return new Just(v(v1.value0));
    }

    ;
    return Nothing.value;
  };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));

var fromMaybe$prime = function fromMaybe$prime(a) {
  return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromMaybe = function fromMaybe(a) {
  return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};

var fromJust = function fromJust(dictPartial) {
  return function (v) {
    if (v instanceof Just) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [v.constructor.name]);
  };
};

var extendMaybe = new Control_Extend.Extend(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Nothing) {
      return Nothing.value;
    }

    ;
    return new Just(v(v1));
  };
});

var eqMaybe = function eqMaybe(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      if (x instanceof Nothing && y instanceof Nothing) {
        return true;
      }

      ;

      if (x instanceof Just && y instanceof Just) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0);
      }

      ;
      return false;
    };
  });
};

var ordMaybe = function ordMaybe(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMaybe(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      if (x instanceof Nothing && y instanceof Nothing) {
        return Data_Ordering.EQ.value;
      }

      ;

      if (x instanceof Nothing) {
        return Data_Ordering.LT.value;
      }

      ;

      if (y instanceof Nothing) {
        return Data_Ordering.GT.value;
      }

      ;

      if (x instanceof Just && y instanceof Just) {
        return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [x.constructor.name, y.constructor.name]);
    };
  });
};

var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
  return eq1Maybe;
}, function (dictOrd) {
  return Data_Ord.compare(ordMaybe(dictOrd));
});

var boundedMaybe = function boundedMaybe(dictBounded) {
  return new Data_Bounded.Bounded(function () {
    return ordMaybe(dictBounded.Ord0());
  }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};

var applyMaybe = new Control_Apply.Apply(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Just) {
      return Data_Functor.map(functorMaybe)(v.value0)(v1);
    }

    ;

    if (v instanceof Nothing) {
      return Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindMaybe = new Control_Bind.Bind(function () {
  return applyMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Just) {
      return v1(v.value0);
    }

    ;

    if (v instanceof Nothing) {
      return Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
  };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
  return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
  return applicativeMaybe;
}, function () {
  return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
  return functorMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Nothing) {
      return v1;
    }

    ;
    return v;
  };
});
var plusMaybe = new Control_Plus.Plus(function () {
  return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
  return applicativeMaybe;
}, function () {
  return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
  return alternativeMaybe;
}, function () {
  return monadMaybe;
});
module.exports = {
  Nothing: Nothing,
  Just: Just,
  maybe: maybe,
  "maybe'": maybe$prime,
  fromMaybe: fromMaybe,
  "fromMaybe'": fromMaybe$prime,
  isJust: isJust,
  isNothing: isNothing,
  fromJust: fromJust,
  optional: optional,
  functorMaybe: functorMaybe,
  applyMaybe: applyMaybe,
  applicativeMaybe: applicativeMaybe,
  altMaybe: altMaybe,
  plusMaybe: plusMaybe,
  alternativeMaybe: alternativeMaybe,
  bindMaybe: bindMaybe,
  monadMaybe: monadMaybe,
  monadZeroMaybe: monadZeroMaybe,
  extendMaybe: extendMaybe,
  invariantMaybe: invariantMaybe,
  semigroupMaybe: semigroupMaybe,
  monoidMaybe: monoidMaybe,
  eqMaybe: eqMaybe,
  eq1Maybe: eq1Maybe,
  ordMaybe: ordMaybe,
  ord1Maybe: ord1Maybe,
  boundedMaybe: boundedMaybe,
  showMaybe: showMaybe
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"../output/Data.Functor.Invariant/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Effect.Aff/foreign.js":[function(require,module,exports) {
/* globals setImmediate, clearImmediate, setTimeout, clearTimeout */

/* jshint -W083, -W098, -W003 */
"use strict";

var Aff = function () {
  // A unique value for empty.
  var EMPTY = {};
  /*
   An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.
   data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)
   */

  var PURE = "Pure";
  var THROW = "Throw";
  var CATCH = "Catch";
  var SYNC = "Sync";
  var ASYNC = "Async";
  var BIND = "Bind";
  var BRACKET = "Bracket";
  var FORK = "Fork";
  var SEQ = "Sequential";
  /*
   data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)
   */

  var MAP = "Map";
  var APPLY = "Apply";
  var ALT = "Alt"; // Various constructors used in interpretation

  var CONS = "Cons"; // Cons-list, for stacks

  var RESUME = "Resume"; // Continue indiscriminately

  var RELEASE = "Release"; // Continue with bracket finalizers

  var FINALIZER = "Finalizer"; // A non-interruptible effect

  var FINALIZED = "Finalized"; // Marker for finalization

  var FORKED = "Forked"; // Reference to a forked fiber, with resumption stack

  var FIBER = "Fiber"; // Actual fiber reference

  var THUNK = "Thunk"; // Primed effect, ready to invoke

  function Aff(tag, _1, _2, _3) {
    this.tag = tag;
    this._1 = _1;
    this._2 = _2;
    this._3 = _3;
  }

  function AffCtr(tag) {
    var fn = function fn(_1, _2, _3) {
      return new Aff(tag, _1, _2, _3);
    };

    fn.tag = tag;
    return fn;
  }

  function nonCanceler(error) {
    return new Aff(PURE, void 0);
  }

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error) {
      return left(error);
    }
  }

  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error) {
      k(left(error))();
      return nonCanceler;
    }
  }

  var Scheduler = function () {
    var limit = 1024;
    var size = 0;
    var ix = 0;
    var queue = new Array(limit);
    var draining = false;

    function drain() {
      var thunk;
      draining = true;

      while (size !== 0) {
        size--;
        thunk = queue[ix];
        queue[ix] = void 0;
        ix = (ix + 1) % limit;
        thunk();
      }

      draining = false;
    }

    return {
      isDraining: function isDraining() {
        return draining;
      },
      enqueue: function enqueue(cb) {
        var i, tmp;

        if (size === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }

        queue[(ix + size) % limit] = cb;
        size++;

        if (!draining) {
          drain();
        }
      }
    };
  }();

  function Supervisor(util) {
    var fibers = {};
    var fiberId = 0;
    var count = 0;
    return {
      register: function register(fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function handler(result) {
            return function () {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function isEmpty() {
        return count === 0;
      },
      killAll: function killAll(killError, cb) {
        return function () {
          if (count === 0) {
            return cb();
          }

          var killCount = 0;
          var kills = {};

          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function (result) {
              return function () {
                delete kills[fid];
                killCount--;

                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function () {
                    throw util.fromLeft(result);
                  }, 0);
                }

                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }

          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }

          fibers = {};
          fiberId = 0;
          count = 0;
          return function (error) {
            return new Aff(SYNC, function () {
              for (var k in kills) {
                if (kills.hasOwnProperty(k)) {
                  kills[k]();
                }
              }
            });
          };
        };
      }
    };
  } // Fiber state machine


  var SUSPENDED = 0; // Suspended, pending a join.

  var CONTINUE = 1; // Interpret the next instruction.

  var STEP_BIND = 2; // Apply the next bind.

  var STEP_RESULT = 3; // Handle potential failure from a result.

  var PENDING = 4; // An async effect is running.

  var RETURN = 5; // The current stack has returned.

  var COMPLETED = 6; // The entire fiber has completed.

  function Fiber(util, supervisor, aff) {
    // Monotonically increasing tick, increased on each asynchronous turn.
    var runTick = 0; // The current branch of the state machine.

    var status = SUSPENDED; // The current point of interest for the state machine branch.

    var step = aff; // Successful step

    var fail = null; // Failure step

    var interrupt = null; // Asynchronous interrupt
    // Stack of continuations for the current fiber.

    var bhead = null;
    var btail = null; // Stack of attempts and finalizers for error recovery. Every `Cons` is also
    // tagged with current `interrupt` state. We use this to track which items
    // should be ignored or evaluated as a result of a kill.

    var attempts = null; // A special state is needed for Bracket, because it cannot be killed. When
    // we enter a bracket acquisition or finalizer, we increment the counter,
    // and then decrement once complete.

    var bracketCount = 0; // Each join gets a new id so they can be revoked.

    var joinId = 0;
    var joins = null;
    var rethrow = true; // Each invocation of `run` requires a tick. When an asynchronous effect is
    // resolved, we must check that the local tick coincides with the fiber
    // tick before resuming. This prevents multiple async continuations from
    // accidentally resuming the same fiber. A common example may be invoking
    // the provided callback in `makeAff` more than once, but it may also be an
    // async effect resuming after the fiber was already cancelled.

    function _run(localRunTick) {
      var tmp, result, attempt;

      while (true) {
        tmp = null;
        result = null;
        attempt = null;

        switch (status) {
          case STEP_BIND:
            status = CONTINUE;

            try {
              step = bhead(step);

              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail = util.left(e);
              step = null;
            }

            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail = step;
              step = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step = util.fromRight(step);
            }

            break;

          case CONTINUE:
            switch (step.tag) {
              case BIND:
                if (bhead) {
                  btail = new Aff(CONS, bhead, btail);
                }

                bhead = step._2;
                status = CONTINUE;
                step = step._1;
                break;

              case PURE:
                if (bhead === null) {
                  status = RETURN;
                  step = util.right(step._1);
                } else {
                  status = STEP_BIND;
                  step = step._1;
                }

                break;

              case SYNC:
                status = STEP_RESULT;
                step = runSync(util.left, util.right, step._1);
                break;

              case ASYNC:
                status = PENDING;
                step = runAsync(util.left, step._1, function (result) {
                  return function () {
                    if (runTick !== localRunTick) {
                      return;
                    }

                    runTick++;
                    Scheduler.enqueue(function () {
                      // It's possible to interrupt the fiber between enqueuing and
                      // resuming, so we need to check that the runTick is still
                      // valid.
                      if (runTick !== localRunTick + 1) {
                        return;
                      }

                      status = STEP_RESULT;
                      step = result;

                      _run(runTick);
                    });
                  };
                });
                return;

              case THROW:
                status = RETURN;
                fail = util.left(step._1);
                step = null;
                break;
              // Enqueue the Catch so that we can call the error handler later on
              // in case of an exception.

              case CATCH:
                if (bhead === null) {
                  attempts = new Aff(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }

                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;
              // Enqueue the Bracket so that we can call the appropriate handlers
              // after resource acquisition.

              case BRACKET:
                bracketCount++;

                if (bhead === null) {
                  attempts = new Aff(CONS, step, attempts, interrupt);
                } else {
                  attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }

                bhead = null;
                btail = null;
                status = CONTINUE;
                step = step._1;
                break;

              case FORK:
                status = STEP_RESULT;
                tmp = Fiber(util, supervisor, step._2);

                if (supervisor) {
                  supervisor.register(tmp);
                }

                if (step._1) {
                  tmp.run();
                }

                step = util.right(tmp);
                break;

              case SEQ:
                status = CONTINUE;
                step = sequential(util, supervisor, step._1);
                break;
            }

            break;

          case RETURN:
            bhead = null;
            btail = null; // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.

            if (attempts === null) {
              status = COMPLETED;
              step = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp = attempts._3;
              attempt = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
                // We cannot recover from an unmasked interrupt. Otherwise we should
                // continue stepping, or run the exception handler if an exception
                // was raised.
                case CATCH:
                  // We should compare the interrupt status as well because we
                  // only want it to apply if there has been an interrupt since
                  // enqueuing the catch.
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    status = RETURN;
                  } else if (fail) {
                    status = CONTINUE;
                    step = attempt._2(util.fromLeft(fail));
                    fail = null;
                  }

                  break;
                // We cannot resume from an unmasked interrupt or exception.

                case RESUME:
                  // As with Catch, we only want to ignore in the case of an
                  // interrupt since enqueing the item.
                  if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                    status = RETURN;
                  } else {
                    bhead = attempt._1;
                    btail = attempt._2;
                    status = STEP_BIND;
                    step = util.fromRight(step);
                  }

                  break;
                // If we have a bracket, we should enqueue the handlers,
                // and continue with the success branch only if the fiber has
                // not been interrupted. If the bracket acquisition failed, we
                // should not run either.

                case BRACKET:
                  bracketCount--;

                  if (fail === null) {
                    result = util.fromRight(step); // We need to enqueue the Release with the same interrupt
                    // status as the Bracket that is initiating it.

                    attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp); // We should only coninue as long as the interrupt status has not changed or
                    // we are currently within a non-interruptable finalizer.

                    if (interrupt === tmp || bracketCount > 0) {
                      status = CONTINUE;
                      step = attempt._3(result);
                    }
                  }

                  break;
                // Enqueue the appropriate handler. We increase the bracket count
                // because it should not be cancelled.

                case RELEASE:
                  attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                  status = CONTINUE; // It has only been killed if the interrupt status has changed
                  // since we enqueued the item, and the bracket count is 0. If the
                  // bracket count is non-zero then we are in a masked state so it's
                  // impossible to be killed.

                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                  } else if (fail) {
                    step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                  } else {
                    step = attempt._1.completed(util.fromRight(step))(attempt._2);
                  }

                  fail = null;
                  bracketCount++;
                  break;

                case FINALIZER:
                  bracketCount++;
                  attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                  status = CONTINUE;
                  step = attempt._1;
                  break;

                case FINALIZED:
                  bracketCount--;
                  status = RETURN;
                  step = attempt._1;
                  fail = attempt._2;
                  break;
              }
            }

            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }

            joins = null; // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.

            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0); // If we have an unhandled exception, and no other fiber has joined
              // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }

            return;

          case SUSPENDED:
            status = CONTINUE;
            break;

          case PENDING:
            return;
        }
      }
    }

    function onComplete(join) {
      return function () {
        if (status === COMPLETED) {
          rethrow = rethrow && join.rethrow;
          join.handler(step)();
          return function () {};
        }

        var jid = joinId++;
        joins = joins || {};
        joins[jid] = join;
        return function () {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }

    function kill(error, cb) {
      return function () {
        if (status === COMPLETED) {
          cb(util.right(void 0))();
          return function () {};
        }

        var canceler = onComplete({
          rethrow: false,
          handler: function handler()
          /* unused */
          {
            return cb(util.right(void 0));
          }
        })();

        switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status = COMPLETED;
            step = interrupt;

            _run(runTick);

            break;

          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }

            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }

              status = RETURN;
              step = null;
              fail = null;

              _run(++runTick);
            }

            break;

          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }

            if (bracketCount === 0) {
              status = RETURN;
              step = null;
              fail = null;
            }

        }

        return canceler;
      };
    }

    function join(cb) {
      return function () {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();

        if (status === SUSPENDED) {
          _run(runTick);
        }

        return canceler;
      };
    }

    return {
      kill: kill,
      join: join,
      onComplete: onComplete,
      isSuspended: function isSuspended() {
        return status === SUSPENDED;
      },
      run: function run() {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function () {
              _run(runTick);
            });
          } else {
            _run(runTick);
          }
        }
      }
    };
  }

  function runPar(util, supervisor, par, cb) {
    // Table of all forked fibers.
    var fiberId = 0;
    var fibers = {}; // Table of currently running cancelers, as a product of `Alt` behavior.

    var killId = 0;
    var kills = {}; // Error used for early cancelation on Alt branches.

    var early = new Error("[ParAff] Early exit"); // Error used to kill the entire tree.

    var interrupt = null; // The root pointer of the tree.

    var root = EMPTY; // Walks a tree, invoking all the cancelers. Returns the table of pending
    // cancellation fibers.

    function kill(error, par, cb) {
      var step = par;
      var head = null;
      var tail = null;
      var count = 0;
      var kills = {};
      var tmp, kid;

      loop: while (true) {
        tmp = null;

        switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;

                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            } // Terminal case.


            if (head === null) {
              break loop;
            } // Go down the right side of the tree.


            step = head._2;

            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }

            break;

          case MAP:
            step = step._2;
            break;

          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }

            head = step;
            step = step._1;
            break;
        }
      }

      if (count === 0) {
        cb(util.right(void 0))();
      } else {
        // Run the cancelation effects. We alias `count` because it's mutable.
        kid = 0;
        tmp = count;

        for (; kid < tmp; kid++) {
          kills[kid] = kills[kid]();
        }
      }

      return kills;
    } // When a fiber resolves, we need to bubble back up the tree with the
    // result, computing the applicative nodes.


    function join(result, head, tail) {
      var fail, step, lhs, rhs, tmp, kid;

      if (util.isLeft(result)) {
        fail = result;
        step = null;
      } else {
        step = result;
        fail = null;
      }

      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null; // We should never continue if the entire tree has been interrupted.

        if (interrupt !== null) {
          return;
        } // We've made it all the way to the root of the tree, which means
        // the tree has fully evaluated.


        if (head === null) {
          cb(fail || step)();
          return;
        } // The tree has already been computed, so we shouldn't try to do it
        // again. This should never happen.
        // TODO: Remove this?


        if (head._3 !== EMPTY) {
          return;
        }

        switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step = head._3;
            } else {
              head._3 = fail;
            }

            break;

          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3; // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.

            if (fail) {
              head._3 = fail;
              tmp = true;
              kid = killId++;
              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function ()
              /* unused */
              {
                return function () {
                  delete kills[kid];

                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }

            break;

          case ALT:
            lhs = head._1._3;
            rhs = head._2._3; // We can only proceed if both have resolved or we have a success

            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            } // If both sides resolve with an error, we should continue with the
            // first error


            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail = step === lhs ? rhs : lhs;
              step = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp = true;
              kid = killId++; // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.

              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function ()
              /* unused */
              {
                return function () {
                  delete kills[kid];

                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }

            break;
        }

        if (tail === null) {
          head = null;
        } else {
          head = tail._1;
          tail = tail._2;
        }
      }
    }

    function resolve(fiber) {
      return function (result) {
        return function () {
          delete fibers[fiber._1];
          fiber._3 = result;
          join(result, fiber._2._1, fiber._2._2);
        };
      };
    } // Walks the applicative tree, substituting non-applicative nodes with
    // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
    // as a mutable slot for memoization. In an unresolved state, the `_3`
    // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
    // the left side first, because both operations are left-associative. As
    // we `RETURN` from those branches, we then walk the right side.


    function run() {
      var status = CONTINUE;
      var step = par;
      var head = null;
      var tail = null;
      var tmp, fid;

      loop: while (true) {
        tmp = null;
        fid = null;

        switch (status) {
          case CONTINUE:
            switch (step.tag) {
              case MAP:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(MAP, step._1, EMPTY, EMPTY);
                step = step._2;
                break;

              case APPLY:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(APPLY, EMPTY, step._2, EMPTY);
                step = step._1;
                break;

              case ALT:
                if (head) {
                  tail = new Aff(CONS, head, tail);
                }

                head = new Aff(ALT, EMPTY, step._2, EMPTY);
                step = step._1;
                break;

              default:
                // When we hit a leaf value, we suspend the stack in the `FORKED`.
                // When the fiber resolves, it can bubble back up the tree.
                fid = fiberId++;
                status = RETURN;
                tmp = step;
                step = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
                tmp = Fiber(util, supervisor, tmp);
                tmp.onComplete({
                  rethrow: false,
                  handler: resolve(step)
                })();
                fibers[fid] = tmp;

                if (supervisor) {
                  supervisor.register(tmp);
                }

            }

            break;

          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            } // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.


            if (head._1 === EMPTY) {
              head._1 = step;
              status = CONTINUE;
              step = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step = head;

              if (tail === null) {
                head = null;
              } else {
                head = tail._1;
                tail = tail._2;
              }
            }

        }
      } // Keep a reference to the tree root so it can be cancelled.


      root = step;

      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    } // Cancels the entire tree. If there are already subtrees being canceled,
    // we need to first cancel those joins. We will then add fresh joins for
    // all pending branches including those that were in the process of being
    // canceled.


    function cancel(error, cb) {
      interrupt = util.left(error);
      var innerKills;

      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];

          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }

      kills = null;
      var newKills = kill(error, root, cb);
      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            for (var kid in newKills) {
              if (newKills.hasOwnProperty(kid)) {
                newKills[kid]();
              }
            }

            return nonCanceler;
          };
        });
      };
    }

    run();
    return function (killError) {
      return new Aff(ASYNC, function (killCb) {
        return function () {
          return cancel(killError, killCb);
        };
      });
    };
  }

  function sequential(util, supervisor, par) {
    return new Aff(ASYNC, function (cb) {
      return function () {
        return runPar(util, supervisor, par, cb);
      };
    });
  }

  Aff.EMPTY = EMPTY;
  Aff.Pure = AffCtr(PURE);
  Aff.Throw = AffCtr(THROW);
  Aff.Catch = AffCtr(CATCH);
  Aff.Sync = AffCtr(SYNC);
  Aff.Async = AffCtr(ASYNC);
  Aff.Bind = AffCtr(BIND);
  Aff.Bracket = AffCtr(BRACKET);
  Aff.Fork = AffCtr(FORK);
  Aff.Seq = AffCtr(SEQ);
  Aff.ParMap = AffCtr(MAP);
  Aff.ParApply = AffCtr(APPLY);
  Aff.ParAlt = AffCtr(ALT);
  Aff.Fiber = Fiber;
  Aff.Supervisor = Supervisor;
  Aff.Scheduler = Scheduler;
  Aff.nonCanceler = nonCanceler;
  return Aff;
}();

exports._pure = Aff.Pure;
exports._throwError = Aff.Throw;

exports._catchError = function (aff) {
  return function (k) {
    return Aff.Catch(aff, k);
  };
};

exports._map = function (f) {
  return function (aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function (value) {
        return Aff.Pure(f(value));
      });
    }
  };
};

exports._bind = function (aff) {
  return function (k) {
    return Aff.Bind(aff, k);
  };
};

exports._fork = function (immediate) {
  return function (aff) {
    return Aff.Fork(immediate, aff);
  };
};

exports._liftEffect = Aff.Sync;

exports._parAffMap = function (f) {
  return function (aff) {
    return Aff.ParMap(f, aff);
  };
};

exports._parAffApply = function (aff1) {
  return function (aff2) {
    return Aff.ParApply(aff1, aff2);
  };
};

exports._parAffAlt = function (aff1) {
  return function (aff2) {
    return Aff.ParAlt(aff1, aff2);
  };
};

exports.makeAff = Aff.Async;

exports.generalBracket = function (acquire) {
  return function (options) {
    return function (k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
};

exports._makeFiber = function (util, aff) {
  return function () {
    return Aff.Fiber(util, null, aff);
  };
};

exports._makeSupervisedFiber = function (util, aff) {
  return function () {
    var supervisor = Aff.Supervisor(util);
    return {
      fiber: Aff.Fiber(util, supervisor, aff),
      supervisor: supervisor
    };
  };
};

exports._killAll = function (error, supervisor, cb) {
  return supervisor.killAll(error, cb);
};

exports._delay = function () {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }

  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }

  return function (right, ms) {
    return Aff.Async(function (cb) {
      return function () {
        var timer = setDelay(ms, cb(right()));
        return function () {
          return Aff.Sync(function () {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();

exports._sequential = Aff.Seq;
},{}],"../output/Control.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Unit = require("../Data.Unit/index.js");

var Lazy = function Lazy(defer) {
  this.defer = defer;
};

var lazyUnit = new Lazy(function (v) {
  return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
  return function (x) {
    return f(Data_Unit.unit)(x);
  };
});

var defer = function defer(dict) {
  return dict.defer;
};

var fix = function fix(dictLazy) {
  return function (f) {
    var go = defer(dictLazy)(function (v) {
      return f(go);
    });
    return go;
  };
};

module.exports = {
  defer: defer,
  Lazy: Lazy,
  fix: fix,
  lazyFn: lazyFn,
  lazyUnit: lazyUnit
};
},{"../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Foldable/foreign.js":[function(require,module,exports) {
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;

      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }

      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;

      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }

      return acc;
    };
  };
};
},{}],"../output/Data.HeytingAlgebra/foreign.js":[function(require,module,exports) {
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};
},{}],"../output/Data.HeytingAlgebra/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_Row = require("../Type.Data.Row/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var HeytingAlgebraRecord = function HeytingAlgebraRecord(conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
  this.conjRecord = conjRecord;
  this.disjRecord = disjRecord;
  this.ffRecord = ffRecord;
  this.impliesRecord = impliesRecord;
  this.notRecord = notRecord;
  this.ttRecord = ttRecord;
};

var HeytingAlgebra = function HeytingAlgebra(conj, disj, ff, implies, not, tt) {
  this.conj = conj;
  this.disj = disj;
  this.ff = ff;
  this.implies = implies;
  this.not = not;
  this.tt = tt;
};

var ttRecord = function ttRecord(dict) {
  return dict.ttRecord;
};

var tt = function tt(dict) {
  return dict.tt;
};

var notRecord = function notRecord(dict) {
  return dict.notRecord;
};

var not = function not(dict) {
  return dict.not;
};

var impliesRecord = function impliesRecord(dict) {
  return dict.impliesRecord;
};

var implies = function implies(dict) {
  return dict.implies;
};

var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, Data_Unit.unit, function (v) {
  return function (v1) {
    return Data_Unit.unit;
  };
}, function (v) {
  return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return {};
    };
  };
}, function (v) {
  return function (v1) {
    return {};
  };
}, function (v) {
  return function (v1) {
    return {};
  };
});

var ffRecord = function ffRecord(dict) {
  return dict.ffRecord;
};

var ff = function ff(dict) {
  return dict.ff;
};

var disjRecord = function disjRecord(dict) {
  return dict.disjRecord;
};

var disj = function disj(dict) {
  return dict.disj;
};

var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
  return function (b) {
    return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
  };
}, $foreign.boolNot, true);

var conjRecord = function conjRecord(dict) {
  return dict.conjRecord;
};

var heytingAlgebraRecord = function heytingAlgebraRecord(dictRowToList) {
  return function (dictHeytingAlgebraRecord) {
    return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
  };
};

var conj = function conj(dict) {
  return dict.conj;
};

var heytingAlgebraFunction = function heytingAlgebraFunction(dictHeytingAlgebra) {
  return new HeytingAlgebra(function (f) {
    return function (g) {
      return function (a) {
        return conj(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (f) {
    return function (g) {
      return function (a) {
        return disj(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (v) {
    return ff(dictHeytingAlgebra);
  }, function (f) {
    return function (g) {
      return function (a) {
        return implies(dictHeytingAlgebra)(f(a))(g(a));
      };
    };
  }, function (f) {
    return function (a) {
      return not(dictHeytingAlgebra)(f(a));
    };
  }, function (v) {
    return tt(dictHeytingAlgebra);
  });
};

var heytingAlgebraRecordCons = function heytingAlgebraRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictHeytingAlgebraRecord) {
      return function (dictHeytingAlgebra) {
        return new HeytingAlgebraRecord(function (v) {
          return function (ra) {
            return function (rb) {
              var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (row) {
            var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(ff(dictHeytingAlgebra))(tail);
          };
        }, function (v) {
          return function (ra) {
            return function (rb) {
              var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var insert = Record_Unsafe.unsafeSet(key);
              var get = Record_Unsafe.unsafeGet(key);
              return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
            };
          };
        }, function (v) {
          return function (row) {
            var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            var get = Record_Unsafe.unsafeGet(key);
            return insert(not(dictHeytingAlgebra)(get(row)))(tail);
          };
        }, function (v) {
          return function (row) {
            var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var insert = Record_Unsafe.unsafeSet(key);
            return insert(tt(dictHeytingAlgebra))(tail);
          };
        });
      };
    };
  };
};

module.exports = {
  HeytingAlgebra: HeytingAlgebra,
  tt: tt,
  ff: ff,
  implies: implies,
  conj: conj,
  disj: disj,
  not: not,
  HeytingAlgebraRecord: HeytingAlgebraRecord,
  ffRecord: ffRecord,
  ttRecord: ttRecord,
  impliesRecord: impliesRecord,
  conjRecord: conjRecord,
  disjRecord: disjRecord,
  notRecord: notRecord,
  heytingAlgebraBoolean: heytingAlgebraBoolean,
  heytingAlgebraUnit: heytingAlgebraUnit,
  heytingAlgebraFunction: heytingAlgebraFunction,
  heytingAlgebraRecord: heytingAlgebraRecord,
  heytingAlgebraRecordNil: heytingAlgebraRecordNil,
  heytingAlgebraRecordCons: heytingAlgebraRecordCons
};
},{"./foreign.js":"../output/Data.HeytingAlgebra/foreign.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.Row/index.js":"../output/Type.Data.Row/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Data.Monoid.Conj/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Conj = function Conj(x) {
  return x;
};

var showConj = function showConj(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringConj = function semiringConj(dictHeytingAlgebra) {
  return new Data_Semiring.Semiring(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  }, function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};

var semigroupConj = function semigroupConj(dictHeytingAlgebra) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  });
};

var ordConj = function ordConj(dictOrd) {
  return dictOrd;
};

var monoidConj = function monoidConj(dictHeytingAlgebra) {
  return new Data_Monoid.Monoid(function () {
    return semigroupConj(dictHeytingAlgebra);
  }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};

var functorConj = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqConj = function eqConj(dictEq) {
  return dictEq;
};

var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function () {
  return eq1Conj;
}, function (dictOrd) {
  return Data_Ord.compare(ordConj(dictOrd));
});

var boundedConj = function boundedConj(dictBounded) {
  return dictBounded;
};

var applyConj = new Control_Apply.Apply(function () {
  return functorConj;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindConj = new Control_Bind.Bind(function () {
  return applyConj;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
  return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
  return applicativeConj;
}, function () {
  return bindConj;
});
module.exports = {
  Conj: Conj,
  eqConj: eqConj,
  eq1Conj: eq1Conj,
  ordConj: ordConj,
  ord1Conj: ord1Conj,
  boundedConj: boundedConj,
  showConj: showConj,
  functorConj: functorConj,
  applyConj: applyConj,
  applicativeConj: applicativeConj,
  bindConj: bindConj,
  monadConj: monadConj,
  semigroupConj: semigroupConj,
  monoidConj: monoidConj,
  semiringConj: semiringConj
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Monoid.Disj/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Disj = function Disj(x) {
  return x;
};

var showDisj = function showDisj(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringDisj = function semiringDisj(dictHeytingAlgebra) {
  return new Data_Semiring.Semiring(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  }, function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
    };
  }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};

var semigroupDisj = function semigroupDisj(dictHeytingAlgebra) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
    };
  });
};

var ordDisj = function ordDisj(dictOrd) {
  return dictOrd;
};

var monoidDisj = function monoidDisj(dictHeytingAlgebra) {
  return new Data_Monoid.Monoid(function () {
    return semigroupDisj(dictHeytingAlgebra);
  }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};

var functorDisj = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqDisj = function eqDisj(dictEq) {
  return dictEq;
};

var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function () {
  return eq1Disj;
}, function (dictOrd) {
  return Data_Ord.compare(ordDisj(dictOrd));
});

var boundedDisj = function boundedDisj(dictBounded) {
  return dictBounded;
};

var applyDisj = new Control_Apply.Apply(function () {
  return functorDisj;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindDisj = new Control_Bind.Bind(function () {
  return applyDisj;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
  return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
  return applicativeDisj;
}, function () {
  return bindDisj;
});
module.exports = {
  Disj: Disj,
  eqDisj: eqDisj,
  eq1Disj: eq1Disj,
  ordDisj: ordDisj,
  ord1Disj: ord1Disj,
  boundedDisj: boundedDisj,
  showDisj: showDisj,
  functorDisj: functorDisj,
  applyDisj: applyDisj,
  applicativeDisj: applicativeDisj,
  bindDisj: bindDisj,
  monadDisj: monadDisj,
  semigroupDisj: semigroupDisj,
  monoidDisj: monoidDisj,
  semiringDisj: semiringDisj
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Monoid.Dual/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Dual = function Dual(x) {
  return x;
};

var showDual = function showDual(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupDual = function semigroupDual(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semigroup.append(dictSemigroup)(v1)(v);
    };
  });
};

var ordDual = function ordDual(dictOrd) {
  return dictOrd;
};

var monoidDual = function monoidDual(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupDual(dictMonoid.Semigroup0());
  }, Data_Monoid.mempty(dictMonoid));
};

var functorDual = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqDual = function eqDual(dictEq) {
  return dictEq;
};

var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function () {
  return eq1Dual;
}, function (dictOrd) {
  return Data_Ord.compare(ordDual(dictOrd));
});

var boundedDual = function boundedDual(dictBounded) {
  return dictBounded;
};

var applyDual = new Control_Apply.Apply(function () {
  return functorDual;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindDual = new Control_Bind.Bind(function () {
  return applyDual;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
  return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
  return applicativeDual;
}, function () {
  return bindDual;
});
module.exports = {
  Dual: Dual,
  eqDual: eqDual,
  eq1Dual: eq1Dual,
  ordDual: ordDual,
  ord1Dual: ord1Dual,
  boundedDual: boundedDual,
  showDual: showDual,
  functorDual: functorDual,
  applyDual: applyDual,
  applicativeDual: applicativeDual,
  bindDual: bindDual,
  monadDual: monadDual,
  semigroupDual: semigroupDual,
  monoidDual: monoidDual
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Monoid.Endo/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Endo = function Endo(x) {
  return x;
};

var showEndo = function showEndo(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupEndo = function semigroupEndo(dictSemigroupoid) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
    };
  });
};

var ordEndo = function ordEndo(dictOrd) {
  return dictOrd;
};

var monoidEndo = function monoidEndo(dictCategory) {
  return new Data_Monoid.Monoid(function () {
    return semigroupEndo(dictCategory.Semigroupoid0());
  }, Control_Category.identity(dictCategory));
};

var eqEndo = function eqEndo(dictEq) {
  return dictEq;
};

var boundedEndo = function boundedEndo(dictBounded) {
  return dictBounded;
};

module.exports = {
  Endo: Endo,
  eqEndo: eqEndo,
  ordEndo: ordEndo,
  boundedEndo: boundedEndo,
  showEndo: showEndo,
  semigroupEndo: semigroupEndo,
  monoidEndo: monoidEndo
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Monoid.Additive/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Additive = function Additive(x) {
  return x;
};

var showAdditive = function showAdditive(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupAdditive = function semigroupAdditive(dictSemiring) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semiring.add(dictSemiring)(v)(v1);
    };
  });
};

var ordAdditive = function ordAdditive(dictOrd) {
  return dictOrd;
};

var monoidAdditive = function monoidAdditive(dictSemiring) {
  return new Data_Monoid.Monoid(function () {
    return semigroupAdditive(dictSemiring);
  }, Data_Semiring.zero(dictSemiring));
};

var functorAdditive = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqAdditive = function eqAdditive(dictEq) {
  return dictEq;
};

var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function () {
  return eq1Additive;
}, function (dictOrd) {
  return Data_Ord.compare(ordAdditive(dictOrd));
});

var boundedAdditive = function boundedAdditive(dictBounded) {
  return dictBounded;
};

var applyAdditive = new Control_Apply.Apply(function () {
  return functorAdditive;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindAdditive = new Control_Bind.Bind(function () {
  return applyAdditive;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
  return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
  return applicativeAdditive;
}, function () {
  return bindAdditive;
});
module.exports = {
  Additive: Additive,
  eqAdditive: eqAdditive,
  eq1Additive: eq1Additive,
  ordAdditive: ordAdditive,
  ord1Additive: ord1Additive,
  boundedAdditive: boundedAdditive,
  showAdditive: showAdditive,
  functorAdditive: functorAdditive,
  applyAdditive: applyAdditive,
  applicativeAdditive: applicativeAdditive,
  bindAdditive: bindAdditive,
  monadAdditive: monadAdditive,
  semigroupAdditive: semigroupAdditive,
  monoidAdditive: monoidAdditive
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Monoid.Multiplicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Multiplicative = function Multiplicative(x) {
  return x;
};

var showMultiplicative = function showMultiplicative(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMultiplicative = function semigroupMultiplicative(dictSemiring) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Semiring.mul(dictSemiring)(v)(v1);
    };
  });
};

var ordMultiplicative = function ordMultiplicative(dictOrd) {
  return dictOrd;
};

var monoidMultiplicative = function monoidMultiplicative(dictSemiring) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMultiplicative(dictSemiring);
  }, Data_Semiring.one(dictSemiring));
};

var functorMultiplicative = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqMultiplicative = function eqMultiplicative(dictEq) {
  return dictEq;
};

var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function () {
  return eq1Multiplicative;
}, function (dictOrd) {
  return Data_Ord.compare(ordMultiplicative(dictOrd));
});

var boundedMultiplicative = function boundedMultiplicative(dictBounded) {
  return dictBounded;
};

var applyMultiplicative = new Control_Apply.Apply(function () {
  return functorMultiplicative;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
  return applyMultiplicative;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
  return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
  return applicativeMultiplicative;
}, function () {
  return bindMultiplicative;
});
module.exports = {
  Multiplicative: Multiplicative,
  eqMultiplicative: eqMultiplicative,
  eq1Multiplicative: eq1Multiplicative,
  ordMultiplicative: ordMultiplicative,
  ord1Multiplicative: ord1Multiplicative,
  boundedMultiplicative: boundedMultiplicative,
  showMultiplicative: showMultiplicative,
  functorMultiplicative: functorMultiplicative,
  applyMultiplicative: applyMultiplicative,
  applicativeMultiplicative: applicativeMultiplicative,
  bindMultiplicative: bindMultiplicative,
  monadMultiplicative: monadMultiplicative,
  semigroupMultiplicative: semigroupMultiplicative,
  monoidMultiplicative: monoidMultiplicative
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Semigroup.First/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var First = function First(x) {
  return x;
};

var showFirst = function showFirst(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(First " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
  return function (v) {
    return x;
  };
});

var ordFirst = function ordFirst(dictOrd) {
  return dictOrd;
};

var functorFirst = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqFirst = function eqFirst(dictEq) {
  return dictEq;
};

var eq1First = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function () {
  return eq1First;
}, function (dictOrd) {
  return Data_Ord.compare(ordFirst(dictOrd));
});

var boundedFirst = function boundedFirst(dictBounded) {
  return dictBounded;
};

var applyFirst = new Control_Apply.Apply(function () {
  return functorFirst;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindFirst = new Control_Bind.Bind(function () {
  return applyFirst;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeFirst = new Control_Applicative.Applicative(function () {
  return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function () {
  return applicativeFirst;
}, function () {
  return bindFirst;
});
module.exports = {
  First: First,
  eqFirst: eqFirst,
  eq1First: eq1First,
  ordFirst: ordFirst,
  ord1First: ord1First,
  boundedFirst: boundedFirst,
  showFirst: showFirst,
  functorFirst: functorFirst,
  applyFirst: applyFirst,
  applicativeFirst: applicativeFirst,
  bindFirst: bindFirst,
  monadFirst: monadFirst,
  semigroupFirst: semigroupFirst
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Semigroup.Last/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Last = function Last(x) {
  return x;
};

var showLast = function showLast(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Last " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
  return function (x) {
    return x;
  };
});

var ordLast = function ordLast(dictOrd) {
  return dictOrd;
};

var functorLast = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});

var eqLast = function eqLast(dictEq) {
  return dictEq;
};

var eq1Last = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function () {
  return eq1Last;
}, function (dictOrd) {
  return Data_Ord.compare(ordLast(dictOrd));
});

var boundedLast = function boundedLast(dictBounded) {
  return dictBounded;
};

var applyLast = new Control_Apply.Apply(function () {
  return functorLast;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindLast = new Control_Bind.Bind(function () {
  return applyLast;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeLast = new Control_Applicative.Applicative(function () {
  return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function () {
  return applicativeLast;
}, function () {
  return bindLast;
});
module.exports = {
  Last: Last,
  eqLast: eqLast,
  eq1Last: eq1Last,
  ordLast: ordLast,
  ord1Last: ord1Last,
  boundedLast: boundedLast,
  showLast: showLast,
  functorLast: functorLast,
  applyLast: applyLast,
  applicativeLast: applicativeLast,
  bindLast: bindLast,
  monadLast: monadLast,
  semigroupLast: semigroupLast
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Newtype/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");

var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");

var Newtype = function Newtype(unwrap, wrap) {
  this.unwrap = unwrap;
  this.wrap = wrap;
};

var wrap = function wrap(dict) {
  return dict.wrap;
};

var unwrap = function unwrap(dict) {
  return dict.unwrap;
};

var underF2 = function underF2(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $66 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1)));
            var $67 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)));
            return function ($68) {
              return $66($67($68));
            };
          };
        };
      };
    };
  };
};

var underF = function underF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $69 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
            var $70 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
            return function ($71) {
              return $69(f($70($71)));
            };
          };
        };
      };
    };
  };
};

var under2 = function under2(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $72 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(unwrap(dictNewtype1));
        var $73 = Data_Function.on(f)(wrap(dictNewtype));
        return function ($74) {
          return $72($73($74));
        };
      };
    };
  };
};

var under = function under(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $75 = unwrap(dictNewtype1);
        var $76 = wrap(dictNewtype);
        return function ($77) {
          return $75(f($76($77)));
        };
      };
    };
  };
};

var un = function un(dictNewtype) {
  return function (v) {
    return unwrap(dictNewtype);
  };
};

var traverse = function traverse(dictFunctor) {
  return function (dictNewtype) {
    return function (v) {
      return function (f) {
        var $78 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
        var $79 = unwrap(dictNewtype);
        return function ($80) {
          return $78(f($79($80)));
        };
      };
    };
  };
};

var overF2 = function overF2(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $81 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(wrap(dictNewtype1)));
            var $82 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)));
            return function ($83) {
              return $81($82($83));
            };
          };
        };
      };
    };
  };
};

var overF = function overF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $84 = Data_Functor.map(dictFunctor1)(wrap(dictNewtype1));
            var $85 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
            return function ($86) {
              return $84(f($85($86)));
            };
          };
        };
      };
    };
  };
};

var over2 = function over2(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $87 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(wrap(dictNewtype1));
        var $88 = Data_Function.on(f)(unwrap(dictNewtype));
        return function ($89) {
          return $87($88($89));
        };
      };
    };
  };
};

var over = function over(dictNewtype) {
  return function (dictNewtype1) {
    return function (v) {
      return function (f) {
        var $90 = wrap(dictNewtype1);
        var $91 = unwrap(dictNewtype);
        return function ($92) {
          return $90(f($91($92)));
        };
      };
    };
  };
};

var op = function op(dictNewtype) {
  return un(dictNewtype);
};

var newtypeMultiplicative = new Newtype(function (v) {
  return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function (v) {
  return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function (v) {
  return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function (v) {
  return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function (v) {
  return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function (v) {
  return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function (v) {
  return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function (v) {
  return v;
}, Data_Monoid_Additive.Additive);

var collect = function collect(dictFunctor) {
  return function (dictNewtype) {
    return function (v) {
      return function (f) {
        var $93 = wrap(dictNewtype);
        var $94 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
        return function ($95) {
          return $93(f($94($95)));
        };
      };
    };
  };
};

var alaF = function alaF(dictFunctor) {
  return function (dictFunctor1) {
    return function (dictNewtype) {
      return function (dictNewtype1) {
        return function (v) {
          return function (f) {
            var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
            var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
            return function ($98) {
              return $96(f($97($98)));
            };
          };
        };
      };
    };
  };
};

var ala = function ala(dictFunctor) {
  return function (dictNewtype) {
    return function (dictNewtype1) {
      return function (v) {
        return function (f) {
          return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
        };
      };
    };
  };
};

module.exports = {
  unwrap: unwrap,
  wrap: wrap,
  Newtype: Newtype,
  un: un,
  op: op,
  ala: ala,
  alaF: alaF,
  over: over,
  overF: overF,
  under: under,
  underF: underF,
  over2: over2,
  overF2: overF2,
  under2: under2,
  underF2: underF2,
  traverse: traverse,
  collect: collect,
  newtypeAdditive: newtypeAdditive,
  newtypeMultiplicative: newtypeMultiplicative,
  newtypeConj: newtypeConj,
  newtypeDisj: newtypeDisj,
  newtypeDual: newtypeDual,
  newtypeEndo: newtypeEndo,
  newtypeFirst: newtypeFirst,
  newtypeLast: newtypeLast
};
},{"../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid.Additive/index.js":"../output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"../output/Data.Monoid.Endo/index.js","../Data.Monoid.Multiplicative/index.js":"../output/Data.Monoid.Multiplicative/index.js","../Data.Semigroup.First/index.js":"../output/Data.Semigroup.First/index.js","../Data.Semigroup.Last/index.js":"../output/Data.Semigroup.Last/index.js"}],"../output/Data.Foldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Foldable = function Foldable(foldMap, foldl, foldr) {
  this.foldMap = foldMap;
  this.foldl = foldl;
  this.foldr = foldr;
};

var foldr = function foldr(dict) {
  return dict.foldr;
};

var indexr = function indexr(dictFoldable) {
  return function (idx) {
    var go = function go(a) {
      return function (cursor) {
        if (cursor.elem instanceof Data_Maybe.Just) {
          return cursor;
        }

        ;
        var $106 = cursor.pos === idx;

        if ($106) {
          return {
            elem: new Data_Maybe.Just(a),
            pos: cursor.pos
          };
        }

        ;
        return {
          pos: cursor.pos + 1 | 0,
          elem: cursor.elem
        };
      };
    };

    var $193 = foldr(dictFoldable)(go)({
      elem: Data_Maybe.Nothing.value,
      pos: 0
    });
    return function ($194) {
      return function (v) {
        return v.elem;
      }($193($194));
    };
  };
};

var $$null = function $$null(dictFoldable) {
  return foldr(dictFoldable)(function (v) {
    return function (v1) {
      return false;
    };
  })(true);
};

var oneOf = function oneOf(dictFoldable) {
  return function (dictPlus) {
    return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
  };
};

var oneOfMap = function oneOfMap(dictFoldable) {
  return function (dictPlus) {
    return function (f) {
      return foldr(dictFoldable)(function () {
        var $195 = Control_Alt.alt(dictPlus.Alt0());
        return function ($196) {
          return $195(f($196));
        };
      }())(Control_Plus.empty(dictPlus));
    };
  };
};

var traverse_ = function traverse_(dictApplicative) {
  return function (dictFoldable) {
    return function (f) {
      return foldr(dictFoldable)(function () {
        var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
        return function ($198) {
          return $197(f($198));
        };
      }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
    };
  };
};

var for_ = function for_(dictApplicative) {
  return function (dictFoldable) {
    return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
  };
};

var sequence_ = function sequence_(dictApplicative) {
  return function (dictFoldable) {
    return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var foldl = function foldl(dict) {
  return dict.foldl;
};

var indexl = function indexl(dictFoldable) {
  return function (idx) {
    var go = function go(cursor) {
      return function (a) {
        if (cursor.elem instanceof Data_Maybe.Just) {
          return cursor;
        }

        ;
        var $109 = cursor.pos === idx;

        if ($109) {
          return {
            elem: new Data_Maybe.Just(a),
            pos: cursor.pos
          };
        }

        ;
        return {
          pos: cursor.pos + 1 | 0,
          elem: cursor.elem
        };
      };
    };

    var $199 = foldl(dictFoldable)(go)({
      elem: Data_Maybe.Nothing.value,
      pos: 0
    });
    return function ($200) {
      return function (v) {
        return v.elem;
      }($199($200));
    };
  };
};

var intercalate = function intercalate(dictFoldable) {
  return function (dictMonoid) {
    return function (sep) {
      return function (xs) {
        var go = function go(v) {
          return function (x) {
            if (v.init) {
              return {
                init: false,
                acc: x
              };
            }

            ;
            return {
              init: false,
              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
            };
          };
        };

        return foldl(dictFoldable)(go)({
          init: true,
          acc: Data_Monoid.mempty(dictMonoid)
        })(xs).acc;
      };
    };
  };
};

var length = function length(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(function (c) {
      return function (v) {
        return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
      };
    })(Data_Semiring.zero(dictSemiring));
  };
};

var maximumBy = function maximumBy(dictFoldable) {
  return function (cmp) {
    var max$prime = function max$prime(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(v1);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(function () {
            var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);

            if ($116) {
              return v.value0;
            }

            ;
            return v1;
          }());
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
  };
};

var maximum = function maximum(dictOrd) {
  return function (dictFoldable) {
    return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
  };
};

var minimumBy = function minimumBy(dictFoldable) {
  return function (cmp) {
    var min$prime = function min$prime(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(v1);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(function () {
            var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);

            if ($120) {
              return v.value0;
            }

            ;
            return v1;
          }());
        }

        ;
        throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
  };
};

var minimum = function minimum(dictOrd) {
  return function (dictFoldable) {
    return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
  };
};

var product = function product(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
  };
};

var sum = function sum(dictFoldable) {
  return function (dictSemiring) {
    return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
  };
};

var foldableMultiplicative = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Data_Maybe.Nothing) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return f(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return z;
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return v(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return z;
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return v(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var foldableDual = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableDisj = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableConj = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});

var foldMapDefaultR = function foldMapDefaultR(dictFoldable) {
  return function (dictMonoid) {
    return function (f) {
      return foldr(dictFoldable)(function (x) {
        return function (acc) {
          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldableArray = new Foldable(function (dictMonoid) {
  return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);

var foldMapDefaultL = function foldMapDefaultL(dictFoldable) {
  return function (dictMonoid) {
    return function (f) {
      return foldl(dictFoldable)(function (acc) {
        return function (x) {
          return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldMap = function foldMap(dict) {
  return dict.foldMap;
};

var foldableFirst = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return foldMap(foldableMaybe)(dictMonoid)(f)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldl(foldableMaybe)(f)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldr(foldableMaybe)(f)(z)(v);
    };
  };
});
var foldableLast = new Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return foldMap(foldableMaybe)(dictMonoid)(f)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldl(foldableMaybe)(f)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return foldr(foldableMaybe)(f)(z)(v);
    };
  };
});

var foldlDefault = function foldlDefault(dictFoldable) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function () {
          var $201 = Data_Function.flip(c);
          return function ($202) {
            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($201($202)));
          };
        }())(xs)))(u);
      };
    };
  };
};

var foldrDefault = function foldrDefault(dictFoldable) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($203) {
          return Data_Monoid_Endo.Endo(c($203));
        })(xs))(u);
      };
    };
  };
};

var surroundMap = function surroundMap(dictFoldable) {
  return function (dictSemigroup) {
    return function (d) {
      return function (t) {
        return function (f) {
          var joined = function joined(a) {
            return function (m) {
              return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
            };
          };

          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
        };
      };
    };
  };
};

var surround = function surround(dictFoldable) {
  return function (dictSemigroup) {
    return function (d) {
      return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
    };
  };
};

var foldM = function foldM(dictFoldable) {
  return function (dictMonad) {
    return function (f) {
      return function (a0) {
        return foldl(dictFoldable)(function (ma) {
          return function (b) {
            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
          };
        })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
      };
    };
  };
};

var fold = function fold(dictFoldable) {
  return function (dictMonoid) {
    return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var findMap = function findMap(dictFoldable) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
          return p(v1);
        }

        ;
        return v;
      };
    };

    return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
  };
};

var find = function find(dictFoldable) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        if (v instanceof Data_Maybe.Nothing && p(v1)) {
          return new Data_Maybe.Just(v1);
        }

        ;
        return v;
      };
    };

    return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
  };
};

var any = function any(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
  };
};

var elem = function elem(dictFoldable) {
  return function (dictEq) {
    var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
    var $205 = Data_Eq.eq(dictEq);
    return function ($206) {
      return $204($205($206));
    };
  };
};

var notElem = function notElem(dictFoldable) {
  return function (dictEq) {
    return function (x) {
      var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
      var $208 = elem(dictFoldable)(dictEq)(x);
      return function ($209) {
        return $207($208($209));
      };
    };
  };
};

var or = function or(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var all = function all(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
  };
};

var and = function and(dictFoldable) {
  return function (dictHeytingAlgebra) {
    return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  Foldable: Foldable,
  foldr: foldr,
  foldl: foldl,
  foldMap: foldMap,
  foldrDefault: foldrDefault,
  foldlDefault: foldlDefault,
  foldMapDefaultL: foldMapDefaultL,
  foldMapDefaultR: foldMapDefaultR,
  fold: fold,
  foldM: foldM,
  traverse_: traverse_,
  for_: for_,
  sequence_: sequence_,
  oneOf: oneOf,
  oneOfMap: oneOfMap,
  intercalate: intercalate,
  surroundMap: surroundMap,
  surround: surround,
  and: and,
  or: or,
  all: all,
  any: any,
  sum: sum,
  product: product,
  elem: elem,
  notElem: notElem,
  indexl: indexl,
  indexr: indexr,
  find: find,
  findMap: findMap,
  maximum: maximum,
  maximumBy: maximumBy,
  minimum: minimum,
  minimumBy: minimumBy,
  "null": $$null,
  length: length,
  foldableArray: foldableArray,
  foldableMaybe: foldableMaybe,
  foldableFirst: foldableFirst,
  foldableLast: foldableLast,
  foldableAdditive: foldableAdditive,
  foldableDual: foldableDual,
  foldableDisj: foldableDisj,
  foldableConj: foldableConj,
  foldableMultiplicative: foldableMultiplicative
};
},{"./foreign.js":"../output/Data.Foldable/foreign.js","../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"../output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Bifoldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Bifoldable = function Bifoldable(bifoldMap, bifoldl, bifoldr) {
  this.bifoldMap = bifoldMap;
  this.bifoldl = bifoldl;
  this.bifoldr = bifoldr;
};

var bifoldr = function bifoldr(dict) {
  return dict.bifoldr;
};

var bitraverse_ = function bitraverse_(dictBifoldable) {
  return function (dictApplicative) {
    return function (f) {
      return function (g) {
        return bifoldr(dictBifoldable)(function () {
          var $97 = Control_Apply.applySecond(dictApplicative.Apply0());
          return function ($98) {
            return $97(f($98));
          };
        }())(function () {
          var $99 = Control_Apply.applySecond(dictApplicative.Apply0());
          return function ($100) {
            return $99(g($100));
          };
        }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
      };
    };
  };
};

var bifor_ = function bifor_(dictBifoldable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return function (g) {
          return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
        };
      };
    };
  };
};

var bisequence_ = function bisequence_(dictBifoldable) {
  return function (dictApplicative) {
    return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var bifoldl = function bifoldl(dict) {
  return dict.bifoldl;
};

var bifoldableJoker = function bifoldableJoker(dictFoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (v) {
      return function (r) {
        return function (v1) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
        };
      };
    };
  }, function (v) {
    return function (r) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
        };
      };
    };
  }, function (v) {
    return function (r) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
        };
      };
    };
  });
};

var bifoldableClown = function bifoldableClown(dictFoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (l) {
      return function (v) {
        return function (v1) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
        };
      };
    };
  }, function (l) {
    return function (v) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
        };
      };
    };
  }, function (l) {
    return function (v) {
      return function (u) {
        return function (v1) {
          return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
        };
      };
    };
  });
};

var bifoldMapDefaultR = function bifoldMapDefaultR(dictBifoldable) {
  return function (dictMonoid) {
    return function (f) {
      return function (g) {
        return bifoldr(dictBifoldable)(function () {
          var $101 = Data_Semigroup.append(dictMonoid.Semigroup0());
          return function ($102) {
            return $101(f($102));
          };
        }())(function () {
          var $103 = Data_Semigroup.append(dictMonoid.Semigroup0());
          return function ($104) {
            return $103(g($104));
          };
        }())(Data_Monoid.mempty(dictMonoid));
      };
    };
  };
};

var bifoldMapDefaultL = function bifoldMapDefaultL(dictBifoldable) {
  return function (dictMonoid) {
    return function (f) {
      return function (g) {
        return bifoldl(dictBifoldable)(function (m) {
          return function (a) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
          };
        })(function (m) {
          return function (b) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
          };
        })(Data_Monoid.mempty(dictMonoid));
      };
    };
  };
};

var bifoldMap = function bifoldMap(dict) {
  return dict.bifoldMap;
};

var bifoldableFlip = function bifoldableFlip(dictBifoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (r) {
      return function (l) {
        return function (v) {
          return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
        };
      };
    };
  }, function (r) {
    return function (l) {
      return function (u) {
        return function (v) {
          return bifoldl(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  }, function (r) {
    return function (l) {
      return function (u) {
        return function (v) {
          return bifoldr(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  });
};

var bifoldableWrap = function bifoldableWrap(dictBifoldable) {
  return new Bifoldable(function (dictMonoid) {
    return function (l) {
      return function (r) {
        return function (v) {
          return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
        };
      };
    };
  }, function (l) {
    return function (r) {
      return function (u) {
        return function (v) {
          return bifoldl(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  }, function (l) {
    return function (r) {
      return function (u) {
        return function (v) {
          return bifoldr(dictBifoldable)(l)(r)(u)(v);
        };
      };
    };
  });
};

var bifoldlDefault = function bifoldlDefault(dictBifoldable) {
  return function (f) {
    return function (g) {
      return function (z) {
        return function (p) {
          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function () {
            var $105 = Data_Function.flip(f);
            return function ($106) {
              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($105($106)));
            };
          }())(function () {
            var $107 = Data_Function.flip(g);
            return function ($108) {
              return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($107($108)));
            };
          }())(p)))(z);
        };
      };
    };
  };
};

var bifoldrDefault = function bifoldrDefault(dictBifoldable) {
  return function (f) {
    return function (g) {
      return function (z) {
        return function (p) {
          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($109) {
            return Data_Monoid_Endo.Endo(f($109));
          })(function ($110) {
            return Data_Monoid_Endo.Endo(g($110));
          })(p))(z);
        };
      };
    };
  };
};

var bifoldableProduct = function bifoldableProduct(dictBifoldable) {
  return function (dictBifoldable1) {
    return new Bifoldable(function (dictMonoid) {
      return function (l) {
        return function (r) {
          return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
          };
        };
      };
    }, function (l) {
      return function (r) {
        return function (u) {
          return function (m) {
            return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
          };
        };
      };
    }, function (l) {
      return function (r) {
        return function (u) {
          return function (m) {
            return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
          };
        };
      };
    });
  };
};

var bifold = function bifold(dictBifoldable) {
  return function (dictMonoid) {
    return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var biany = function biany(dictBifoldable) {
  return function (dictBooleanAlgebra) {
    return function (p) {
      return function (q) {
        var $111 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
        var $112 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($114) {
          return Data_Monoid_Disj.Disj(p($114));
        })(function ($115) {
          return Data_Monoid_Disj.Disj(q($115));
        });
        return function ($113) {
          return $111($112($113));
        };
      };
    };
  };
};

var biall = function biall(dictBifoldable) {
  return function (dictBooleanAlgebra) {
    return function (p) {
      return function (q) {
        var $116 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
        var $117 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($119) {
          return Data_Monoid_Conj.Conj(p($119));
        })(function ($120) {
          return Data_Monoid_Conj.Conj(q($120));
        });
        return function ($118) {
          return $116($117($118));
        };
      };
    };
  };
};

module.exports = {
  bifoldMap: bifoldMap,
  bifoldl: bifoldl,
  bifoldr: bifoldr,
  Bifoldable: Bifoldable,
  bifoldrDefault: bifoldrDefault,
  bifoldlDefault: bifoldlDefault,
  bifoldMapDefaultR: bifoldMapDefaultR,
  bifoldMapDefaultL: bifoldMapDefaultL,
  bifold: bifold,
  bitraverse_: bitraverse_,
  bifor_: bifor_,
  bisequence_: bisequence_,
  biany: biany,
  biall: biall,
  bifoldableClown: bifoldableClown,
  bifoldableJoker: bifoldableJoker,
  bifoldableFlip: bifoldableFlip,
  bifoldableProduct: bifoldableProduct,
  bifoldableWrap: bifoldableWrap
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"../output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Bifunctor/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Bifunctor = function Bifunctor(bimap) {
  this.bimap = bimap;
};

var bimap = function bimap(dict) {
  return dict.bimap;
};

var lmap = function lmap(dictBifunctor) {
  return function (f) {
    return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var rmap = function rmap(dictBifunctor) {
  return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};

module.exports = {
  bimap: bimap,
  Bifunctor: Bifunctor,
  lmap: lmap,
  rmap: rmap
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js"}],"../output/Control.Biapplicative/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Biapplicative = function Biapplicative(Biapply0, bipure) {
  this.Biapply0 = Biapply0;
  this.bipure = bipure;
};

var bipure = function bipure(dict) {
  return dict.bipure;
};

module.exports = {
  bipure: bipure,
  Biapplicative: Biapplicative
};
},{}],"../output/Control.Biapply/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Function = require("../Data.Function/index.js");

var Biapply = function Biapply(Bifunctor0, biapply) {
  this.Bifunctor0 = Bifunctor0;
  this.biapply = biapply;
};

var biapply = function biapply(dict) {
  return dict.biapply;
};

var biapplyFirst = function biapplyFirst(dictBiapply) {
  return function (a) {
    return function (b) {
      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
    };
  };
};

var biapplySecond = function biapplySecond(dictBiapply) {
  return function (a) {
    return function (b) {
      return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
    };
  };
};

var bilift2 = function bilift2(dictBiapply) {
  return function (f) {
    return function (g) {
      return function (a) {
        return function (b) {
          return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
        };
      };
    };
  };
};

var bilift3 = function bilift3(dictBiapply) {
  return function (f) {
    return function (g) {
      return function (a) {
        return function (b) {
          return function (c) {
            return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
          };
        };
      };
    };
  };
};

module.exports = {
  biapply: biapply,
  Biapply: Biapply,
  biapplyFirst: biapplyFirst,
  biapplySecond: biapplySecond,
  bilift2: bilift2,
  bilift3: bilift3
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Function/index.js":"../output/Data.Function/index.js"}],"../output/Data.Bifunctor.Clown/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Clown = function Clown(x) {
  return x;
};

var showClown = function showClown(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordClown = function ordClown(dictOrd) {
  return dictOrd;
};

var newtypeClown = new Data_Newtype.Newtype(function (n) {
  return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
  return function (v1) {
    return v1;
  };
});

var eqClown = function eqClown(dictEq) {
  return dictEq;
};

var bifunctorClown = function bifunctorClown(dictFunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (v) {
      return function (v1) {
        return Data_Functor.map(dictFunctor)(f)(v1);
      };
    };
  });
};

var biapplyClown = function biapplyClown(dictApply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorClown(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Apply.apply(dictApply)(v)(v1);
    };
  });
};

var biapplicativeClown = function biapplicativeClown(dictApplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyClown(dictApplicative.Apply0());
  }, function (a) {
    return function (v) {
      return Control_Applicative.pure(dictApplicative)(a);
    };
  });
};

module.exports = {
  Clown: Clown,
  newtypeClown: newtypeClown,
  eqClown: eqClown,
  ordClown: ordClown,
  showClown: showClown,
  functorClown: functorClown,
  bifunctorClown: bifunctorClown,
  biapplyClown: biapplyClown,
  biapplicativeClown: biapplicativeClown
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Bifunctor.Flip/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Flip = function Flip(x) {
  return x;
};

var showFlip = function showFlip(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordFlip = function ordFlip(dictOrd) {
  return dictOrd;
};

var newtypeFlip = new Data_Newtype.Newtype(function (n) {
  return n;
}, Flip);

var functorFlip = function functorFlip(dictBifunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
    };
  });
};

var eqFlip = function eqFlip(dictEq) {
  return dictEq;
};

var bifunctorFlip = function bifunctorFlip(dictBifunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
      return function (v) {
        return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
      };
    };
  });
};

var biapplyFlip = function biapplyFlip(dictBiapply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorFlip(dictBiapply.Bifunctor0());
  }, function (v) {
    return function (v1) {
      return Control_Biapply.biapply(dictBiapply)(v)(v1);
    };
  });
};

var biapplicativeFlip = function biapplicativeFlip(dictBiapplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyFlip(dictBiapplicative.Biapply0());
  }, function (a) {
    return function (b) {
      return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
    };
  });
};

module.exports = {
  Flip: Flip,
  newtypeFlip: newtypeFlip,
  eqFlip: eqFlip,
  ordFlip: ordFlip,
  showFlip: showFlip,
  functorFlip: functorFlip,
  bifunctorFlip: bifunctorFlip,
  biapplyFlip: biapplyFlip,
  biapplicativeFlip: biapplicativeFlip
};
},{"../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Bifunctor.Joker/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Joker = function Joker(x) {
  return x;
};

var showJoker = function showJoker(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordJoker = function ordJoker(dictOrd) {
  return dictOrd;
};

var newtypeJoker = new Data_Newtype.Newtype(function (n) {
  return n;
}, Joker);

var functorJoker = function functorJoker(dictFunctor) {
  return new Data_Functor.Functor(function (g) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(g)(v);
    };
  });
};

var eqJoker = function eqJoker(dictEq) {
  return dictEq;
};

var bifunctorJoker = function bifunctorJoker(dictFunctor) {
  return new Data_Bifunctor.Bifunctor(function (v) {
    return function (g) {
      return function (v1) {
        return Data_Functor.map(dictFunctor)(g)(v1);
      };
    };
  });
};

var biapplyJoker = function biapplyJoker(dictApply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorJoker(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Apply.apply(dictApply)(v)(v1);
    };
  });
};

var biapplicativeJoker = function biapplicativeJoker(dictApplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyJoker(dictApplicative.Apply0());
  }, function (v) {
    return function (b) {
      return Control_Applicative.pure(dictApplicative)(b);
    };
  });
};

module.exports = {
  Joker: Joker,
  newtypeJoker: newtypeJoker,
  eqJoker: eqJoker,
  ordJoker: ordJoker,
  showJoker: showJoker,
  functorJoker: functorJoker,
  bifunctorJoker: bifunctorJoker,
  biapplyJoker: biapplyJoker,
  biapplicativeJoker: biapplicativeJoker
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Bifunctor.Product/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Product = function () {
  function Product(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Product.create = function (value0) {
    return function (value1) {
      return new Product(value0, value1);
    };
  };

  return Product;
}();

var showProduct = function showProduct(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var eqProduct = function eqProduct(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
      };
    });
  };
};

var ordProduct = function ordProduct(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
      };
    });
  };
};

var bifunctorProduct = function bifunctorProduct(dictBifunctor) {
  return function (dictBifunctor1) {
    return new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
        return function (v) {
          return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
        };
      };
    });
  };
};

var biapplyProduct = function biapplyProduct(dictBiapply) {
  return function (dictBiapply1) {
    return new Control_Biapply.Biapply(function () {
      return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
    }, function (v) {
      return function (v1) {
        return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
      };
    });
  };
};

var biapplicativeProduct = function biapplicativeProduct(dictBiapplicative) {
  return function (dictBiapplicative1) {
    return new Control_Biapplicative.Biapplicative(function () {
      return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
    }, function (a) {
      return function (b) {
        return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
      };
    });
  };
};

module.exports = {
  Product: Product,
  eqProduct: eqProduct,
  ordProduct: ordProduct,
  showProduct: showProduct,
  bifunctorProduct: bifunctorProduct,
  biapplyProduct: biapplyProduct,
  biapplicativeProduct: biapplicativeProduct
};
},{"../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Bifunctor.Wrap/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Show = require("../Data.Show/index.js");

var Wrap = function Wrap(x) {
  return x;
};

var showWrap = function showWrap(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var ordWrap = function ordWrap(dictOrd) {
  return dictOrd;
};

var newtypeWrap = new Data_Newtype.Newtype(function (n) {
  return n;
}, Wrap);

var functorWrap = function functorWrap(dictBifunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
    };
  });
};

var eqWrap = function eqWrap(dictEq) {
  return dictEq;
};

var bifunctorWrap = function bifunctorWrap(dictBifunctor) {
  return new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
      return function (v) {
        return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
      };
    };
  });
};

var biapplyWrap = function biapplyWrap(dictBiapply) {
  return new Control_Biapply.Biapply(function () {
    return bifunctorWrap(dictBiapply.Bifunctor0());
  }, function (v) {
    return function (v1) {
      return Control_Biapply.biapply(dictBiapply)(v)(v1);
    };
  });
};

var biapplicativeWrap = function biapplicativeWrap(dictBiapplicative) {
  return new Control_Biapplicative.Biapplicative(function () {
    return biapplyWrap(dictBiapplicative.Biapply0());
  }, function (a) {
    return function (b) {
      return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
    };
  });
};

module.exports = {
  Wrap: Wrap,
  newtypeWrap: newtypeWrap,
  eqWrap: eqWrap,
  ordWrap: ordWrap,
  showWrap: showWrap,
  functorWrap: functorWrap,
  bifunctorWrap: bifunctorWrap,
  biapplyWrap: biapplyWrap,
  biapplicativeWrap: biapplicativeWrap
};
},{"../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Traversable/foreign.js":[function(require,module,exports) {
"use strict"; // jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function array1(a) {
    return [a];
  }

  function array2(a) {
    return function (b) {
      return [a, b];
    };
  }

  function array3(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  }

  function concat2(xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          return function (array) {
            function go(bot, top) {
              switch (top - bot) {
                case 0:
                  return pure([]);

                case 1:
                  return map(array1)(f(array[bot]));

                case 2:
                  return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));

                case 3:
                  return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));

                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
              }
            }

            return go(0, array.length);
          };
        };
      };
    };
  };
}();
},{}],"../output/Data.Maybe.First/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var First = function First(x) {
  return x;
};

var showFirst = function showFirst(dictShow) {
  return new Data_Show.Show(function (v) {
    return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
  });
};

var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v instanceof Data_Maybe.Just) {
      return v;
    }

    ;
    return v1;
  };
});

var ordFirst = function ordFirst(dictOrd) {
  return Data_Maybe.ordMaybe(dictOrd);
};

var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
  return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
  return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;

var eqFirst = function eqFirst(dictEq) {
  return Data_Maybe.eqMaybe(dictEq);
};

var eq1First = Data_Maybe.eq1Maybe;

var boundedFirst = function boundedFirst(dictBounded) {
  return Data_Maybe.boundedMaybe(dictBounded);
};

var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function () {
  return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function () {
  return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function () {
  return applicativeFirst;
}, function () {
  return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
  return alternativeFirst;
}, function () {
  return monadFirst;
});
module.exports = {
  First: First,
  newtypeFirst: newtypeFirst,
  eqFirst: eqFirst,
  eq1First: eq1First,
  ordFirst: ordFirst,
  ord1First: ord1First,
  boundedFirst: boundedFirst,
  functorFirst: functorFirst,
  invariantFirst: invariantFirst,
  applyFirst: applyFirst,
  applicativeFirst: applicativeFirst,
  bindFirst: bindFirst,
  monadFirst: monadFirst,
  extendFirst: extendFirst,
  showFirst: showFirst,
  semigroupFirst: semigroupFirst,
  monoidFirst: monoidFirst,
  altFirst: altFirst,
  plusFirst: plusFirst,
  alternativeFirst: alternativeFirst,
  monadZeroFirst: monadZeroFirst
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Maybe.Last/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Last = function Last(x) {
  return x;
};

var showLast = function showLast(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
  });
};

var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    if (v1 instanceof Data_Maybe.Just) {
      return v1;
    }

    ;

    if (v1 instanceof Data_Maybe.Nothing) {
      return v;
    }

    ;
    throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [v.constructor.name, v1.constructor.name]);
  };
});

var ordLast = function ordLast(dictOrd) {
  return Data_Maybe.ordMaybe(dictOrd);
};

var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
  return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
  return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;

var eqLast = function eqLast(dictEq) {
  return Data_Maybe.eqMaybe(dictEq);
};

var eq1Last = Data_Maybe.eq1Maybe;

var boundedLast = function boundedLast(dictBounded) {
  return Data_Maybe.boundedMaybe(dictBounded);
};

var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function () {
  return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function () {
  return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function () {
  return applicativeLast;
}, function () {
  return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function () {
  return alternativeLast;
}, function () {
  return monadLast;
});
module.exports = {
  Last: Last,
  newtypeLast: newtypeLast,
  eqLast: eqLast,
  eq1Last: eq1Last,
  ordLast: ordLast,
  ord1Last: ord1Last,
  boundedLast: boundedLast,
  functorLast: functorLast,
  invariantLast: invariantLast,
  applyLast: applyLast,
  applicativeLast: applicativeLast,
  bindLast: bindLast,
  monadLast: monadLast,
  extendLast: extendLast,
  showLast: showLast,
  semigroupLast: semigroupLast,
  monoidLast: monoidLast,
  altLast: altLast,
  plusLast: plusLast,
  alternativeLast: alternativeLast,
  monadZeroLast: monadZeroLast
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Traversable.Accum.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var StateR = function StateR(x) {
  return x;
};

var StateL = function StateL(x) {
  return x;
};

var stateR = function stateR(v) {
  return v;
};

var stateL = function stateL(v) {
  return v;
};

var functorStateR = new Data_Functor.Functor(function (f) {
  return function (k) {
    return function (s) {
      var v = stateR(k)(s);
      return {
        accum: v.accum,
        value: f(v.value)
      };
    };
  };
});
var functorStateL = new Data_Functor.Functor(function (f) {
  return function (k) {
    return function (s) {
      var v = stateL(k)(s);
      return {
        accum: v.accum,
        value: f(v.value)
      };
    };
  };
});
var applyStateR = new Control_Apply.Apply(function () {
  return functorStateR;
}, function (f) {
  return function (x) {
    return function (s) {
      var v = stateR(x)(s);
      var v1 = stateR(f)(v.accum);
      return {
        accum: v1.accum,
        value: v1.value(v.value)
      };
    };
  };
});
var applyStateL = new Control_Apply.Apply(function () {
  return functorStateL;
}, function (f) {
  return function (x) {
    return function (s) {
      var v = stateL(f)(s);
      var v1 = stateL(x)(v.accum);
      return {
        accum: v1.accum,
        value: v.value(v1.value)
      };
    };
  };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
  return applyStateR;
}, function (a) {
  return function (s) {
    return {
      accum: s,
      value: a
    };
  };
});
var applicativeStateL = new Control_Applicative.Applicative(function () {
  return applyStateL;
}, function (a) {
  return function (s) {
    return {
      accum: s,
      value: a
    };
  };
});
module.exports = {
  StateL: StateL,
  stateL: stateL,
  StateR: StateR,
  stateR: stateR,
  functorStateL: functorStateL,
  applyStateL: applyStateL,
  applicativeStateL: applicativeStateL,
  functorStateR: functorStateR,
  applyStateR: applyStateR,
  applicativeStateR: applicativeStateR
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js"}],"../output/Data.Traversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");

var Traversable = function Traversable(Foldable1, Functor0, sequence, traverse) {
  this.Foldable1 = Foldable1;
  this.Functor0 = Functor0;
  this.sequence = sequence;
  this.traverse = traverse;
};

var traverse = function traverse(dict) {
  return dict.traverse;
};

var traversableMultiplicative = new Traversable(function () {
  return Data_Foldable.foldableMultiplicative;
}, function () {
  return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
    };
  };
});
var traversableMaybe = new Traversable(function () {
  return Data_Foldable.foldableMaybe;
}, function () {
  return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Data_Maybe.Nothing) {
        return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
      }

      ;

      if (v1 instanceof Data_Maybe.Just) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableDual = new Traversable(function () {
  return Data_Foldable.foldableDual;
}, function () {
  return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(f(v));
    };
  };
});
var traversableDisj = new Traversable(function () {
  return Data_Foldable.foldableDisj;
}, function () {
  return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(f(v));
    };
  };
});
var traversableConj = new Traversable(function () {
  return Data_Foldable.foldableConj;
}, function () {
  return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(f(v));
    };
  };
});
var traversableAdditive = new Traversable(function () {
  return Data_Foldable.foldableAdditive;
}, function () {
  return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(f(v));
    };
  };
});

var sequenceDefault = function sequenceDefault(dictTraversable) {
  return function (dictApplicative) {
    return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var traversableArray = new Traversable(function () {
  return Data_Foldable.foldableArray;
}, function () {
  return Data_Functor.functorArray;
}, function (dictApplicative) {
  return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
  return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
});

var sequence = function sequence(dict) {
  return dict.sequence;
};

var traversableFirst = new Traversable(function () {
  return Data_Foldable.foldableFirst;
}, function () {
  return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
    };
  };
});
var traversableLast = new Traversable(function () {
  return Data_Foldable.foldableLast;
}, function () {
  return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
    };
  };
});

var traverseDefault = function traverseDefault(dictTraversable) {
  return function (dictApplicative) {
    return function (f) {
      return function (ta) {
        return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
      };
    };
  };
};

var mapAccumR = function mapAccumR(dictTraversable) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
          return function (s) {
            return f(s)(a);
          };
        })(xs))(s0);
      };
    };
  };
};

var scanr = function scanr(dictTraversable) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumR(dictTraversable)(function (b) {
          return function (a) {
            var b$prime = f(a)(b);
            return {
              accum: b$prime,
              value: b$prime
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var mapAccumL = function mapAccumL(dictTraversable) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
          return function (s) {
            return f(s)(a);
          };
        })(xs))(s0);
      };
    };
  };
};

var scanl = function scanl(dictTraversable) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumL(dictTraversable)(function (b) {
          return function (a) {
            var b$prime = f(b)(a);
            return {
              accum: b$prime,
              value: b$prime
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var $$for = function $$for(dictApplicative) {
  return function (dictTraversable) {
    return function (x) {
      return function (f) {
        return traverse(dictTraversable)(dictApplicative)(f)(x);
      };
    };
  };
};

module.exports = {
  Traversable: Traversable,
  traverse: traverse,
  sequence: sequence,
  traverseDefault: traverseDefault,
  sequenceDefault: sequenceDefault,
  "for": $$for,
  scanl: scanl,
  scanr: scanr,
  mapAccumL: mapAccumL,
  mapAccumR: mapAccumR,
  traversableArray: traversableArray,
  traversableMaybe: traversableMaybe,
  traversableFirst: traversableFirst,
  traversableLast: traversableLast,
  traversableAdditive: traversableAdditive,
  traversableDual: traversableDual,
  traversableConj: traversableConj,
  traversableDisj: traversableDisj,
  traversableMultiplicative: traversableMultiplicative
};
},{"./foreign.js":"../output/Data.Traversable/foreign.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"../output/Data.Maybe.First/index.js","../Data.Maybe.Last/index.js":"../output/Data.Maybe.Last/index.js","../Data.Monoid.Additive/index.js":"../output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"../output/Data.Monoid.Multiplicative/index.js","../Data.Traversable.Accum.Internal/index.js":"../output/Data.Traversable.Accum.Internal/index.js"}],"../output/Data.Bitraversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");

var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");

var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");

var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");

var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Bitraversable = function Bitraversable(Bifoldable1, Bifunctor0, bisequence, bitraverse) {
  this.Bifoldable1 = Bifoldable1;
  this.Bifunctor0 = Bifunctor0;
  this.bisequence = bisequence;
  this.bitraverse = bitraverse;
};

var bitraverse = function bitraverse(dict) {
  return dict.bitraverse;
};

var lfor = function lfor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
      };
    };
  };
};

var ltraverse = function ltraverse(dictBitraversable) {
  return function (dictApplicative) {
    return function (f) {
      return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
    };
  };
};

var rfor = function rfor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
      };
    };
  };
};

var rtraverse = function rtraverse(dictBitraversable) {
  return function (dictApplicative) {
    return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
  };
};

var bitraversableJoker = function bitraversableJoker(dictTraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
  }, function () {
    return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (v) {
      return function (r) {
        return function (v1) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
        };
      };
    };
  });
};

var bitraversableClown = function bitraversableClown(dictTraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
  }, function () {
    return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (l) {
      return function (v) {
        return function (v1) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
        };
      };
    };
  });
};

var bisequenceDefault = function bisequenceDefault(dictBitraversable) {
  return function (dictApplicative) {
    return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var bisequence = function bisequence(dict) {
  return dict.bisequence;
};

var bitraversableFlip = function bitraversableFlip(dictBitraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
  }, function () {
    return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (r) {
      return function (l) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
        };
      };
    };
  });
};

var bitraversableProduct = function bitraversableProduct(dictBitraversable) {
  return function (dictBitraversable1) {
    return new Bitraversable(function () {
      return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
    }, function () {
      return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
    }, function (dictApplicative) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
      };
    }, function (dictApplicative) {
      return function (l) {
        return function (r) {
          return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
          };
        };
      };
    });
  };
};

var bitraversableWrap = function bitraversableWrap(dictBitraversable) {
  return new Bitraversable(function () {
    return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
  }, function () {
    return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
  }, function (dictApplicative) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
    };
  }, function (dictApplicative) {
    return function (l) {
      return function (r) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
        };
      };
    };
  });
};

var bitraverseDefault = function bitraverseDefault(dictBitraversable) {
  return function (dictApplicative) {
    return function (f) {
      return function (g) {
        return function (t) {
          return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
        };
      };
    };
  };
};

var bifor = function bifor(dictBitraversable) {
  return function (dictApplicative) {
    return function (t) {
      return function (f) {
        return function (g) {
          return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
        };
      };
    };
  };
};

module.exports = {
  Bitraversable: Bitraversable,
  bitraverse: bitraverse,
  bisequence: bisequence,
  bitraverseDefault: bitraverseDefault,
  bisequenceDefault: bisequenceDefault,
  ltraverse: ltraverse,
  rtraverse: rtraverse,
  bifor: bifor,
  lfor: lfor,
  rfor: rfor,
  bitraversableClown: bitraversableClown,
  bitraversableJoker: bitraversableJoker,
  bitraversableFlip: bitraversableFlip,
  bitraversableProduct: bitraversableProduct,
  bitraversableWrap: bitraversableWrap
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Bifoldable/index.js":"../output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Bifunctor.Clown/index.js":"../output/Data.Bifunctor.Clown/index.js","../Data.Bifunctor.Flip/index.js":"../output/Data.Bifunctor.Flip/index.js","../Data.Bifunctor.Joker/index.js":"../output/Data.Bifunctor.Joker/index.js","../Data.Bifunctor.Product/index.js":"../output/Data.Bifunctor.Product/index.js","../Data.Bifunctor.Wrap/index.js":"../output/Data.Bifunctor.Wrap/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js"}],"../output/Data.FunctorWithIndex/foreign.js":[function(require,module,exports) {
"use strict";

exports.mapWithIndexArray = function (f) {
  return function (xs) {
    var l = xs.length;
    var result = Array(l);

    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }

    return result;
  };
};
},{}],"../output/Data.FunctorWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");

var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var FunctorWithIndex = function FunctorWithIndex(Functor0, mapWithIndex) {
  this.Functor0 = Functor0;
  this.mapWithIndex = mapWithIndex;
};

var mapWithIndex = function mapWithIndex(dict) {
  return dict.mapWithIndex;
};

var mapDefault = function mapDefault(dictFunctorWithIndex) {
  return function (f) {
    return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
  };
};

var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
  return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function () {
  return Data_Maybe.functorMaybe;
}, function (f) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function () {
  return Data_Maybe_Last.functorLast;
}, function (f) {
  return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function () {
  return Data_Maybe_First.functorFirst;
}, function (f) {
  return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function () {
  return Data_Monoid_Dual.functorDual;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function () {
  return Data_Monoid_Disj.functorDisj;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function () {
  return Data_Monoid_Conj.functorConj;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function () {
  return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function () {
  return Data_Monoid_Additive.functorAdditive;
}, function (f) {
  return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
  FunctorWithIndex: FunctorWithIndex,
  mapWithIndex: mapWithIndex,
  mapDefault: mapDefault,
  functorWithIndexArray: functorWithIndexArray,
  functorWithIndexMaybe: functorWithIndexMaybe,
  functorWithIndexFirst: functorWithIndexFirst,
  functorWithIndexLast: functorWithIndexLast,
  functorWithIndexAdditive: functorWithIndexAdditive,
  functorWithIndexDual: functorWithIndexDual,
  functorWithIndexConj: functorWithIndexConj,
  functorWithIndexDisj: functorWithIndexDisj,
  functorWithIndexMultiplicative: functorWithIndexMultiplicative
};
},{"./foreign.js":"../output/Data.FunctorWithIndex/foreign.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"../output/Data.Maybe.First/index.js","../Data.Maybe.Last/index.js":"../output/Data.Maybe.Last/index.js","../Data.Monoid.Additive/index.js":"../output/Data.Monoid.Additive/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"../output/Data.Monoid.Multiplicative/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.FoldableWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");

var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Tuple = function () {
  function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Tuple.create = function (value0) {
    return function (value1) {
      return new Tuple(value0, value1);
    };
  };

  return Tuple;
}();

var FoldableWithIndex = function FoldableWithIndex(Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
  this.Foldable0 = Foldable0;
  this.foldMapWithIndex = foldMapWithIndex;
  this.foldlWithIndex = foldlWithIndex;
  this.foldrWithIndex = foldrWithIndex;
};

var foldrWithIndex = function foldrWithIndex(dict) {
  return dict.foldrWithIndex;
};

var traverseWithIndex_ = function traverseWithIndex_(dictApplicative) {
  return function (dictFoldableWithIndex) {
    return function (f) {
      return foldrWithIndex(dictFoldableWithIndex)(function (i) {
        var $46 = Control_Apply.applySecond(dictApplicative.Apply0());
        var $47 = f(i);
        return function ($48) {
          return $46($47($48));
        };
      })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
    };
  };
};

var forWithIndex_ = function forWithIndex_(dictApplicative) {
  return function (dictFoldableWithIndex) {
    return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
  };
};

var foldrDefault = function foldrDefault(dictFoldableWithIndex) {
  return function (f) {
    return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
  };
};

var foldlWithIndex = function foldlWithIndex(dict) {
  return dict.foldlWithIndex;
};

var foldlDefault = function foldlDefault(dictFoldableWithIndex) {
  return function (f) {
    return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
  };
};

var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
  return Data_Foldable.foldableMultiplicative;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function () {
  return Data_Foldable.foldableMaybe;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function () {
  return Data_Foldable.foldableLast;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function () {
  return Data_Foldable.foldableFirst;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function () {
  return Data_Foldable.foldableDual;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function () {
  return Data_Foldable.foldableDisj;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function () {
  return Data_Foldable.foldableConj;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function () {
  return Data_Foldable.foldableAdditive;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});

var foldWithIndexM = function foldWithIndexM(dictFoldableWithIndex) {
  return function (dictMonad) {
    return function (f) {
      return function (a0) {
        return foldlWithIndex(dictFoldableWithIndex)(function (i) {
          return function (ma) {
            return function (b) {
              return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
            };
          };
        })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
      };
    };
  };
};

var foldMapWithIndexDefaultR = function foldMapWithIndexDefaultR(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldrWithIndex(dictFoldableWithIndex)(function (i) {
        return function (x) {
          return function (acc) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
          };
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldableWithIndexArray = new FoldableWithIndex(function () {
  return Data_Foldable.foldableArray;
}, function (dictMonoid) {
  return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function (f) {
  return function (z) {
    var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
      return function (v) {
        return f(v.value0)(y)(v.value1);
      };
    })(z);
    var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
    return function ($51) {
      return $49($50($51));
    };
  };
}, function (f) {
  return function (z) {
    var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
      return function (y) {
        return f(v.value0)(v.value1)(y);
      };
    })(z);
    var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
    return function ($54) {
      return $52($53($54));
    };
  };
});

var foldMapWithIndexDefaultL = function foldMapWithIndexDefaultL(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldlWithIndex(dictFoldableWithIndex)(function (i) {
        return function (acc) {
          return function (x) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
          };
        };
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var foldMapWithIndex = function foldMapWithIndex(dict) {
  return dict.foldMapWithIndex;
};

var foldlWithIndexDefault = function foldlWithIndexDefault(dictFoldableWithIndex) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
          var $55 = Data_Function.flip(c(i));
          return function ($56) {
            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($55($56)));
          };
        })(xs)))(u);
      };
    };
  };
};

var foldrWithIndexDefault = function foldrWithIndexDefault(dictFoldableWithIndex) {
  return function (c) {
    return function (u) {
      return function (xs) {
        return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
          var $57 = c(i);
          return function ($58) {
            return Data_Monoid_Endo.Endo($57($58));
          };
        })(xs))(u);
      };
    };
  };
};

var surroundMapWithIndex = function surroundMapWithIndex(dictFoldableWithIndex) {
  return function (dictSemigroup) {
    return function (d) {
      return function (t) {
        return function (f) {
          var joined = function joined(i) {
            return function (a) {
              return function (m) {
                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
              };
            };
          };

          return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
        };
      };
    };
  };
};

var foldMapDefault = function foldMapDefault(dictFoldableWithIndex) {
  return function (dictMonoid) {
    return function (f) {
      return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
    };
  };
};

var findWithIndex = function findWithIndex(dictFoldableWithIndex) {
  return function (p) {
    var go = function go(v) {
      return function (v1) {
        return function (v2) {
          if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
            return new Data_Maybe.Just({
              index: v,
              value: v2
            });
          }

          ;
          return v1;
        };
      };
    };

    return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
  };
};

var anyWithIndex = function anyWithIndex(dictFoldableWithIndex) {
  return function (dictHeytingAlgebra) {
    return function (t) {
      var $59 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
      var $60 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
        var $62 = t(i);
        return function ($63) {
          return Data_Monoid_Disj.Disj($62($63));
        };
      });
      return function ($61) {
        return $59($60($61));
      };
    };
  };
};

var allWithIndex = function allWithIndex(dictFoldableWithIndex) {
  return function (dictHeytingAlgebra) {
    return function (t) {
      var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
      var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
        var $67 = t(i);
        return function ($68) {
          return Data_Monoid_Conj.Conj($67($68));
        };
      });
      return function ($66) {
        return $64($65($66));
      };
    };
  };
};

module.exports = {
  FoldableWithIndex: FoldableWithIndex,
  foldrWithIndex: foldrWithIndex,
  foldlWithIndex: foldlWithIndex,
  foldMapWithIndex: foldMapWithIndex,
  foldrWithIndexDefault: foldrWithIndexDefault,
  foldlWithIndexDefault: foldlWithIndexDefault,
  foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
  foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
  foldWithIndexM: foldWithIndexM,
  traverseWithIndex_: traverseWithIndex_,
  forWithIndex_: forWithIndex_,
  surroundMapWithIndex: surroundMapWithIndex,
  allWithIndex: allWithIndex,
  anyWithIndex: anyWithIndex,
  findWithIndex: findWithIndex,
  foldrDefault: foldrDefault,
  foldlDefault: foldlDefault,
  foldMapDefault: foldMapDefault,
  foldableWithIndexArray: foldableWithIndexArray,
  foldableWithIndexMaybe: foldableWithIndexMaybe,
  foldableWithIndexFirst: foldableWithIndexFirst,
  foldableWithIndexLast: foldableWithIndexLast,
  foldableWithIndexAdditive: foldableWithIndexAdditive,
  foldableWithIndexDual: foldableWithIndexDual,
  foldableWithIndexDisj: foldableWithIndexDisj,
  foldableWithIndexConj: foldableWithIndexConj,
  foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Monoid.Conj/index.js":"../output/Data.Monoid.Conj/index.js","../Data.Monoid.Disj/index.js":"../output/Data.Monoid.Disj/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Endo/index.js":"../output/Data.Monoid.Endo/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.TraversableWithIndex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var TraversableWithIndex = function TraversableWithIndex(FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
  this.FoldableWithIndex1 = FoldableWithIndex1;
  this.FunctorWithIndex0 = FunctorWithIndex0;
  this.Traversable2 = Traversable2;
  this.traverseWithIndex = traverseWithIndex;
};

var traverseWithIndexDefault = function traverseWithIndexDefault(dictTraversableWithIndex) {
  return function (dictApplicative) {
    return function (f) {
      var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
      var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
      return function ($21) {
        return $19($20($21));
      };
    };
  };
};

var traverseWithIndex = function traverseWithIndex(dict) {
  return dict.traverseWithIndex;
};

var traverseDefault = function traverseDefault(dictTraversableWithIndex) {
  return function (dictApplicative) {
    return function (f) {
      return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
    };
  };
};

var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function () {
  return Data_Traversable.traversableMultiplicative;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function () {
  return Data_Traversable.traversableMaybe;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexLast = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexLast;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexLast;
}, function () {
  return Data_Traversable.traversableLast;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexFirst = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexFirst;
}, function () {
  return Data_Traversable.traversableFirst;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexDual = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexDual;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexDual;
}, function () {
  return Data_Traversable.traversableDual;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexDisj = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexDisj;
}, function () {
  return Data_Traversable.traversableDisj;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexConj = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexConj;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexConj;
}, function () {
  return Data_Traversable.traversableConj;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
  };
});
var traversableWithIndexArray = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexArray;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexArray;
}, function () {
  return Data_Traversable.traversableArray;
}, function (dictApplicative) {
  return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function () {
  return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function () {
  return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function () {
  return Data_Traversable.traversableAdditive;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
  };
});

var mapAccumRWithIndex = function mapAccumRWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
          return function (a) {
            return function (s) {
              return f(i)(s)(a);
            };
          };
        })(xs))(s0);
      };
    };
  };
};

var scanrWithIndex = function scanrWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
          return function (b) {
            return function (a) {
              var b$prime = f(i)(a)(b);
              return {
                accum: b$prime,
                value: b$prime
              };
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var mapAccumLWithIndex = function mapAccumLWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (s0) {
      return function (xs) {
        return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
          return function (a) {
            return function (s) {
              return f(i)(s)(a);
            };
          };
        })(xs))(s0);
      };
    };
  };
};

var scanlWithIndex = function scanlWithIndex(dictTraversableWithIndex) {
  return function (f) {
    return function (b0) {
      return function (xs) {
        return mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
          return function (b) {
            return function (a) {
              var b$prime = f(i)(b)(a);
              return {
                accum: b$prime,
                value: b$prime
              };
            };
          };
        })(b0)(xs).value;
      };
    };
  };
};

var forWithIndex = function forWithIndex(dictApplicative) {
  return function (dictTraversableWithIndex) {
    return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
  };
};

module.exports = {
  TraversableWithIndex: TraversableWithIndex,
  traverseWithIndex: traverseWithIndex,
  traverseWithIndexDefault: traverseWithIndexDefault,
  forWithIndex: forWithIndex,
  scanlWithIndex: scanlWithIndex,
  mapAccumLWithIndex: mapAccumLWithIndex,
  scanrWithIndex: scanrWithIndex,
  mapAccumRWithIndex: mapAccumRWithIndex,
  traverseDefault: traverseDefault,
  traversableWithIndexArray: traversableWithIndexArray,
  traversableWithIndexMaybe: traversableWithIndexMaybe,
  traversableWithIndexFirst: traversableWithIndexFirst,
  traversableWithIndexLast: traversableWithIndexLast,
  traversableWithIndexAdditive: traversableWithIndexAdditive,
  traversableWithIndexDual: traversableWithIndexDual,
  traversableWithIndexConj: traversableWithIndexConj,
  traversableWithIndexDisj: traversableWithIndexDisj,
  traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};
},{"../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Traversable.Accum.Internal/index.js":"../output/Data.Traversable.Accum.Internal/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Either/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bitraversable = require("../Data.Bitraversable/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Left = function () {
  function Left(value0) {
    this.value0 = value0;
  }

  ;

  Left.create = function (value0) {
    return new Left(value0);
  };

  return Left;
}();

var Right = function () {
  function Right(value0) {
    this.value0 = value0;
  }

  ;

  Right.create = function (value0) {
    return new Right(value0);
  };

  return Right;
}();

var showEither = function showEither(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      if (v instanceof Left) {
        return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
      }

      ;

      if (v instanceof Right) {
        return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [v.constructor.name]);
    });
  };
};

var note$prime = function note$prime(f) {
  return Data_Maybe["maybe'"](function ($198) {
    return Left.create(f($198));
  })(Right.create);
};

var note = function note(a) {
  return Data_Maybe.maybe(new Left(a))(Right.create);
};

var functorEither = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Left) {
      return new Left(m.value0);
    }

    ;

    if (m instanceof Right) {
      return new Right(f(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [m.constructor.name]);
  };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorEither;
}, function (f) {
  return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));

var fromRight = function fromRight(dictPartial) {
  return function (v) {
    if (v instanceof Right) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [v.constructor.name]);
  };
};

var fromLeft = function fromLeft(dictPartial) {
  return function (v) {
    if (v instanceof Left) {
      return v.value0;
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [v.constructor.name]);
  };
};

var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Left) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Right) {
        return f(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableEither;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof Left) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof Right) {
        return f(Data_Unit.unit)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [f.constructor.name, v.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(Data_Unit.unit)(z)(v1.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
}, function (v) {
  return function (z) {
    return function (v1) {
      if (v1 instanceof Left) {
        return z;
      }

      ;

      if (v1 instanceof Right) {
        return v(Data_Unit.unit)(v1.value0)(z);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableEither = new Data_Traversable.Traversable(function () {
  return foldableEither;
}, function () {
  return functorEither;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Left) {
      return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Left) {
        return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
      }

      ;

      if (v1 instanceof Right) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexEither;
}, function () {
  return functorWithIndexEither;
}, function () {
  return traversableEither;
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Left) {
        return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
      }

      ;

      if (v1 instanceof Right) {
        return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 219, column 53): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var extendEither = new Control_Extend.Extend(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Left) {
      return new Left(v1.value0);
    }

    ;
    return new Right(v(v1));
  };
});

var eqEither = function eqEither(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        if (x instanceof Left && y instanceof Left) {
          return Data_Eq.eq(dictEq)(x.value0)(y.value0);
        }

        ;

        if (x instanceof Right && y instanceof Right) {
          return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
        }

        ;
        return false;
      };
    });
  };
};

var ordEither = function ordEither(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        if (x instanceof Left && y instanceof Left) {
          return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
        }

        ;

        if (x instanceof Left) {
          return Data_Ordering.LT.value;
        }

        ;

        if (y instanceof Left) {
          return Data_Ordering.GT.value;
        }

        ;

        if (x instanceof Right && y instanceof Right) {
          return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 179, column 1 - line 179, column 64): " + [x.constructor.name, y.constructor.name]);
      };
    });
  };
};

var eq1Either = function eq1Either(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqEither(dictEq)(dictEq1));
  });
};

var ord1Either = function ord1Either(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Either(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
  });
};

var either = function either(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Left) {
        return v(v2.value0);
      }

      ;

      if (v2 instanceof Right) {
        return v1(v2.value0);
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));

var choose = function choose(dictAlt) {
  return function (a) {
    return function (b) {
      return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
    };
  };
};

var boundedEither = function boundedEither(dictBounded) {
  return function (dictBounded1) {
    return new Data_Bounded.Bounded(function () {
      return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
    }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
  };
};

var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Left) {
        return new Left(v(v2.value0));
      }

      ;

      if (v2 instanceof Right) {
        return new Right(v1(v2.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
  return function (v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }

        ;

        if (v2 instanceof Right) {
          return v1(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
}, function (v) {
  return function (v1) {
    return function (z) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(z)(v2.value0);
        }

        ;

        if (v2 instanceof Right) {
          return v1(z)(v2.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
      };
    };
  };
}, function (v) {
  return function (v1) {
    return function (z) {
      return function (v2) {
        if (v2 instanceof Left) {
          return v(v2.value0)(z);
        }

        ;

        if (v2 instanceof Right) {
          return v1(v2.value0)(z);
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
      };
    };
  };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
  return bifoldableEither;
}, function () {
  return bifunctorEither;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof Left) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v.value0);
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      return function (v2) {
        if (v2 instanceof Left) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Left.create)(v(v2.value0));
        }

        ;

        if (v2 instanceof Right) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Right.create)(v1(v2.value0));
        }

        ;
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
});
var applyEither = new Control_Apply.Apply(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Left) {
      return new Left(v.value0);
    }

    ;

    if (v instanceof Right) {
      return Data_Functor.map(functorEither)(v.value0)(v1);
    }

    ;
    throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindEither = new Control_Bind.Bind(function () {
  return applyEither;
}, either(function (e) {
  return function (v) {
    return new Left(e);
  };
})(function (a) {
  return function (f) {
    return f(a);
  };
}));

var semigroupEither = function semigroupEither(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (x) {
    return function (y) {
      return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
    };
  });
};

var applicativeEither = new Control_Applicative.Applicative(function () {
  return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
  return applicativeEither;
}, function () {
  return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
  return functorEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Left) {
      return v1;
    }

    ;
    return v;
  };
});
module.exports = {
  Left: Left,
  Right: Right,
  either: either,
  choose: choose,
  isLeft: isLeft,
  isRight: isRight,
  fromLeft: fromLeft,
  fromRight: fromRight,
  note: note,
  "note'": note$prime,
  hush: hush,
  functorEither: functorEither,
  functorWithIndexEither: functorWithIndexEither,
  invariantEither: invariantEither,
  bifunctorEither: bifunctorEither,
  applyEither: applyEither,
  applicativeEither: applicativeEither,
  altEither: altEither,
  bindEither: bindEither,
  monadEither: monadEither,
  extendEither: extendEither,
  showEither: showEither,
  eqEither: eqEither,
  eq1Either: eq1Either,
  ordEither: ordEither,
  ord1Either: ord1Either,
  boundedEither: boundedEither,
  foldableEither: foldableEither,
  foldableWithIndexEither: foldableWithIndexEither,
  bifoldableEither: bifoldableEither,
  traversableEither: traversableEither,
  traversableWithIndexEither: traversableWithIndexEither,
  bitraversableEither: bitraversableEither,
  semigroupEither: semigroupEither
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Bifoldable/index.js":"../output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Bitraversable/index.js":"../output/Data.Bitraversable/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"../output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Effect/foreign.js":[function(require,module,exports) {
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f()) {
      ;
    }

    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }

      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};
},{}],"../output/Effect/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var monadEffect = new Control_Monad.Monad(function () {
  return applicativeEffect;
}, function () {
  return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function () {
  return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function () {
  return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function () {
  return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));

var semigroupEffect = function semigroupEffect(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};

var monoidEffect = function monoidEffect(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupEffect(dictMonoid.Semigroup0());
  }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};

module.exports = {
  functorEffect: functorEffect,
  applyEffect: applyEffect,
  applicativeEffect: applicativeEffect,
  bindEffect: bindEffect,
  monadEffect: monadEffect,
  semigroupEffect: semigroupEffect,
  monoidEffect: monoidEffect,
  untilE: $foreign.untilE,
  whileE: $foreign.whileE,
  forE: $foreign.forE,
  foreachE: $foreign.foreachE
};
},{"./foreign.js":"../output/Effect/foreign.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js"}],"../output/Effect.Exception/foreign.js":[function(require,module,exports) {
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.name = function (e) {
  return e.name || "Error";
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};
},{}],"../output/Effect.Exception/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Effect = require("../Effect/index.js");

var $$try = function $$try(action) {
  return $foreign.catchException(function () {
    var $0 = Control_Applicative.pure(Effect.applicativeEffect);
    return function ($1) {
      return $0(Data_Either.Left.create($1));
    };
  }())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};

var $$throw = function $$throw($2) {
  return $foreign.throwException($foreign.error($2));
};

var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
  stack: stack,
  "throw": $$throw,
  "try": $$try,
  showError: showError,
  error: $foreign.error,
  message: $foreign.message,
  name: $foreign.name,
  throwException: $foreign.throwException,
  catchException: $foreign.catchException
};
},{"./foreign.js":"../output/Effect.Exception/foreign.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Effect/index.js":"../output/Effect/index.js"}],"../output/Control.Monad.Error.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var MonadThrow = function MonadThrow(Monad0, throwError) {
  this.Monad0 = Monad0;
  this.throwError = throwError;
};

var MonadError = function MonadError(MonadThrow0, catchError) {
  this.MonadThrow0 = MonadThrow0;
  this.catchError = catchError;
};

var throwError = function throwError(dict) {
  return dict.throwError;
};

var monadThrowMaybe = new MonadThrow(function () {
  return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function () {
  return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function () {
  return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function () {
  return monadThrowMaybe;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Maybe.Nothing) {
      return v1(Data_Unit.unit);
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return new Data_Maybe.Just(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [v.constructor.name, v1.constructor.name]);
  };
});
var monadErrorEither = new MonadError(function () {
  return monadThrowEither;
}, function (v) {
  return function (v1) {
    if (v instanceof Data_Either.Left) {
      return v1(v.value0);
    }

    ;

    if (v instanceof Data_Either.Right) {
      return new Data_Either.Right(v.value0);
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [v.constructor.name, v1.constructor.name]);
  };
});
var monadErrorEffect = new MonadError(function () {
  return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));

var catchError = function catchError(dict) {
  return dict.catchError;
};

var catchJust = function catchJust(dictMonadError) {
  return function (p) {
    return function (act) {
      return function (handler) {
        var handle = function handle(e) {
          var v = p(e);

          if (v instanceof Data_Maybe.Nothing) {
            return throwError(dictMonadError.MonadThrow0())(e);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return handler(v.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [v.constructor.name]);
        };

        return catchError(dictMonadError)(act)(handle);
      };
    };
  };
};

var $$try = function $$try(dictMonadError) {
  return function (a) {
    return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function () {
      var $17 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
      return function ($18) {
        return $17(Data_Either.Left.create($18));
      };
    }());
  };
};

var withResource = function withResource(dictMonadError) {
  return function (acquire) {
    return function (release) {
      return function (kleisli) {
        return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())(acquire)(function (resource) {
          return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())($$try(dictMonadError)(kleisli(resource)))(function (result) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadError.MonadThrow0().Monad0().Bind1())(release(resource))(function () {
              return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0()))(result);
            });
          });
        });
      };
    };
  };
};

module.exports = {
  catchError: catchError,
  throwError: throwError,
  MonadThrow: MonadThrow,
  MonadError: MonadError,
  catchJust: catchJust,
  "try": $$try,
  withResource: withResource,
  monadThrowEither: monadThrowEither,
  monadErrorEither: monadErrorEither,
  monadThrowMaybe: monadThrowMaybe,
  monadErrorMaybe: monadErrorMaybe,
  monadThrowEffect: monadThrowEffect,
  monadErrorEffect: monadErrorEffect
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Exception/index.js":"../output/Effect.Exception/index.js"}],"../output/Control.Comonad/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Comonad = function Comonad(Extend0, extract) {
  this.Extend0 = Extend0;
  this.extract = extract;
};

var extract = function extract(dict) {
  return dict.extract;
};

module.exports = {
  Comonad: Comonad,
  extract: extract
};
},{}],"../output/Data.Ord.Max/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Max = function Max(x) {
  return x;
};

var showMax = function showMax(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Max " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMax = function semigroupMax(dictOrd) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Ord.max(dictOrd)(v)(v1);
    };
  });
};

var newtypeMax = new Data_Newtype.Newtype(function (n) {
  return n;
}, Max);

var monoidMax = function monoidMax(dictBounded) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMax(dictBounded.Ord0());
  }, Data_Bounded.bottom(dictBounded));
};

var eqMax = function eqMax(dictEq) {
  return dictEq;
};

var ordMax = function ordMax(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMax(dictOrd.Eq0());
  }, function (v) {
    return function (v1) {
      return Data_Ord.compare(dictOrd)(v)(v1);
    };
  });
};

module.exports = {
  Max: Max,
  newtypeMax: newtypeMax,
  eqMax: eqMax,
  ordMax: ordMax,
  semigroupMax: semigroupMax,
  monoidMax: monoidMax,
  showMax: showMax
};
},{"../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Ord.Min/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Min = function Min(x) {
  return x;
};

var showMin = function showMin(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Min " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupMin = function semigroupMin(dictOrd) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Data_Ord.min(dictOrd)(v)(v1);
    };
  });
};

var newtypeMin = new Data_Newtype.Newtype(function (n) {
  return n;
}, Min);

var monoidMin = function monoidMin(dictBounded) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMin(dictBounded.Ord0());
  }, Data_Bounded.top(dictBounded));
};

var eqMin = function eqMin(dictEq) {
  return dictEq;
};

var ordMin = function ordMin(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqMin(dictOrd.Eq0());
  }, function (v) {
    return function (v1) {
      return Data_Ord.compare(dictOrd)(v)(v1);
    };
  });
};

module.exports = {
  Min: Min,
  newtypeMin: newtypeMin,
  eqMin: eqMin,
  ordMin: ordMin,
  semigroupMin: semigroupMin,
  monoidMin: monoidMin,
  showMin: showMin
};
},{"../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Semigroup.Foldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord_Max = require("../Data.Ord.Max/index.js");

var Data_Ord_Min = require("../Data.Ord.Min/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var JoinWith = function JoinWith(x) {
  return x;
};

var Act = function Act(x) {
  return x;
};

var Foldable1 = function Foldable1(Foldable0, fold1, foldMap1) {
  this.Foldable0 = Foldable0;
  this.fold1 = fold1;
  this.foldMap1 = foldMap1;
};

var semigroupJoinWith = function semigroupJoinWith(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return JoinWith(function (j) {
        return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
      });
    };
  });
};

var semigroupAct = function semigroupAct(dictApply) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return Control_Apply.applySecond(dictApply)(v)(v1);
    };
  });
};

var joinee = function joinee(v) {
  return v;
};

var getAct = function getAct(v) {
  return v;
};

var foldMap1 = function foldMap1(dict) {
  return dict.foldMap1;
};

var intercalateMap = function intercalateMap(dictFoldable1) {
  return function (dictSemigroup) {
    return function (j) {
      return function (f) {
        return function (foldable) {
          return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
            return JoinWith(Data_Function["const"](f($43)));
          })(foldable))(j);
        };
      };
    };
  };
};

var intercalate = function intercalate(dictFoldable1) {
  return function (dictSemigroup) {
    return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
  };
};

var maximum = function maximum(dictOrd) {
  return function (dictFoldable1) {
    return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
  };
};

var minimum = function minimum(dictOrd) {
  return function (dictFoldable1) {
    return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
  };
};

var traverse1_ = function traverse1_(dictFoldable1) {
  return function (dictApply) {
    return function (f) {
      return function (t) {
        return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
          return Act(f($44));
        })(t)));
      };
    };
  };
};

var for1_ = function for1_(dictFoldable1) {
  return function (dictApply) {
    return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
  };
};

var sequence1_ = function sequence1_(dictFoldable1) {
  return function (dictApply) {
    return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var fold1Default = function fold1Default(dictFoldable1) {
  return function (dictSemigroup) {
    return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var foldableDual = new Foldable1(function () {
  return Data_Foldable.foldableDual;
}, function (dictSemigroup) {
  return fold1Default(foldableDual)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});
var foldableMultiplicative = new Foldable1(function () {
  return Data_Foldable.foldableMultiplicative;
}, function (dictSemigroup) {
  return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});

var fold1 = function fold1(dict) {
  return dict.fold1;
};

var foldMap1Default = function foldMap1Default(dictFoldable1) {
  return function (dictFunctor) {
    return function (dictSemigroup) {
      return function (f) {
        var $45 = fold1(dictFoldable1)(dictSemigroup);
        var $46 = Data_Functor.map(dictFunctor)(f);
        return function ($47) {
          return $45($46($47));
        };
      };
    };
  };
};

module.exports = {
  Foldable1: Foldable1,
  foldMap1: foldMap1,
  fold1: fold1,
  traverse1_: traverse1_,
  for1_: for1_,
  sequence1_: sequence1_,
  foldMap1Default: foldMap1Default,
  fold1Default: fold1Default,
  intercalate: intercalate,
  intercalateMap: intercalateMap,
  maximum: maximum,
  minimum: minimum,
  foldableDual: foldableDual,
  foldableMultiplicative: foldableMultiplicative
};
},{"../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord.Max/index.js":"../output/Data.Ord.Max/index.js","../Data.Ord.Min/index.js":"../output/Data.Ord.Min/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Semigroup.Traversable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");

var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Traversable1 = function Traversable1(Foldable10, _Traversable, sequence1, traverse1) {
  this.Foldable10 = Foldable10;
  this.Traversable1 = _Traversable;
  this.sequence1 = sequence1;
  this.traverse1 = traverse1;
};

var traverse1 = function traverse1(dict) {
  return dict.traverse1;
};

var sequence1Default = function sequence1Default(dictTraversable1) {
  return function (dictApply) {
    return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var traversableDual = new Traversable1(function () {
  return Data_Semigroup_Foldable.foldableDual;
}, function () {
  return Data_Traversable.traversableDual;
}, function (dictApply) {
  return sequence1Default(traversableDual)(dictApply);
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
    };
  };
});
var traversableMultiplicative = new Traversable1(function () {
  return Data_Semigroup_Foldable.foldableMultiplicative;
}, function () {
  return Data_Traversable.traversableMultiplicative;
}, function (dictApply) {
  return sequence1Default(traversableMultiplicative)(dictApply);
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
    };
  };
});

var sequence1 = function sequence1(dict) {
  return dict.sequence1;
};

var traverse1Default = function traverse1Default(dictTraversable1) {
  return function (dictApply) {
    return function (f) {
      return function (ta) {
        return sequence1(dictTraversable1)(dictApply)(Data_Functor.map(dictTraversable1.Traversable1().Functor0())(f)(ta));
      };
    };
  };
};

module.exports = {
  sequence1: sequence1,
  traverse1: traverse1,
  Traversable1: Traversable1,
  traverse1Default: traverse1Default,
  sequence1Default: sequence1Default,
  traversableDual: traversableDual,
  traversableMultiplicative: traversableMultiplicative
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid.Dual/index.js":"../output/Data.Monoid.Dual/index.js","../Data.Monoid.Multiplicative/index.js":"../output/Data.Monoid.Multiplicative/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js"}],"../output/Data.Identity/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Identity = function Identity(x) {
  return x;
};

var showIdentity = function showIdentity(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semiringIdentity = function semiringIdentity(dictSemiring) {
  return dictSemiring;
};

var semigroupIdenity = function semigroupIdenity(dictSemigroup) {
  return dictSemigroup;
};

var ringIdentity = function ringIdentity(dictRing) {
  return dictRing;
};

var ordIdentity = function ordIdentity(dictOrd) {
  return dictOrd;
};

var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
  return n;
}, Identity);

var monoidIdentity = function monoidIdentity(dictMonoid) {
  return dictMonoid;
};

var lazyIdentity = function lazyIdentity(dictLazy) {
  return dictLazy;
};

var heytingAlgebraIdentity = function heytingAlgebraIdentity(dictHeytingAlgebra) {
  return dictHeytingAlgebra;
};

var functorIdentity = new Data_Functor.Functor(function (f) {
  return function (m) {
    return f(m);
  };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorIdentity;
}, function (f) {
  return function (v) {
    return f(Data_Unit.unit)(v);
  };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v)(z);
    };
  };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableIdentity;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(Data_Unit.unit)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(z)(v);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(v)(z);
    };
  };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
  return foldableIdentity;
}, function () {
  return functorIdentity;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(v);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(v));
    };
  };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexIdentity;
}, function () {
  return functorWithIndexIdentity;
}, function () {
  return traversableIdentity;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Identity)(f(Data_Unit.unit)(v));
    };
  };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableIdentity;
}, function (dictSemigroup) {
  return function (v) {
    return v;
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v);
    };
  };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Identity;
}, function () {
  return traversableIdentity;
}, function (dictApply) {
  return function (v) {
    return Data_Functor.map(dictApply.Functor0())(Identity)(v);
  };
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
    };
  };
});
var extendIdentity = new Control_Extend.Extend(function () {
  return functorIdentity;
}, function (f) {
  return function (m) {
    return f(m);
  };
});

var euclideanRingIdentity = function euclideanRingIdentity(dictEuclideanRing) {
  return dictEuclideanRing;
};

var eqIdentity = function eqIdentity(dictEq) {
  return dictEq;
};

var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
  return eq1Identity;
}, function (dictOrd) {
  return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
  return extendIdentity;
}, function (v) {
  return v;
});

var commutativeRingIdentity = function commutativeRingIdentity(dictCommutativeRing) {
  return dictCommutativeRing;
};

var boundedIdentity = function boundedIdentity(dictBounded) {
  return dictBounded;
};

var booleanAlgebraIdentity = function booleanAlgebraIdentity(dictBooleanAlgebra) {
  return dictBooleanAlgebra;
};

var applyIdentity = new Control_Apply.Apply(function () {
  return functorIdentity;
}, function (v) {
  return function (v1) {
    return v(v1);
  };
});
var bindIdentity = new Control_Bind.Bind(function () {
  return applyIdentity;
}, function (v) {
  return function (f) {
    return f(v);
  };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
  return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
  return applicativeIdentity;
}, function () {
  return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
  return functorIdentity;
}, function (x) {
  return function (v) {
    return x;
  };
});
module.exports = {
  Identity: Identity,
  newtypeIdentity: newtypeIdentity,
  eqIdentity: eqIdentity,
  ordIdentity: ordIdentity,
  boundedIdentity: boundedIdentity,
  heytingAlgebraIdentity: heytingAlgebraIdentity,
  booleanAlgebraIdentity: booleanAlgebraIdentity,
  semigroupIdenity: semigroupIdenity,
  monoidIdentity: monoidIdentity,
  semiringIdentity: semiringIdentity,
  euclideanRingIdentity: euclideanRingIdentity,
  ringIdentity: ringIdentity,
  commutativeRingIdentity: commutativeRingIdentity,
  lazyIdentity: lazyIdentity,
  showIdentity: showIdentity,
  eq1Identity: eq1Identity,
  ord1Identity: ord1Identity,
  functorIdentity: functorIdentity,
  functorWithIndexIdentity: functorWithIndexIdentity,
  invariantIdentity: invariantIdentity,
  altIdentity: altIdentity,
  applyIdentity: applyIdentity,
  applicativeIdentity: applicativeIdentity,
  bindIdentity: bindIdentity,
  monadIdentity: monadIdentity,
  extendIdentity: extendIdentity,
  comonadIdentity: comonadIdentity,
  foldableIdentity: foldableIdentity,
  foldable1Identity: foldable1Identity,
  foldableWithIndexIdentity: foldableWithIndexIdentity,
  traversableIdentity: traversableIdentity,
  traversable1Identity: traversable1Identity,
  traversableWithIndexIdentity: traversableWithIndexIdentity
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Comonad/index.js":"../output/Control.Comonad/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"../output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Effect.Ref/foreign.js":[function(require,module,exports) {
"use strict";

exports.new = function (val) {
  return function () {
    return {
      value: val
    };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (val) {
  return function (ref) {
    return function () {
      ref.value = val;
      return {};
    };
  };
};
},{}],"../output/Effect.Ref/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Effect = require("../Effect/index.js");

var modify = function modify(f) {
  return $foreign["modify'"](function (s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};

var modify_ = function modify_(f) {
  return function (s) {
    return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
  };
};

module.exports = {
  modify: modify,
  modify_: modify_,
  "new": $foreign["new"],
  read: $foreign.read,
  "modify'": $foreign["modify'"],
  write: $foreign.write
};
},{"./foreign.js":"../output/Effect.Ref/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Effect/index.js":"../output/Effect/index.js"}],"../output/Control.Monad.Rec.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Loop = function () {
  function Loop(value0) {
    this.value0 = value0;
  }

  ;

  Loop.create = function (value0) {
    return new Loop(value0);
  };

  return Loop;
}();

var Done = function () {
  function Done(value0) {
    this.value0 = value0;
  }

  ;

  Done.create = function (value0) {
    return new Done(value0);
  };

  return Done;
}();

var MonadRec = function MonadRec(Monad0, tailRecM) {
  this.Monad0 = Monad0;
  this.tailRecM = tailRecM;
};

var tailRecM = function tailRecM(dict) {
  return dict.tailRecM;
};

var tailRecM2 = function tailRecM2(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (b) {
        return tailRecM(dictMonadRec)(function (o) {
          return f(o.a)(o.b);
        })({
          a: a,
          b: b
        });
      };
    };
  };
};

var tailRecM3 = function tailRecM3(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (b) {
        return function (c) {
          return tailRecM(dictMonadRec)(function (o) {
            return f(o.a)(o.b)(o.c);
          })({
            a: a,
            b: b,
            c: c
          });
        };
      };
    };
  };
};

var untilJust = function untilJust(dictMonadRec) {
  return function (m) {
    return tailRecM(dictMonadRec)(function (v) {
      return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return new Loop(Data_Unit.unit);
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return new Done(v1.value0);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [v1.constructor.name]);
      });
    })(Data_Unit.unit);
  };
};

var whileJust = function whileJust(dictMonoid) {
  return function (dictMonadRec) {
    return function (m) {
      return tailRecM(dictMonadRec)(function (v) {
        return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function (v1) {
          if (v1 instanceof Data_Maybe.Nothing) {
            return new Done(v);
          }

          ;

          if (v1 instanceof Data_Maybe.Just) {
            return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [v1.constructor.name]);
        });
      })(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var tailRec = function tailRec(f) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Loop) {
        $copy_v = f(v.value0);
        return;
      }

      ;

      if (v instanceof Done) {
        $tco_done = true;
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($58) {
    return go(f($58));
  };
};

var monadRecMaybe = new MonadRec(function () {
  return Data_Maybe.monadMaybe;
}, function (f) {
  return function (a0) {
    var g = function g(v) {
      if (v instanceof Data_Maybe.Nothing) {
        return new Done(Data_Maybe.Nothing.value);
      }

      ;

      if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
        return new Loop(f(v.value0.value0));
      }

      ;

      if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
        return new Done(new Data_Maybe.Just(v.value0.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [v.constructor.name]);
    };

    return tailRec(g)(f(a0));
  };
});
var monadRecIdentity = new MonadRec(function () {
  return Data_Identity.monadIdentity;
}, function (f) {
  var runIdentity = function runIdentity(v) {
    return v;
  };

  var $59 = tailRec(function ($61) {
    return runIdentity(f($61));
  });
  return function ($60) {
    return Data_Identity.Identity($59($60));
  };
});
var monadRecFunction = new MonadRec(function () {
  return Control_Monad.monadFn;
}, function (f) {
  return function (a0) {
    return function (e) {
      return tailRec(function (a) {
        return f(a)(e);
      })(a0);
    };
  };
});
var monadRecEither = new MonadRec(function () {
  return Data_Either.monadEither;
}, function (f) {
  return function (a0) {
    var g = function g(v) {
      if (v instanceof Data_Either.Left) {
        return new Done(new Data_Either.Left(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
        return new Loop(f(v.value0.value0));
      }

      ;

      if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
        return new Done(new Data_Either.Right(v.value0.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [v.constructor.name]);
    };

    return tailRec(g)(f(a0));
  };
});
var monadRecEffect = new MonadRec(function () {
  return Effect.monadEffect;
}, function (f) {
  return function (a) {
    var fromDone = function fromDone(v) {
      if (v instanceof Done) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v.constructor.name]);
    };

    return function __do() {
      var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();

      (function () {
        while (!function __do() {
          var v = Effect_Ref.read(r)();

          if (v instanceof Loop) {
            var e = f(v.value0)();
            Effect_Ref.write(e)(r)();
            return false;
          }

          ;

          if (v instanceof Done) {
            return true;
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v.constructor.name]);
        }()) {}

        ;
        return {};
      })();

      return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
    };
  };
});
var functorStep = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Loop) {
      return new Loop(m.value0);
    }

    ;

    if (m instanceof Done) {
      return new Done(f(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [m.constructor.name]);
  };
});

var forever = function forever(dictMonadRec) {
  return function (ma) {
    return tailRecM(dictMonadRec)(function (u) {
      return Data_Functor.voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(new Loop(u))(ma);
    })(Data_Unit.unit);
  };
};

var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Loop) {
        return new Loop(v(v2.value0));
      }

      ;

      if (v2 instanceof Done) {
        return new Done(v1(v2.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
});
module.exports = {
  Loop: Loop,
  Done: Done,
  MonadRec: MonadRec,
  tailRec: tailRec,
  tailRecM: tailRecM,
  tailRecM2: tailRecM2,
  tailRecM3: tailRecM3,
  forever: forever,
  whileJust: whileJust,
  untilJust: untilJust,
  functorStep: functorStep,
  bifunctorStep: bifunctorStep,
  monadRecIdentity: monadRecIdentity,
  monadRecEffect: monadRecEffect,
  monadRecFunction: monadRecFunction,
  monadRecEither: monadRecEither,
  monadRecMaybe: monadRecMaybe
};
},{"../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Identity/index.js":"../output/Data.Identity/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js"}],"../output/Control.Monad.Cont.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MonadCont = function MonadCont(Monad0, callCC) {
  this.Monad0 = Monad0;
  this.callCC = callCC;
};

var callCC = function callCC(dict) {
  return dict.callCC;
};

module.exports = {
  MonadCont: MonadCont,
  callCC: callCC
};
},{}],"../output/Control.Monad.Reader.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var MonadAsk = function MonadAsk(Monad0, ask) {
  this.Monad0 = Monad0;
  this.ask = ask;
};

var MonadReader = function MonadReader(MonadAsk0, local) {
  this.MonadAsk0 = MonadAsk0;
  this.local = local;
};

var monadAskFun = new MonadAsk(function () {
  return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
  return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));

var local = function local(dict) {
  return dict.local;
};

var ask = function ask(dict) {
  return dict.ask;
};

var asks = function asks(dictMonadAsk) {
  return function (f) {
    return Data_Functor.map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0())(f)(ask(dictMonadAsk));
  };
};

module.exports = {
  ask: ask,
  local: local,
  MonadAsk: MonadAsk,
  asks: asks,
  MonadReader: MonadReader,
  monadAskFun: monadAskFun,
  monadReaderFun: monadReaderFun
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js"}],"../output/Data.BooleanAlgebra/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var BooleanAlgebraRecord = function BooleanAlgebraRecord(HeytingAlgebraRecord0) {
  this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};

var BooleanAlgebra = function BooleanAlgebra(HeytingAlgebra0) {
  this.HeytingAlgebra0 = HeytingAlgebra0;
};

var booleanAlgebraUnit = new BooleanAlgebra(function () {
  return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
  return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});

var booleanAlgebraRecordCons = function booleanAlgebraRecordCons(dictIsSymbol) {
  return function (dictCons) {
    return function (dictBooleanAlgebraRecord) {
      return function (dictBooleanAlgebra) {
        return new BooleanAlgebraRecord(function () {
          return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
        });
      };
    };
  };
};

var booleanAlgebraRecord = function booleanAlgebraRecord(dictRowToList) {
  return function (dictBooleanAlgebraRecord) {
    return new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraRecord()(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
    });
  };
};

var booleanAlgebraFn = function booleanAlgebraFn(dictBooleanAlgebra) {
  return new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
  });
};

var booleanAlgebraBoolean = new BooleanAlgebra(function () {
  return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
  BooleanAlgebra: BooleanAlgebra,
  BooleanAlgebraRecord: BooleanAlgebraRecord,
  booleanAlgebraBoolean: booleanAlgebraBoolean,
  booleanAlgebraUnit: booleanAlgebraUnit,
  booleanAlgebraFn: booleanAlgebraFn,
  booleanAlgebraRecord: booleanAlgebraRecord,
  booleanAlgebraRecordNil: booleanAlgebraRecordNil,
  booleanAlgebraRecordCons: booleanAlgebraRecordCons
};
},{"../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js"}],"../output/Data.Distributive/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Identity = require("../Data.Identity/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Distributive = function Distributive(Functor0, collect, distribute) {
  this.Functor0 = Functor0;
  this.collect = collect;
  this.distribute = distribute;
};

var distributiveIdentity = new Distributive(function () {
  return Data_Identity.functorIdentity;
}, function (dictFunctor) {
  return function (f) {
    var $11 = Data_Functor.map(dictFunctor)(function () {
      var $13 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($14) {
        return $13(f($14));
      };
    }());
    return function ($12) {
      return Data_Identity.Identity($11($12));
    };
  };
}, function (dictFunctor) {
  var $15 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
  return function ($16) {
    return Data_Identity.Identity($15($16));
  };
});

var distribute = function distribute(dict) {
  return dict.distribute;
};

var distributiveFunction = new Distributive(function () {
  return Data_Functor.functorFn;
}, function (dictFunctor) {
  return function (f) {
    var $17 = distribute(distributiveFunction)(dictFunctor);
    var $18 = Data_Functor.map(dictFunctor)(f);
    return function ($19) {
      return $17($18($19));
    };
  };
}, function (dictFunctor) {
  return function (a) {
    return function (e) {
      return Data_Functor.map(dictFunctor)(function (v) {
        return v(e);
      })(a);
    };
  };
});

var cotraverse = function cotraverse(dictDistributive) {
  return function (dictFunctor) {
    return function (f) {
      var $20 = Data_Functor.map(dictDistributive.Functor0())(f);
      var $21 = distribute(dictDistributive)(dictFunctor);
      return function ($22) {
        return $20($21($22));
      };
    };
  };
};

var collectDefault = function collectDefault(dictDistributive) {
  return function (dictFunctor) {
    return function (f) {
      var $23 = distribute(dictDistributive)(dictFunctor);
      var $24 = Data_Functor.map(dictFunctor)(f);
      return function ($25) {
        return $23($24($25));
      };
    };
  };
};

var collect = function collect(dict) {
  return dict.collect;
};

var distributeDefault = function distributeDefault(dictDistributive) {
  return function (dictFunctor) {
    return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
};

module.exports = {
  collect: collect,
  distribute: distribute,
  Distributive: Distributive,
  distributeDefault: distributeDefault,
  collectDefault: collectDefault,
  cotraverse: cotraverse,
  distributiveIdentity: distributiveIdentity,
  distributiveFunction: distributiveFunction
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Identity/index.js":"../output/Data.Identity/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js"}],"../output/Type.Equality/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var TypeEquals = function TypeEquals(from, to) {
  this.from = from;
  this.to = to;
};

var to = function to(dict) {
  return dict.to;
};

var refl = new TypeEquals(function (a) {
  return a;
}, function (a) {
  return a;
});

var from = function from(dict) {
  return dict.from;
};

module.exports = {
  TypeEquals: TypeEquals,
  to: to,
  from: from,
  refl: refl
};
},{}],"../output/Data.Tuple/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Biapplicative = require("../Control.Biapplicative/index.js");

var Control_Biapply = require("../Control.Biapply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_Bifoldable = require("../Data.Bifoldable/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Bitraversable = require("../Data.Bitraversable/index.js");

var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Maybe_First = require("../Data.Maybe.First/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Type_Equality = require("../Type.Equality/index.js");

var Tuple = function () {
  function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Tuple.create = function (value0) {
    return function (value1) {
      return new Tuple(value0, value1);
    };
  };

  return Tuple;
}();

var uncurry = function uncurry(f) {
  return function (v) {
    return f(v.value0)(v.value1);
  };
};

var swap = function swap(v) {
  return new Tuple(v.value1, v.value0);
};

var snd = function snd(v) {
  return v.value1;
};

var showTuple = function showTuple(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var semiringTuple = function semiringTuple(dictSemiring) {
  return function (dictSemiring1) {
    return new Data_Semiring.Semiring(function (v) {
      return function (v1) {
        return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
      };
    }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
  };
};

var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
  return function (v1) {
    return new Tuple(v1.value0, v.value1);
  };
});

var semigroupTuple = function semigroupTuple(dictSemigroup) {
  return function (dictSemigroup1) {
    return new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
        return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
      };
    });
  };
};

var ringTuple = function ringTuple(dictRing) {
  return function (dictRing1) {
    return new Data_Ring.Ring(function () {
      return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
      };
    });
  };
};

var monoidTuple = function monoidTuple(dictMonoid) {
  return function (dictMonoid1) {
    return new Data_Monoid.Monoid(function () {
      return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
    }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
  };
};

var lookup = function lookup(dictFoldable) {
  return function (dictEq) {
    return function (a) {
      var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
      var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
        var $163 = Data_Eq.eq(dictEq)(a)(v.value0);

        if ($163) {
          return new Data_Maybe.Just(v.value1);
        }

        ;
        return Data_Maybe.Nothing.value;
      });
      return function ($314) {
        return $312($313($314));
      };
    };
  };
};

var heytingAlgebraTuple = function heytingAlgebraTuple(dictHeytingAlgebra) {
  return function (dictHeytingAlgebra1) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
      return function (v1) {
        return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
      };
    }, function (v) {
      return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
    }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
  };
};

var functorTuple = new Data_Functor.Functor(function (f) {
  return function (m) {
    return new Tuple(m.value0, f(m.value1));
  };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorTuple;
}, function (f) {
  return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));

var fst = function fst(v) {
  return v.value0;
};

var lazyTuple = function lazyTuple(dictLazy) {
  return function (dictLazy1) {
    return new Control_Lazy.Lazy(function (f) {
      return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
        return fst(f(Data_Unit.unit));
      }), Control_Lazy.defer(dictLazy1)(function (v) {
        return snd(f(Data_Unit.unit));
      }));
    });
  };
};

var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(z)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v.value1)(z);
    };
  };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableTuple;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return f(Data_Unit.unit)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(z)(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(Data_Unit.unit)(v.value1)(z);
    };
  };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
  return foldableTuple;
}, function () {
  return functorTuple;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(v.value1);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(v.value1));
    };
  };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexTuple;
}, function () {
  return functorWithIndexTuple;
}, function () {
  return traversableTuple;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
    };
  };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableTuple;
}, function (dictSemigroup) {
  return function (v) {
    return v.value1;
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return f(v.value1);
    };
  };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Tuple;
}, function () {
  return traversableTuple;
}, function (dictApply) {
  return function (v) {
    return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
  };
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
    };
  };
});
var extendTuple = new Control_Extend.Extend(function () {
  return functorTuple;
}, function (f) {
  return function (v) {
    return new Tuple(v.value0, f(v));
  };
});

var eqTuple = function eqTuple(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
      };
    });
  };
};

var ordTuple = function ordTuple(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
      };
    });
  };
};

var eq1Tuple = function eq1Tuple(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
  });
};

var ord1Tuple = function ord1Tuple(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Tuple(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
  });
};

var distributiveTuple = function distributiveTuple(dictTypeEquals) {
  return new Data_Distributive.Distributive(function () {
    return functorTuple;
  }, function (dictFunctor) {
    return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
  }, function (dictFunctor) {
    var $315 = Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
    var $316 = Data_Functor.map(dictFunctor)(snd);
    return function ($317) {
      return $315($316($317));
    };
  });
};

var curry = function curry(f) {
  return function (a) {
    return function (b) {
      return f(new Tuple(a, b));
    };
  };
};

var comonadTuple = new Control_Comonad.Comonad(function () {
  return extendTuple;
}, snd);

var commutativeRingTuple = function commutativeRingTuple(dictCommutativeRing) {
  return function (dictCommutativeRing1) {
    return new Data_CommutativeRing.CommutativeRing(function () {
      return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
    });
  };
};

var boundedTuple = function boundedTuple(dictBounded) {
  return function (dictBounded1) {
    return new Data_Bounded.Bounded(function () {
      return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
    }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
  };
};

var booleanAlgebraTuple = function booleanAlgebraTuple(dictBooleanAlgebra) {
  return function (dictBooleanAlgebra1) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function () {
      return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
    });
  };
};

var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
  return function (g) {
    return function (v) {
      return new Tuple(f(v.value0), g(v.value1));
    };
  };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
  return function (f) {
    return function (g) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
      };
    };
  };
}, function (f) {
  return function (g) {
    return function (z) {
      return function (v) {
        return g(f(z)(v.value0))(v.value1);
      };
    };
  };
}, function (f) {
  return function (g) {
    return function (z) {
      return function (v) {
        return f(v.value0)(g(v.value1)(z));
      };
    };
  };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
  return bifoldableTuple;
}, function () {
  return bifunctorTuple;
}, function (dictApplicative) {
  return function (v) {
    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(v.value0))(v.value1);
  };
}, function (dictApplicative) {
  return function (f) {
    return function (g) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
      };
    };
  };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
  return bifunctorTuple;
}, function (v) {
  return function (v1) {
    return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
  };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
  return biapplyTuple;
}, Tuple.create);

var applyTuple = function applyTuple(dictSemigroup) {
  return new Control_Apply.Apply(function () {
    return functorTuple;
  }, function (v) {
    return function (v1) {
      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
    };
  });
};

var bindTuple = function bindTuple(dictSemigroup) {
  return new Control_Bind.Bind(function () {
    return applyTuple(dictSemigroup);
  }, function (v) {
    return function (f) {
      var v1 = f(v.value1);
      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
    };
  });
};

var applicativeTuple = function applicativeTuple(dictMonoid) {
  return new Control_Applicative.Applicative(function () {
    return applyTuple(dictMonoid.Semigroup0());
  }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};

var monadTuple = function monadTuple(dictMonoid) {
  return new Control_Monad.Monad(function () {
    return applicativeTuple(dictMonoid);
  }, function () {
    return bindTuple(dictMonoid.Semigroup0());
  });
};

module.exports = {
  Tuple: Tuple,
  fst: fst,
  snd: snd,
  curry: curry,
  uncurry: uncurry,
  swap: swap,
  lookup: lookup,
  showTuple: showTuple,
  eqTuple: eqTuple,
  eq1Tuple: eq1Tuple,
  ordTuple: ordTuple,
  ord1Tuple: ord1Tuple,
  boundedTuple: boundedTuple,
  semigroupoidTuple: semigroupoidTuple,
  semigroupTuple: semigroupTuple,
  monoidTuple: monoidTuple,
  semiringTuple: semiringTuple,
  ringTuple: ringTuple,
  commutativeRingTuple: commutativeRingTuple,
  heytingAlgebraTuple: heytingAlgebraTuple,
  booleanAlgebraTuple: booleanAlgebraTuple,
  functorTuple: functorTuple,
  functorWithIndexTuple: functorWithIndexTuple,
  invariantTuple: invariantTuple,
  bifunctorTuple: bifunctorTuple,
  applyTuple: applyTuple,
  biapplyTuple: biapplyTuple,
  applicativeTuple: applicativeTuple,
  biapplicativeTuple: biapplicativeTuple,
  bindTuple: bindTuple,
  monadTuple: monadTuple,
  extendTuple: extendTuple,
  comonadTuple: comonadTuple,
  lazyTuple: lazyTuple,
  foldableTuple: foldableTuple,
  foldable1Tuple: foldable1Tuple,
  foldableWithIndexTuple: foldableWithIndexTuple,
  bifoldableTuple: bifoldableTuple,
  traversableTuple: traversableTuple,
  traversable1Tuple: traversable1Tuple,
  traversableWithIndexTuple: traversableWithIndexTuple,
  bitraversableTuple: bitraversableTuple,
  distributiveTuple: distributiveTuple
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Biapplicative/index.js":"../output/Control.Biapplicative/index.js","../Control.Biapply/index.js":"../output/Control.Biapply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Comonad/index.js":"../output/Control.Comonad/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.Bifoldable/index.js":"../output/Data.Bifoldable/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Bitraversable/index.js":"../output/Data.Bitraversable/index.js","../Data.BooleanAlgebra/index.js":"../output/Data.BooleanAlgebra/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.Distributive/index.js":"../output/Data.Distributive/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"../output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Maybe.First/index.js":"../output/Data.Maybe.First/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Type.Equality/index.js":"../output/Type.Equality/index.js"}],"../output/Control.Monad.State.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var MonadState = function MonadState(Monad0, state) {
  this.Monad0 = Monad0;
  this.state = state;
};

var state = function state(dict) {
  return dict.state;
};

var put = function put(dictMonadState) {
  return function (s) {
    return state(dictMonadState)(function (v) {
      return new Data_Tuple.Tuple(Data_Unit.unit, s);
    });
  };
};

var modify_ = function modify_(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
    });
  };
};

var modify = function modify(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      var s$prime = f(s);
      return new Data_Tuple.Tuple(s$prime, s$prime);
    });
  };
};

var gets = function gets(dictMonadState) {
  return function (f) {
    return state(dictMonadState)(function (s) {
      return new Data_Tuple.Tuple(f(s), s);
    });
  };
};

var get = function get(dictMonadState) {
  return state(dictMonadState)(function (s) {
    return new Data_Tuple.Tuple(s, s);
  });
};

module.exports = {
  state: state,
  MonadState: MonadState,
  get: get,
  gets: gets,
  put: put,
  modify: modify,
  modify_: modify_
};
},{"../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Control.Monad.Trans.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var MonadTrans = function MonadTrans(lift) {
  this.lift = lift;
};

var lift = function lift(dict) {
  return dict.lift;
};

module.exports = {
  lift: lift,
  MonadTrans: MonadTrans
};
},{}],"../output/Effect.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Effect = require("../Effect/index.js");

var MonadEffect = function MonadEffect(Monad0, liftEffect) {
  this.Monad0 = Monad0;
  this.liftEffect = liftEffect;
};

var monadEffectEffect = new MonadEffect(function () {
  return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));

var liftEffect = function liftEffect(dict) {
  return dict.liftEffect;
};

module.exports = {
  liftEffect: liftEffect,
  MonadEffect: MonadEffect,
  monadEffectEffect: monadEffectEffect
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Effect/index.js":"../output/Effect/index.js"}],"../output/Control.Monad.Cont.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ContT = function ContT(x) {
  return x;
};

var withContT = function withContT(f) {
  return function (v) {
    return function (k) {
      return v(f(k));
    };
  };
};

var runContT = function runContT(v) {
  return function (k) {
    return v(k);
  };
};

var newtypeContT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ContT);
var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(k);
    };
  };
});

var mapContT = function mapContT(f) {
  return function (v) {
    return function (k) {
      return f(v(k));
    };
  };
};

var functorContT = function functorContT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (k) {
        return v(function (a) {
          return k(f(a));
        });
      };
    };
  });
};

var applyContT = function applyContT(dictApply) {
  return new Control_Apply.Apply(function () {
    return functorContT(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return function (k) {
        return v(function (g) {
          return v1(function (a) {
            return k(g(a));
          });
        });
      };
    };
  });
};

var bindContT = function bindContT(dictBind) {
  return new Control_Bind.Bind(function () {
    return applyContT(dictBind.Apply0());
  }, function (v) {
    return function (k) {
      return function (k$prime) {
        return v(function (a) {
          var v1 = k(a);
          return v1(k$prime);
        });
      };
    };
  });
};

var applicativeContT = function applicativeContT(dictApplicative) {
  return new Control_Applicative.Applicative(function () {
    return applyContT(dictApplicative.Apply0());
  }, function (a) {
    return function (k) {
      return k(a);
    };
  });
};

var monadContT = function monadContT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeContT(dictMonad.Applicative0());
  }, function () {
    return bindContT(dictMonad.Bind1());
  });
};

var monadAskContT = function monadAskContT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadContT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderContT = function monadReaderContT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskContT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return function (v) {
      return function (k) {
        return Control_Bind.bind(dictMonadReader.MonadAsk0().Monad0().Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (r) {
          return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function () {
            var $43 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](r));
            return function ($44) {
              return $43(k($44));
            };
          }()));
        });
      };
    };
  });
};

var monadContContT = function monadContContT(dictMonad) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadContT(dictMonad);
  }, function (f) {
    return function (k) {
      var v = f(function (a) {
        return function (v1) {
          return k(a);
        };
      });
      return v(k);
    };
  });
};

var monadEffectContT = function monadEffectContT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadContT(dictMonadEffect.Monad0());
  }, function () {
    var $45 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
    var $46 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($47) {
      return $45($46($47));
    };
  }());
};

var monadStateContT = function monadStateContT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadContT(dictMonadState.Monad0());
  }, function () {
    var $48 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
    var $49 = Control_Monad_State_Class.state(dictMonadState);
    return function ($50) {
      return $48($49($50));
    };
  }());
};

module.exports = {
  ContT: ContT,
  runContT: runContT,
  mapContT: mapContT,
  withContT: withContT,
  newtypeContT: newtypeContT,
  monadContContT: monadContContT,
  functorContT: functorContT,
  applyContT: applyContT,
  applicativeContT: applicativeContT,
  bindContT: bindContT,
  monadContT: monadContT,
  monadTransContT: monadTransContT,
  monadEffectContT: monadEffectContT,
  monadAskContT: monadAskContT,
  monadReaderContT: monadReaderContT,
  monadStateContT: monadStateContT
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.Writer.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var MonadTell = function MonadTell(Monad0, tell) {
  this.Monad0 = Monad0;
  this.tell = tell;
};

var MonadWriter = function MonadWriter(MonadTell0, listen, pass) {
  this.MonadTell0 = MonadTell0;
  this.listen = listen;
  this.pass = pass;
};

var tell = function tell(dict) {
  return dict.tell;
};

var pass = function pass(dict) {
  return dict.pass;
};

var listen = function listen(dict) {
  return dict.listen;
};

var listens = function listens(dictMonadWriter) {
  return function (f) {
    return function (m) {
      return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(listen(dictMonadWriter)(m))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      });
    };
  };
};

var censor = function censor(dictMonadWriter) {
  return function (f) {
    return function (m) {
      return pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(a, f));
      }));
    };
  };
};

module.exports = {
  listen: listen,
  pass: pass,
  tell: tell,
  MonadTell: MonadTell,
  MonadWriter: MonadWriter,
  listens: listens,
  censor: censor
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js"}],"../output/Control.MonadPlus/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_MonadZero = require("../Control.MonadZero/index.js");

var MonadPlus = function MonadPlus(MonadZero0) {
  this.MonadZero0 = MonadZero0;
};

var monadPlusArray = new MonadPlus(function () {
  return Control_MonadZero.monadZeroArray;
});
module.exports = {
  MonadPlus: MonadPlus,
  monadPlusArray: monadPlusArray
};
},{"../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js"}],"../output/Control.Monad.Except.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ExceptT = function ExceptT(x) {
  return x;
};

var withExceptT = function withExceptT(dictFunctor) {
  return function (f) {
    return function (v) {
      var mapLeft = function mapLeft(v1) {
        return function (v2) {
          if (v2 instanceof Data_Either.Right) {
            return new Data_Either.Right(v2.value0);
          }

          ;

          if (v2 instanceof Data_Either.Left) {
            return new Data_Either.Left(v1(v2.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [v1.constructor.name, v2.constructor.name]);
        };
      };

      return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
    };
  };
};

var runExceptT = function runExceptT(v) {
  return v;
};

var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
    });
  };
});

var mapExceptT = function mapExceptT(f) {
  return function (v) {
    return f(v);
  };
};

var functorExceptT = function functorExceptT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
  });
};

var except = function except(dictApplicative) {
  var $88 = Control_Applicative.pure(dictApplicative);
  return function ($89) {
    return ExceptT($88($89));
  };
};

var monadExceptT = function monadExceptT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeExceptT(dictMonad);
  }, function () {
    return bindExceptT(dictMonad);
  });
};

var bindExceptT = function bindExceptT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyExceptT(dictMonad);
  }, function (v) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function () {
        var $90 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($91) {
          return $90(Data_Either.Left.create($91));
        };
      }())(function (a) {
        var v1 = k(a);
        return v1;
      }));
    };
  });
};

var applyExceptT = function applyExceptT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadExceptT(dictMonad)));
};

var applicativeExceptT = function applicativeExceptT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyExceptT(dictMonad);
  }, function () {
    var $92 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($93) {
      return ExceptT($92(Data_Either.Right.create($93)));
    };
  }());
};

var monadAskExceptT = function monadAskExceptT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadExceptT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderExceptT = function monadReaderExceptT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskExceptT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
  });
};

var monadContExceptT = function monadContExceptT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadExceptT(dictMonadCont.Monad0());
  }, function (f) {
    return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
      var v = f(function (a) {
        return ExceptT(c(new Data_Either.Right(a)));
      });
      return v;
    }));
  });
};

var monadEffectExceptT = function monadEffectExceptT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadExceptT(dictMonadEffect.Monad0());
  }, function () {
    var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
    var $95 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($96) {
      return $94($95($96));
    };
  }());
};

var monadRecExceptT = function monadRecExceptT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadExceptT(dictMonadRec.Monad0());
  }, function (f) {
    var $97 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
      var v = f(a);
      return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function (m$prime) {
        return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
          if (m$prime instanceof Data_Either.Left) {
            return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
          }

          ;

          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
          }

          ;

          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
            return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [m$prime.constructor.name]);
        }());
      });
    });
    return function ($98) {
      return ExceptT($97($98));
    };
  });
};

var monadStateExceptT = function monadStateExceptT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadExceptT(dictMonadState.Monad0());
  }, function (f) {
    return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
  });
};

var monadTellExceptT = function monadTellExceptT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadExceptT(dictMonadTell.Monad0());
  }, function () {
    var $99 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0());
    var $100 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($101) {
      return $99($100($101));
    };
  }());
};

var monadWriterExceptT = function monadWriterExceptT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellExceptT(dictMonadWriter.MonadTell0());
  }, mapExceptT(function (m) {
    return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
        return new Data_Tuple.Tuple(r, v.value1);
      })(v.value0));
    });
  }), mapExceptT(function (m) {
    return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(function () {
        if (a instanceof Data_Either.Left) {
          return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
        }

        ;

        if (a instanceof Data_Either.Right) {
          return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 45): " + [a.constructor.name]);
      }());
    }));
  }));
};

var monadThrowExceptT = function monadThrowExceptT(dictMonad) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadExceptT(dictMonad);
  }, function () {
    var $102 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($103) {
      return ExceptT($102(Data_Either.Left.create($103)));
    };
  }());
};

var monadErrorExceptT = function monadErrorExceptT(dictMonad) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowExceptT(dictMonad);
  }, function (v) {
    return function (k) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
        var v1 = k(a);
        return v1;
      })(function () {
        var $104 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($105) {
          return $104(Data_Either.Right.create($105));
        };
      }()));
    };
  });
};

var altExceptT = function altExceptT(dictSemigroup) {
  return function (dictMonad) {
    return new Control_Alt.Alt(function () {
      return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    }, function (v) {
      return function (v1) {
        return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
          if (rm instanceof Data_Either.Right) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
          }

          ;

          if (rm instanceof Data_Either.Left) {
            return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
              if (rn instanceof Data_Either.Right) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
              }

              ;

              if (rn instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [rn.constructor.name]);
            });
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [rm.constructor.name]);
        });
      };
    });
  };
};

var plusExceptT = function plusExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Plus.Plus(function () {
      return altExceptT(dictMonoid.Semigroup0())(dictMonad);
    }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
  };
};

var alternativeExceptT = function alternativeExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
      return applicativeExceptT(dictMonad);
    }, function () {
      return plusExceptT(dictMonoid)(dictMonad);
    });
  };
};

var monadZeroExceptT = function monadZeroExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
      return alternativeExceptT(dictMonoid)(dictMonad);
    }, function () {
      return monadExceptT(dictMonad);
    });
  };
};

var monadPlusExceptT = function monadPlusExceptT(dictMonoid) {
  return function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
      return monadZeroExceptT(dictMonoid)(dictMonad);
    });
  };
};

module.exports = {
  ExceptT: ExceptT,
  runExceptT: runExceptT,
  withExceptT: withExceptT,
  mapExceptT: mapExceptT,
  except: except,
  newtypeExceptT: newtypeExceptT,
  functorExceptT: functorExceptT,
  applyExceptT: applyExceptT,
  applicativeExceptT: applicativeExceptT,
  bindExceptT: bindExceptT,
  monadExceptT: monadExceptT,
  monadRecExceptT: monadRecExceptT,
  altExceptT: altExceptT,
  plusExceptT: plusExceptT,
  alternativeExceptT: alternativeExceptT,
  monadPlusExceptT: monadPlusExceptT,
  monadZeroExceptT: monadZeroExceptT,
  monadTransExceptT: monadTransExceptT,
  monadEffectExceptT: monadEffectExceptT,
  monadContExceptT: monadContExceptT,
  monadThrowExceptT: monadThrowExceptT,
  monadErrorExceptT: monadErrorExceptT,
  monadAskExceptT: monadAskExceptT,
  monadReaderExceptT: monadReaderExceptT,
  monadStateExceptT: monadStateExceptT,
  monadTellExceptT: monadTellExceptT,
  monadWriterExceptT: monadWriterExceptT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.Maybe.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var MaybeT = function MaybeT(x) {
  return x;
};

var runMaybeT = function runMaybeT(v) {
  return v;
};

var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
  return n;
}, MaybeT);
var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  var $71 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
  return function ($72) {
    return MaybeT($71($72));
  };
});

var mapMaybeT = function mapMaybeT(f) {
  return function (v) {
    return f(v);
  };
};

var functorMaybeT = function functorMaybeT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
    };
  });
};

var monadMaybeT = function monadMaybeT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeMaybeT(dictMonad);
  }, function () {
    return bindMaybeT(dictMonad);
  });
};

var bindMaybeT = function bindMaybeT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyMaybeT(dictMonad);
  }, function (v) {
    return function (f) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          var v2 = f(v1.value0);
          return v2;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [v1.constructor.name]);
      });
    };
  });
};

var applyMaybeT = function applyMaybeT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadMaybeT(dictMonad)));
};

var applicativeMaybeT = function applicativeMaybeT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyMaybeT(dictMonad);
  }, function () {
    var $73 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($74) {
      return MaybeT($73(Data_Maybe.Just.create($74)));
    };
  }());
};

var monadAskMaybeT = function monadAskMaybeT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadMaybeT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderMaybeT = function monadReaderMaybeT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskMaybeT(dictMonadReader.MonadAsk0());
  }, function (f) {
    return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
  });
};

var monadContMaybeT = function monadContMaybeT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadMaybeT(dictMonadCont.Monad0());
  }, function (f) {
    return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
      var v = f(function (a) {
        return MaybeT(c(new Data_Maybe.Just(a)));
      });
      return v;
    }));
  });
};

var monadEffectMaybe = function monadEffectMaybe(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadMaybeT(dictMonadEffect.Monad0());
  }, function () {
    var $75 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
    var $76 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($77) {
      return $75($76($77));
    };
  }());
};

var monadRecMaybeT = function monadRecMaybeT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadMaybeT(dictMonadRec.Monad0());
  }, function (f) {
    var $78 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
      var v = f(a);
      return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function (m$prime) {
        return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
          if (m$prime instanceof Data_Maybe.Nothing) {
            return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
          }

          ;

          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
            return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
          }

          ;

          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
            return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 84, column 16 - line 87, column 43): " + [m$prime.constructor.name]);
        }());
      });
    });
    return function ($79) {
      return MaybeT($78($79));
    };
  });
};

var monadStateMaybeT = function monadStateMaybeT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadMaybeT(dictMonadState.Monad0());
  }, function (f) {
    return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
  });
};

var monadTellMaybeT = function monadTellMaybeT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadMaybeT(dictMonadTell.Monad0());
  }, function () {
    var $80 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0());
    var $81 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($82) {
      return $80($81($82));
    };
  }());
};

var monadWriterMaybeT = function monadWriterMaybeT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellMaybeT(dictMonadWriter.MonadTell0());
  }, mapMaybeT(function (m) {
    return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
        return new Data_Tuple.Tuple(r, v.value1);
      })(v.value0));
    });
  }), mapMaybeT(function (m) {
    return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m)(function (a) {
      return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(function () {
        if (a instanceof Data_Maybe.Nothing) {
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
        }

        ;

        if (a instanceof Data_Maybe.Just) {
          return new Data_Tuple.Tuple(new Data_Maybe.Just(a.value0.value0), a.value0.value1);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 121, column 10 - line 123, column 43): " + [a.constructor.name]);
      }());
    }));
  }));
};

var monadThrowMaybeT = function monadThrowMaybeT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadMaybeT(dictMonadThrow.Monad0());
  }, function (e) {
    return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
  });
};

var monadErrorMaybeT = function monadErrorMaybeT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowMaybeT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
        var v1 = h(a);
        return v1;
      }));
    };
  });
};

var altMaybeT = function altMaybeT(dictMonad) {
  return new Control_Alt.Alt(function () {
    return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (m) {
        if (m instanceof Data_Maybe.Nothing) {
          return v1;
        }

        ;
        return Control_Applicative.pure(dictMonad.Applicative0())(m);
      });
    };
  });
};

var plusMaybeT = function plusMaybeT(dictMonad) {
  return new Control_Plus.Plus(function () {
    return altMaybeT(dictMonad);
  }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
};

var alternativeMaybeT = function alternativeMaybeT(dictMonad) {
  return new Control_Alternative.Alternative(function () {
    return applicativeMaybeT(dictMonad);
  }, function () {
    return plusMaybeT(dictMonad);
  });
};

var monadZeroMaybeT = function monadZeroMaybeT(dictMonad) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeMaybeT(dictMonad);
  }, function () {
    return monadMaybeT(dictMonad);
  });
};

var monadPlusMaybeT = function monadPlusMaybeT(dictMonad) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroMaybeT(dictMonad);
  });
};

module.exports = {
  MaybeT: MaybeT,
  runMaybeT: runMaybeT,
  mapMaybeT: mapMaybeT,
  newtypeMaybeT: newtypeMaybeT,
  functorMaybeT: functorMaybeT,
  applyMaybeT: applyMaybeT,
  applicativeMaybeT: applicativeMaybeT,
  bindMaybeT: bindMaybeT,
  monadMaybeT: monadMaybeT,
  monadTransMaybeT: monadTransMaybeT,
  altMaybeT: altMaybeT,
  plusMaybeT: plusMaybeT,
  alternativeMaybeT: alternativeMaybeT,
  monadPlusMaybeT: monadPlusMaybeT,
  monadZeroMaybeT: monadZeroMaybeT,
  monadRecMaybeT: monadRecMaybeT,
  monadEffectMaybe: monadEffectMaybe,
  monadContMaybeT: monadContMaybeT,
  monadThrowMaybeT: monadThrowMaybeT,
  monadErrorMaybeT: monadErrorMaybeT,
  monadAskMaybeT: monadAskMaybeT,
  monadReaderMaybeT: monadReaderMaybeT,
  monadStateMaybeT: monadStateMaybeT,
  monadTellMaybeT: monadTellMaybeT,
  monadWriterMaybeT: monadWriterMaybeT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.Reader.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var ReaderT = function ReaderT(x) {
  return x;
};

var withReaderT = function withReaderT(f) {
  return function (v) {
    return function ($66) {
      return v(f($66));
    };
  };
};

var runReaderT = function runReaderT(v) {
  return v;
};

var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ReaderT);
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function ($67) {
    return ReaderT(Data_Function["const"]($67));
  };
});

var mapReaderT = function mapReaderT(f) {
  return function (v) {
    return function ($68) {
      return f(v($68));
    };
  };
};

var functorReaderT = function functorReaderT(dictFunctor) {
  return new Data_Functor.Functor(function () {
    var $69 = Data_Functor.map(dictFunctor);
    return function ($70) {
      return mapReaderT($69($70));
    };
  }());
};

var distributiveReaderT = function distributiveReaderT(dictDistributive) {
  return new Data_Distributive.Distributive(function () {
    return functorReaderT(dictDistributive.Functor0());
  }, function (dictFunctor) {
    return function (f) {
      var $71 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
      var $72 = Data_Functor.map(dictFunctor)(f);
      return function ($73) {
        return $71($72($73));
      };
    };
  }, function (dictFunctor) {
    return function (a) {
      return function (e) {
        return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
          return r(e);
        })(a);
      };
    };
  });
};

var applyReaderT = function applyReaderT(dictApply) {
  return new Control_Apply.Apply(function () {
    return functorReaderT(dictApply.Functor0());
  }, function (v) {
    return function (v1) {
      return function (r) {
        return Control_Apply.apply(dictApply)(v(r))(v1(r));
      };
    };
  });
};

var bindReaderT = function bindReaderT(dictBind) {
  return new Control_Bind.Bind(function () {
    return applyReaderT(dictBind.Apply0());
  }, function (v) {
    return function (k) {
      return function (r) {
        return Control_Bind.bind(dictBind)(v(r))(function (a) {
          var v1 = k(a);
          return v1(r);
        });
      };
    };
  });
};

var semigroupReaderT = function semigroupReaderT(dictApply) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
  };
};

var applicativeReaderT = function applicativeReaderT(dictApplicative) {
  return new Control_Applicative.Applicative(function () {
    return applyReaderT(dictApplicative.Apply0());
  }, function () {
    var $74 = Control_Applicative.pure(dictApplicative);
    return function ($75) {
      return ReaderT(Data_Function["const"]($74($75)));
    };
  }());
};

var monadReaderT = function monadReaderT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeReaderT(dictMonad.Applicative0());
  }, function () {
    return bindReaderT(dictMonad.Bind1());
  });
};

var monadAskReaderT = function monadAskReaderT(dictMonad) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadReaderT(dictMonad);
  }, Control_Applicative.pure(dictMonad.Applicative0()));
};

var monadReaderReaderT = function monadReaderReaderT(dictMonad) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskReaderT(dictMonad);
  }, withReaderT);
};

var monadContReaderT = function monadContReaderT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadReaderT(dictMonadCont.Monad0());
  }, function (f) {
    return function (r) {
      return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function ($76) {
          return ReaderT(Data_Function["const"](c($76)));
        });
        return v(r);
      });
    };
  });
};

var monadEffectReader = function monadEffectReader(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadReaderT(dictMonadEffect.Monad0());
  }, function () {
    var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
    var $78 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($79) {
      return $77($78($79));
    };
  }());
};

var monadRecReaderT = function monadRecReaderT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadReaderT(dictMonadRec.Monad0());
  }, function (k) {
    return function (a) {
      var k$prime = function k$prime(r) {
        return function (a$prime) {
          var v = k(a$prime);
          return Control_Bind.bindFlipped(dictMonadRec.Monad0().Bind1())(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0()))(v(r));
        };
      };

      return function (r) {
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
      };
    };
  });
};

var monadStateReaderT = function monadStateReaderT(dictMonadState) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadReaderT(dictMonadState.Monad0());
  }, function () {
    var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
    var $81 = Control_Monad_State_Class.state(dictMonadState);
    return function ($82) {
      return $80($81($82));
    };
  }());
};

var monadTellReaderT = function monadTellReaderT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadReaderT(dictMonadTell.Monad0());
  }, function () {
    var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0());
    var $84 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($85) {
      return $83($84($85));
    };
  }());
};

var monadWriterReaderT = function monadWriterReaderT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellReaderT(dictMonadWriter.MonadTell0());
  }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
};

var monadThrowReaderT = function monadThrowReaderT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadReaderT(dictMonadThrow.Monad0());
  }, function () {
    var $86 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
    var $87 = Control_Monad_Error_Class.throwError(dictMonadThrow);
    return function ($88) {
      return $86($87($88));
    };
  }());
};

var monadErrorReaderT = function monadErrorReaderT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowReaderT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return function (r) {
        return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
          var v1 = h(e);
          return v1(r);
        });
      };
    };
  });
};

var monoidReaderT = function monoidReaderT(dictApplicative) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
  };
};

var altReaderT = function altReaderT(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorReaderT(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return function (r) {
        return Control_Alt.alt(dictAlt)(v(r))(v1(r));
      };
    };
  });
};

var plusReaderT = function plusReaderT(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altReaderT(dictPlus.Alt0());
  }, Data_Function["const"](Control_Plus.empty(dictPlus)));
};

var alternativeReaderT = function alternativeReaderT(dictAlternative) {
  return new Control_Alternative.Alternative(function () {
    return applicativeReaderT(dictAlternative.Applicative0());
  }, function () {
    return plusReaderT(dictAlternative.Plus1());
  });
};

var monadZeroReaderT = function monadZeroReaderT(dictMonadZero) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeReaderT(dictMonadZero.Alternative1());
  }, function () {
    return monadReaderT(dictMonadZero.Monad0());
  });
};

var monadPlusReaderT = function monadPlusReaderT(dictMonadPlus) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroReaderT(dictMonadPlus.MonadZero0());
  });
};

module.exports = {
  ReaderT: ReaderT,
  runReaderT: runReaderT,
  withReaderT: withReaderT,
  mapReaderT: mapReaderT,
  newtypeReaderT: newtypeReaderT,
  functorReaderT: functorReaderT,
  applyReaderT: applyReaderT,
  applicativeReaderT: applicativeReaderT,
  altReaderT: altReaderT,
  plusReaderT: plusReaderT,
  alternativeReaderT: alternativeReaderT,
  bindReaderT: bindReaderT,
  monadReaderT: monadReaderT,
  monadZeroReaderT: monadZeroReaderT,
  semigroupReaderT: semigroupReaderT,
  monoidReaderT: monoidReaderT,
  monadPlusReaderT: monadPlusReaderT,
  monadTransReaderT: monadTransReaderT,
  monadEffectReader: monadEffectReader,
  monadContReaderT: monadContReaderT,
  monadThrowReaderT: monadThrowReaderT,
  monadErrorReaderT: monadErrorReaderT,
  monadAskReaderT: monadAskReaderT,
  monadReaderReaderT: monadReaderReaderT,
  monadStateReaderT: monadStateReaderT,
  monadTellReaderT: monadTellReaderT,
  monadWriterReaderT: monadWriterReaderT,
  distributiveReaderT: distributiveReaderT,
  monadRecReaderT: monadRecReaderT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Distributive/index.js":"../output/Data.Distributive/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.Writer.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var WriterT = function WriterT(x) {
  return x;
};

var runWriterT = function runWriterT(v) {
  return v;
};

var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
  return n;
}, WriterT);

var monadTransWriterT = function monadTransWriterT(dictMonoid) {
  return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
      });
    };
  });
};

var mapWriterT = function mapWriterT(f) {
  return function (v) {
    return f(v);
  };
};

var functorWriterT = function functorWriterT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
      return new Data_Tuple.Tuple(f(v.value0), v.value1);
    }));
  });
};

var execWriterT = function execWriterT(dictFunctor) {
  return function (v) {
    return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
  };
};

var applyWriterT = function applyWriterT(dictSemigroup) {
  return function (dictApply) {
    return new Control_Apply.Apply(function () {
      return functorWriterT(dictApply.Functor0());
    }, function (v) {
      return function (v1) {
        var k = function k(v3) {
          return function (v4) {
            return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
          };
        };

        return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
      };
    });
  };
};

var bindWriterT = function bindWriterT(dictSemigroup) {
  return function (dictBind) {
    return new Control_Bind.Bind(function () {
      return applyWriterT(dictSemigroup)(dictBind.Apply0());
    }, function (v) {
      return function (k) {
        return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
          var v2 = k(v1.value0);
          return Data_Functor.map(dictBind.Apply0().Functor0())(function (v3) {
            return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
          })(v2);
        }));
      };
    });
  };
};

var applicativeWriterT = function applicativeWriterT(dictMonoid) {
  return function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
      return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
    }, function (a) {
      return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
    });
  };
};

var monadWriterT = function monadWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad.Monad(function () {
      return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
    }, function () {
      return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
    });
  };
};

var monadAskWriterT = function monadAskWriterT(dictMonoid) {
  return function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
      return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
};

var monadReaderWriterT = function monadReaderWriterT(dictMonoid) {
  return function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
      return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
    }, function (f) {
      return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
  };
};

var monadContWriterT = function monadContWriterT(dictMonoid) {
  return function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
      return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
    }, function (f) {
      return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function (a) {
          return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
        });
        return v;
      }));
    });
  };
};

var monadEffectWriter = function monadEffectWriter(dictMonoid) {
  return function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
      return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
    }, function () {
      var $121 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
      var $122 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($123) {
        return $121($122($123));
      };
    }());
  };
};

var monadRecWriterT = function monadRecWriterT(dictMonoid) {
  return function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
      return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
    }, function (f) {
      return function (a) {
        var f$prime = function f$prime(v) {
          var v1 = f(v.value0);
          return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1)(function (v2) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
              if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
              }

              ;

              if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 83, column 16 - line 85, column 47): " + [v2.value0.constructor.name]);
            }());
          });
        };

        return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
      };
    });
  };
};

var monadStateWriterT = function monadStateWriterT(dictMonoid) {
  return function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
      return monadWriterT(dictMonoid)(dictMonadState.Monad0());
    }, function (f) {
      return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
  };
};

var monadTellWriterT = function monadTellWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
      return monadWriterT(dictMonoid)(dictMonad);
    }, function () {
      var $124 = Control_Applicative.pure(dictMonad.Applicative0());
      var $125 = Data_Tuple.Tuple.create(Data_Unit.unit);
      return function ($126) {
        return WriterT($124($125($126)));
      };
    }());
  };
};

var monadWriterWriterT = function monadWriterWriterT(dictMonoid) {
  return function (dictMonad) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
      return monadTellWriterT(dictMonoid)(dictMonad);
    }, function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
      });
    }, function (v) {
      return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
      });
    });
  };
};

var monadThrowWriterT = function monadThrowWriterT(dictMonoid) {
  return function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
      return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
    }, function (e) {
      return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
  };
};

var monadErrorWriterT = function monadErrorWriterT(dictMonoid) {
  return function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
    }, function (v) {
      return function (h) {
        return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
          var v1 = h(e);
          return v1;
        }));
      };
    });
  };
};

var altWriterT = function altWriterT(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorWriterT(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return Control_Alt.alt(dictAlt)(v)(v1);
    };
  });
};

var plusWriterT = function plusWriterT(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altWriterT(dictPlus.Alt0());
  }, Control_Plus.empty(dictPlus));
};

var alternativeWriterT = function alternativeWriterT(dictMonoid) {
  return function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
    }, function () {
      return plusWriterT(dictAlternative.Plus1());
    });
  };
};

var monadZeroWriterT = function monadZeroWriterT(dictMonoid) {
  return function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
      return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
    }, function () {
      return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
    });
  };
};

var monadPlusWriterT = function monadPlusWriterT(dictMonoid) {
  return function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
      return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
    });
  };
};

module.exports = {
  WriterT: WriterT,
  runWriterT: runWriterT,
  execWriterT: execWriterT,
  mapWriterT: mapWriterT,
  newtypeWriterT: newtypeWriterT,
  functorWriterT: functorWriterT,
  applyWriterT: applyWriterT,
  applicativeWriterT: applicativeWriterT,
  altWriterT: altWriterT,
  plusWriterT: plusWriterT,
  alternativeWriterT: alternativeWriterT,
  bindWriterT: bindWriterT,
  monadWriterT: monadWriterT,
  monadRecWriterT: monadRecWriterT,
  monadZeroWriterT: monadZeroWriterT,
  monadPlusWriterT: monadPlusWriterT,
  monadTransWriterT: monadTransWriterT,
  monadEffectWriter: monadEffectWriter,
  monadContWriterT: monadContWriterT,
  monadThrowWriterT: monadThrowWriterT,
  monadErrorWriterT: monadErrorWriterT,
  monadAskWriterT: monadAskWriterT,
  monadReaderWriterT: monadReaderWriterT,
  monadStateWriterT: monadStateWriterT,
  monadTellWriterT: monadTellWriterT,
  monadWriterWriterT: monadWriterWriterT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Unsafe.Coerce/foreign.js":[function(require,module,exports) {
"use strict"; // module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};
},{}],"../output/Unsafe.Coerce/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafeCoerce: $foreign.unsafeCoerce
};
},{"./foreign.js":"../output/Unsafe.Coerce/foreign.js"}],"../output/Data.Functor.App/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var App = function App(x) {
  return x;
};

var traversableWithIndexApp = function traversableWithIndexApp(dictTraversableWithIndex) {
  return dictTraversableWithIndex;
};

var traversableApp = function traversableApp(dictTraversable) {
  return dictTraversable;
};

var showApp = function showApp(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(App " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var semigroupApp = function semigroupApp(dictApply) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
        return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
      };
    });
  };
};

var plusApp = function plusApp(dictPlus) {
  return dictPlus;
};

var newtypeApp = new Data_Newtype.Newtype(function (n) {
  return n;
}, App);

var monoidApp = function monoidApp(dictApplicative) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
  };
};

var monadZeroApp = function monadZeroApp(dictMonadZero) {
  return dictMonadZero;
};

var monadPlusApp = function monadPlusApp(dictMonadPlus) {
  return dictMonadPlus;
};

var monadApp = function monadApp(dictMonad) {
  return dictMonad;
};

var lazyApp = function lazyApp(dictLazy) {
  return dictLazy;
};

var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;

var hoistApp = function hoistApp(f) {
  return function (v) {
    return f(v);
  };
};

var functorWithIndexApp = function functorWithIndexApp(dictFunctorWithIndex) {
  return dictFunctorWithIndex;
};

var functorApp = function functorApp(dictFunctor) {
  return dictFunctor;
};

var foldableWithIndexApp = function foldableWithIndexApp(dictFoldableWithIndex) {
  return dictFoldableWithIndex;
};

var foldableApp = function foldableApp(dictFoldable) {
  return dictFoldable;
};

var extendApp = function extendApp(dictExtend) {
  return dictExtend;
};

var eqApp = function eqApp(dictEq1) {
  return function (dictEq) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
      };
    });
  };
};

var ordApp = function ordApp(dictOrd1) {
  return function (dictOrd) {
    return new Data_Ord.Ord(function () {
      return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
    }, function (x) {
      return function (y) {
        return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
      };
    });
  };
};

var eq1App = function eq1App(dictEq1) {
  return new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqApp(dictEq1)(dictEq));
  });
};

var ord1App = function ord1App(dictOrd1) {
  return new Data_Ord.Ord1(function () {
    return eq1App(dictOrd1.Eq10());
  }, function (dictOrd) {
    return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
  });
};

var comonadApp = function comonadApp(dictComonad) {
  return dictComonad;
};

var bindApp = function bindApp(dictBind) {
  return dictBind;
};

var applyApp = function applyApp(dictApply) {
  return dictApply;
};

var applicativeApp = function applicativeApp(dictApplicative) {
  return dictApplicative;
};

var alternativeApp = function alternativeApp(dictAlternative) {
  return dictAlternative;
};

var altApp = function altApp(dictAlt) {
  return dictAlt;
};

module.exports = {
  App: App,
  hoistApp: hoistApp,
  hoistLiftApp: hoistLiftApp,
  hoistLowerApp: hoistLowerApp,
  newtypeApp: newtypeApp,
  eqApp: eqApp,
  eq1App: eq1App,
  ordApp: ordApp,
  ord1App: ord1App,
  showApp: showApp,
  semigroupApp: semigroupApp,
  monoidApp: monoidApp,
  functorApp: functorApp,
  functorWithIndexApp: functorWithIndexApp,
  applyApp: applyApp,
  applicativeApp: applicativeApp,
  bindApp: bindApp,
  monadApp: monadApp,
  altApp: altApp,
  plusApp: plusApp,
  alternativeApp: alternativeApp,
  monadZeroApp: monadZeroApp,
  monadPlusApp: monadPlusApp,
  lazyApp: lazyApp,
  foldableApp: foldableApp,
  traversableApp: traversableApp,
  foldableWithIndexApp: foldableWithIndexApp,
  traversableWithIndexApp: traversableWithIndexApp,
  extendApp: extendApp,
  comonadApp: comonadApp
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Data.Functor.Compose/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_App = require("../Data.Functor.App/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Compose = function Compose(x) {
  return x;
};

var showCompose = function showCompose(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
  });
};

var newtypeCompose = new Data_Newtype.Newtype(function (n) {
  return n;
}, Compose);

var functorCompose = function functorCompose(dictFunctor) {
  return function (dictFunctor1) {
    return new Data_Functor.Functor(function (f) {
      return function (v) {
        return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
      };
    });
  };
};

var functorWithIndexCompose = function functorWithIndexCompose(dictFunctorWithIndex) {
  return function (dictFunctorWithIndex1) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
    }, function (f) {
      return function (v) {
        return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function () {
          var $100 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1);
          var $101 = Data_Tuple.curry(f);
          return function ($102) {
            return $100($101($102));
          };
        }())(v));
      };
    });
  };
};

var foldableCompose = function foldableCompose(dictFoldable) {
  return function (dictFoldable1) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
        return function (v) {
          return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
        };
      };
    });
  };
};

var foldableWithIndexCompose = function foldableWithIndexCompose(dictFoldableWithIndex) {
  return function (dictFoldableWithIndex1) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
    }, function (dictMonoid) {
      return function (f) {
        return function (v) {
          return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function () {
            var $103 = Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
            var $104 = Data_Tuple.curry(f);
            return function ($105) {
              return $103($104($105));
            };
          }())(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function () {
            var $106 = Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1);
            var $107 = Data_Tuple.curry(f);
            return function ($108) {
              return $106($107($108));
            };
          }())(i)(v);
        };
      };
    }, function (f) {
      return function (i) {
        return function (v) {
          return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
            return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
          })(i)(v);
        };
      };
    });
  };
};

var traversableCompose = function traversableCompose(dictTraversable) {
  return function (dictTraversable1) {
    return new Data_Traversable.Traversable(function () {
      return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
    }, function () {
      return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
    }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictApplicative) {
      return function (f) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
        };
      };
    });
  };
};

var traversableWithIndexCompose = function traversableWithIndexCompose(dictTraversableWithIndex) {
  return function (dictTraversableWithIndex1) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
    }, function () {
      return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
    }, function () {
      return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
    }, function (dictApplicative) {
      return function (f) {
        return function (v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function () {
            var $109 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
            var $110 = Data_Tuple.curry(f);
            return function ($111) {
              return $109($110($111));
            };
          }())(v));
        };
      };
    });
  };
};

var eqCompose = function eqCompose(dictEq1) {
  return function (dictEq11) {
    return function (dictEq) {
      return new Data_Eq.Eq(function (v) {
        return function (v1) {
          return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
        };
      });
    };
  };
};

var ordCompose = function ordCompose(dictOrd1) {
  return function (dictOrd11) {
    return function (dictOrd) {
      return new Data_Ord.Ord(function () {
        return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
      }, function (v) {
        return function (v1) {
          return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
        };
      });
    };
  };
};

var eq1Compose = function eq1Compose(dictEq1) {
  return function (dictEq11) {
    return new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
    });
  };
};

var ord1Compose = function ord1Compose(dictOrd1) {
  return function (dictOrd11) {
    return new Data_Ord.Ord1(function () {
      return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
    }, function (dictOrd) {
      return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
    });
  };
};

var bihoistCompose = function bihoistCompose(dictFunctor) {
  return function (natF) {
    return function (natG) {
      return function (v) {
        return natF(Data_Functor.map(dictFunctor)(natG)(v));
      };
    };
  };
};

var applyCompose = function applyCompose(dictApply) {
  return function (dictApply1) {
    return new Control_Apply.Apply(function () {
      return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
    }, function (v) {
      return function (v1) {
        return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
      };
    });
  };
};

var applicativeCompose = function applicativeCompose(dictApplicative) {
  return function (dictApplicative1) {
    return new Control_Applicative.Applicative(function () {
      return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
    }, function () {
      var $112 = Control_Applicative.pure(dictApplicative);
      var $113 = Control_Applicative.pure(dictApplicative1);
      return function ($114) {
        return Compose($112($113($114)));
      };
    }());
  };
};

var altCompose = function altCompose(dictAlt) {
  return function (dictFunctor) {
    return new Control_Alt.Alt(function () {
      return functorCompose(dictAlt.Functor0())(dictFunctor);
    }, function (v) {
      return function (v1) {
        return Compose(Control_Alt.alt(dictAlt)(v)(v1));
      };
    });
  };
};

var plusCompose = function plusCompose(dictPlus) {
  return function (dictFunctor) {
    return new Control_Plus.Plus(function () {
      return altCompose(dictPlus.Alt0())(dictFunctor);
    }, Control_Plus.empty(dictPlus));
  };
};

var alternativeCompose = function alternativeCompose(dictAlternative) {
  return function (dictApplicative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
    }, function () {
      return plusCompose(dictAlternative.Plus1())(dictApplicative.Apply0().Functor0());
    });
  };
};

module.exports = {
  Compose: Compose,
  bihoistCompose: bihoistCompose,
  newtypeCompose: newtypeCompose,
  eqCompose: eqCompose,
  eq1Compose: eq1Compose,
  ordCompose: ordCompose,
  ord1Compose: ord1Compose,
  showCompose: showCompose,
  functorCompose: functorCompose,
  functorWithIndexCompose: functorWithIndexCompose,
  applyCompose: applyCompose,
  applicativeCompose: applicativeCompose,
  foldableCompose: foldableCompose,
  foldableWithIndexCompose: foldableWithIndexCompose,
  traversableCompose: traversableCompose,
  traversableWithIndexCompose: traversableWithIndexCompose,
  altCompose: altCompose,
  plusCompose: plusCompose,
  alternativeCompose: alternativeCompose
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.App/index.js":"../output/Data.Functor.App/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js"}],"../output/Control.Parallel.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var ParCont = function ParCont(x) {
  return x;
};

var Parallel = function Parallel(Applicative1, Monad0, parallel, sequential) {
  this.Applicative1 = Applicative1;
  this.Monad0 = Monad0;
  this.parallel = parallel;
  this.sequential = sequential;
};

var sequential = function sequential(dict) {
  return dict.sequential;
};

var parallel = function parallel(dict) {
  return dict.parallel;
};

var newtypeParCont = new Data_Newtype.Newtype(function (n) {
  return n;
}, ParCont);

var monadParWriterT = function monadParWriterT(dictMonoid) {
  return function (dictParallel) {
    return new Parallel(function () {
      return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
    }, function () {
      return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
    }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
  };
};

var monadParReaderT = function monadParReaderT(dictParallel) {
  return new Parallel(function () {
    return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
  }, function () {
    return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
  }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
};

var monadParMaybeT = function monadParMaybeT(dictParallel) {
  return new Parallel(function () {
    return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
  }, function () {
    return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
  }, function (v) {
    return parallel(dictParallel)(v);
  }, function (v) {
    return sequential(dictParallel)(v);
  });
};

var monadParExceptT = function monadParExceptT(dictParallel) {
  return new Parallel(function () {
    return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
  }, function () {
    return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
  }, function (v) {
    return parallel(dictParallel)(v);
  }, function (v) {
    return sequential(dictParallel)(v);
  });
};

var monadParParCont = function monadParParCont(dictMonadEffect) {
  return new Parallel(function () {
    return applicativeParCont(dictMonadEffect);
  }, function () {
    return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
  }, ParCont, function (v) {
    return v;
  });
};

var functorParCont = function functorParCont(dictMonadEffect) {
  return new Data_Functor.Functor(function (f) {
    var $40 = parallel(monadParParCont(dictMonadEffect));
    var $41 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT(dictMonadEffect.Monad0().Bind1().Apply0().Functor0()))(f);
    var $42 = sequential(monadParParCont(dictMonadEffect));
    return function ($43) {
      return $40($41($42($43)));
    };
  });
};

var applyParCont = function applyParCont(dictMonadEffect) {
  return new Control_Apply.Apply(function () {
    return functorParCont(dictMonadEffect);
  }, function (v) {
    return function (v1) {
      return ParCont(function (k) {
        return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (ra) {
          return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (rb) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(rb)))(function (mb) {
                if (mb instanceof Data_Maybe.Nothing) {
                  return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(ra));
                }

                ;

                if (mb instanceof Data_Maybe.Just) {
                  return k(a(mb.value0));
                }

                ;
                throw new Error("Failed pattern match at Control.Parallel.Class (line 71, column 7 - line 73, column 26): " + [mb.constructor.name]);
              });
            }))(function () {
              return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(ra)))(function (ma) {
                  if (ma instanceof Data_Maybe.Nothing) {
                    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(rb));
                  }

                  ;

                  if (ma instanceof Data_Maybe.Just) {
                    return k(ma.value0(b));
                  }

                  ;
                  throw new Error("Failed pattern match at Control.Parallel.Class (line 77, column 7 - line 79, column 26): " + [ma.constructor.name]);
                });
              });
            });
          });
        });
      });
    };
  });
};

var applicativeParCont = function applicativeParCont(dictMonadEffect) {
  return new Control_Applicative.Applicative(function () {
    return applyParCont(dictMonadEffect);
  }, function () {
    var $44 = parallel(monadParParCont(dictMonadEffect));
    var $45 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(dictMonadEffect.Monad0().Applicative0()));
    return function ($46) {
      return $44($45($46));
    };
  }());
};

var altParCont = function altParCont(dictMonadEffect) {
  return new Control_Alt.Alt(function () {
    return functorParCont(dictMonadEffect);
  }, function (v) {
    return function (v1) {
      return ParCont(function (k) {
        return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (done) {
          return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
            return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
              if (b) {
                return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
              }

              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                return k(a);
              });
            });
          }))(function () {
            return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function (b) {
                if (b) {
                  return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
                }

                ;
                return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function () {
                  return k(a);
                });
              });
            });
          });
        });
      });
    };
  });
};

var plusParCont = function plusParCont(dictMonadEffect) {
  return new Control_Plus.Plus(function () {
    return altParCont(dictMonadEffect);
  }, ParCont(function (v) {
    return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
  }));
};

var alternativeParCont = function alternativeParCont(dictMonadEffect) {
  return new Control_Alternative.Alternative(function () {
    return applicativeParCont(dictMonadEffect);
  }, function () {
    return plusParCont(dictMonadEffect);
  });
};

module.exports = {
  parallel: parallel,
  sequential: sequential,
  Parallel: Parallel,
  ParCont: ParCont,
  monadParExceptT: monadParExceptT,
  monadParReaderT: monadParReaderT,
  monadParWriterT: monadParWriterT,
  monadParMaybeT: monadParMaybeT,
  newtypeParCont: newtypeParCont,
  functorParCont: functorParCont,
  applyParCont: applyParCont,
  applicativeParCont: applicativeParCont,
  altParCont: altParCont,
  plusParCont: plusParCont,
  alternativeParCont: alternativeParCont,
  monadParParCont: monadParParCont
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad.Cont.Trans/index.js":"../output/Control.Monad.Cont.Trans/index.js","../Control.Monad.Except.Trans/index.js":"../output/Control.Monad.Except.Trans/index.js","../Control.Monad.Maybe.Trans/index.js":"../output/Control.Monad.Maybe.Trans/index.js","../Control.Monad.Reader.Trans/index.js":"../output/Control.Monad.Reader.Trans/index.js","../Control.Monad.Writer.Trans/index.js":"../output/Control.Monad.Writer.Trans/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Compose/index.js":"../output/Data.Functor.Compose/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js"}],"../output/Control.Parallel/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var parTraverse_ = function parTraverse_(dictParallel) {
  return function (dictFoldable) {
    return function (f) {
      var $17 = Control_Parallel_Class.sequential(dictParallel);
      var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function () {
        var $20 = Control_Parallel_Class.parallel(dictParallel);
        return function ($21) {
          return $20(f($21));
        };
      }());
      return function ($19) {
        return $17($18($19));
      };
    };
  };
};

var parTraverse = function parTraverse(dictParallel) {
  return function (dictTraversable) {
    return function (f) {
      var $22 = Control_Parallel_Class.sequential(dictParallel);
      var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function () {
        var $25 = Control_Parallel_Class.parallel(dictParallel);
        return function ($26) {
          return $25(f($26));
        };
      }());
      return function ($24) {
        return $22($23($24));
      };
    };
  };
};

var parSequence_ = function parSequence_(dictParallel) {
  return function (dictFoldable) {
    return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var parSequence = function parSequence(dictParallel) {
  return function (dictTraversable) {
    return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
  };
};

var parOneOfMap = function parOneOfMap(dictParallel) {
  return function (dictAlternative) {
    return function (dictFoldable) {
      return function (dictFunctor) {
        return function (f) {
          var $27 = Control_Parallel_Class.sequential(dictParallel);
          var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(function () {
            var $30 = Control_Parallel_Class.parallel(dictParallel);
            return function ($31) {
              return $30(f($31));
            };
          }());
          return function ($29) {
            return $27($28($29));
          };
        };
      };
    };
  };
};

var parOneOf = function parOneOf(dictParallel) {
  return function (dictAlternative) {
    return function (dictFoldable) {
      return function (dictFunctor) {
        var $32 = Control_Parallel_Class.sequential(dictParallel);
        var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
        return function ($34) {
          return $32($33($34));
        };
      };
    };
  };
};

var parApply = function parApply(dictParallel) {
  return function (mf) {
    return function (ma) {
      return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply(dictParallel.Applicative1().Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
    };
  };
};

module.exports = {
  parApply: parApply,
  parTraverse: parTraverse,
  parTraverse_: parTraverse_,
  parSequence: parSequence,
  parSequence_: parSequence_,
  parOneOf: parOneOf,
  parOneOfMap: parOneOfMap
};
},{"../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Parallel.Class/index.js":"../output/Control.Parallel.Class/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js"}],"../output/Effect.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.unsafePerformEffect = function (f) {
  return f();
};
},{}],"../output/Effect.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  unsafePerformEffect: $foreign.unsafePerformEffect
};
},{"./foreign.js":"../output/Effect.Unsafe/foreign.js"}],"../output/Partial.Unsafe/foreign.js":[function(require,module,exports) {
"use strict"; // module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};
},{}],"../output/Partial/foreign.js":[function(require,module,exports) {
"use strict"; // module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};
},{}],"../output/Partial/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var crash = function crash(dictPartial) {
  return $foreign.crashWith()("Partial.crash: partial function");
};

module.exports = {
  crash: crash,
  crashWith: $foreign.crashWith
};
},{"./foreign.js":"../output/Partial/foreign.js"}],"../output/Partial.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Partial = require("../Partial/index.js");

var unsafePartialBecause = function unsafePartialBecause(v) {
  return function (x) {
    return $foreign.unsafePartial(function (dictPartial) {
      return x();
    });
  };
};

var unsafeCrashWith = function unsafeCrashWith(msg) {
  return $foreign.unsafePartial(function (dictPartial) {
    return Partial.crashWith()(msg);
  });
};

module.exports = {
  unsafePartialBecause: unsafePartialBecause,
  unsafeCrashWith: unsafeCrashWith,
  unsafePartial: $foreign.unsafePartial
};
},{"./foreign.js":"../output/Partial.Unsafe/foreign.js","../Partial/index.js":"../output/Partial/index.js"}],"../output/Effect.Aff/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Parallel = require("../Control.Parallel/index.js");

var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Unsafe = require("../Effect.Unsafe/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Fiber = function Fiber(x) {
  return x;
};

var FFIUtil = function FFIUtil(x) {
  return x;
};

var Canceler = function Canceler(x) {
  return x;
};

var suspendAff = $foreign["_fork"](false);
var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
  return n;
}, Canceler);
var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
var functorAff = new Data_Functor.Functor($foreign["_map"]);
var forkAff = $foreign["_fork"](true);

var ffiUtil = function () {
  var unsafeFromRight = function unsafeFromRight(v) {
    if (v instanceof Data_Either.Right) {
      return v.value0;
    }

    ;

    if (v instanceof Data_Either.Left) {
      return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [v.constructor.name]);
  };

  var unsafeFromLeft = function unsafeFromLeft(v) {
    if (v instanceof Data_Either.Left) {
      return v.value0;
    }

    ;

    if (v instanceof Data_Either.Right) {
      return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [v.constructor.name]);
  };

  var isLeft = function isLeft(v) {
    if (v instanceof Data_Either.Left) {
      return true;
    }

    ;

    if (v instanceof Data_Either.Right) {
      return false;
    }

    ;
    throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [v.constructor.name]);
  };

  return {
    isLeft: isLeft,
    fromLeft: unsafeFromLeft,
    fromRight: unsafeFromRight,
    left: Data_Either.Left.create,
    right: Data_Either.Right.create
  };
}();

var makeFiber = function makeFiber(aff) {
  return $foreign["_makeFiber"](ffiUtil, aff);
};

var launchAff = function launchAff(aff) {
  return function __do() {
    var fiber = makeFiber(aff)();
    fiber.run();
    return fiber;
  };
};

var launchAff_ = function () {
  var $43 = Data_Functor["void"](Effect.functorEffect);
  return function ($44) {
    return $43(launchAff($44));
  };
}();

var launchSuspendedAff = makeFiber;

var delay = function delay(v) {
  return $foreign["_delay"](Data_Either.Right.create, v);
};

var bracket = function bracket(acquire) {
  return function (completed) {
    return $foreign.generalBracket(acquire)({
      killed: Data_Function["const"](completed),
      failed: Data_Function["const"](completed),
      completed: Data_Function["const"](completed)
    });
  };
};

var applyParAff = new Control_Apply.Apply(function () {
  return functorParAff;
}, $foreign["_parAffApply"]);

var semigroupParAff = function semigroupParAff(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
};

var monadAff = new Control_Monad.Monad(function () {
  return applicativeAff;
}, function () {
  return bindAff;
});
var bindAff = new Control_Bind.Bind(function () {
  return applyAff;
}, $foreign["_bind"]);
var applyAff = new Control_Apply.Apply(function () {
  return functorAff;
}, Control_Monad.ap(monadAff));
var applicativeAff = new Control_Applicative.Applicative(function () {
  return applyAff;
}, $foreign["_pure"]);

var cancelWith = function cancelWith(aff) {
  return function (v) {
    return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
      killed: function killed(e) {
        return function (v1) {
          return v(e);
        };
      },
      failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
      completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
    })(Data_Function["const"](aff));
  };
};

var $$finally = function $$finally(fin) {
  return function (a) {
    return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
  };
};

var invincible = function invincible(a) {
  return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};

var lazyAff = new Control_Lazy.Lazy(function (f) {
  return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
});

var semigroupAff = function semigroupAff(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
};

var monadEffectAff = new Effect_Class.MonadEffect(function () {
  return monadAff;
}, $foreign["_liftEffect"]);

var effectCanceler = function () {
  var $45 = Effect_Class.liftEffect(monadEffectAff);
  return function ($46) {
    return Canceler(Data_Function["const"]($45($46)));
  };
}();

var joinFiber = function joinFiber(v) {
  return $foreign.makeAff(function (k) {
    return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
  });
};

var functorFiber = new Data_Functor.Functor(function (f) {
  return function (t) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
  };
});
var applyFiber = new Control_Apply.Apply(function () {
  return functorFiber;
}, function (t1) {
  return function (t2) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
  };
});
var applicativeFiber = new Control_Applicative.Applicative(function () {
  return applyFiber;
}, function (a) {
  return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
});

var killFiber = function killFiber(e) {
  return function (v) {
    return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
      if (v1) {
        return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
      }

      ;
      return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
      });
    });
  };
};

var fiberCanceler = function () {
  var $47 = Data_Function.flip(killFiber);
  return function ($48) {
    return Canceler($47($48));
  };
}();

var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
  return monadAff;
}, $foreign["_throwError"]);
var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
  return monadThrowAff;
}, $foreign["_catchError"]);
var attempt = Control_Monad_Error_Class["try"](monadErrorAff);

var runAff = function runAff(k) {
  return function (aff) {
    return launchAff(Control_Bind.bindFlipped(bindAff)(function () {
      var $49 = Effect_Class.liftEffect(monadEffectAff);
      return function ($50) {
        return $49(k($50));
      };
    }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
  };
};

var runAff_ = function runAff_(k) {
  return function (aff) {
    return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
  };
};

var runSuspendedAff = function runSuspendedAff(k) {
  return function (aff) {
    return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)(function () {
      var $51 = Effect_Class.liftEffect(monadEffectAff);
      return function ($52) {
        return $51(k($52));
      };
    }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
  };
};

var parallelAff = new Control_Parallel_Class.Parallel(function () {
  return applicativeParAff;
}, function () {
  return monadAff;
}, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
var applicativeParAff = new Control_Applicative.Applicative(function () {
  return applyParAff;
}, function () {
  var $53 = Control_Parallel_Class.parallel(parallelAff);
  var $54 = Control_Applicative.pure(applicativeAff);
  return function ($55) {
    return $53($54($55));
  };
}());

var monoidParAff = function monoidParAff(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupParAff(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
};

var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return function (err) {
      return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([v(err), v1(err)]);
    };
  };
});

var supervise = function supervise(aff) {
  var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");

  var killAll = function killAll(err) {
    return function (sup) {
      return $foreign.makeAff(function (k) {
        return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
      });
    };
  };

  var acquire = function __do() {
    var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
    sup.fiber.run();
    return sup;
  };

  return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
    killed: function killed(err) {
      return function (sup) {
        return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([killFiber(err)(sup.fiber), killAll(err)(sup)]);
      };
    },
    failed: Data_Function["const"](killAll(killError)),
    completed: Data_Function["const"](killAll(killError))
  })(function ($56) {
    return joinFiber(function (v) {
      return v.fiber;
    }($56));
  });
};

var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadAff;
}, function (k) {
  var go = function go(a) {
    return Control_Bind.bind(bindAff)(k(a))(function (res) {
      if (res instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(applicativeAff)(res.value0);
      }

      ;

      if (res instanceof Control_Monad_Rec_Class.Loop) {
        return go(res.value0);
      }

      ;
      throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [res.constructor.name]);
    });
  };

  return go;
});

var monoidAff = function monoidAff(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupAff(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
};

var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = new Data_Monoid.Monoid(function () {
  return semigroupCanceler;
}, nonCanceler);
var never = $foreign.makeAff(function (v) {
  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});

var apathize = function () {
  var $57 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
  return function ($58) {
    return $57(attempt($58));
  };
}();

var altParAff = new Control_Alt.Alt(function () {
  return functorParAff;
}, $foreign["_parAffAlt"]);
var altAff = new Control_Alt.Alt(function () {
  return functorAff;
}, function (a1) {
  return function (a2) {
    return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
  };
});
var plusAff = new Control_Plus.Plus(function () {
  return altAff;
}, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
var plusParAff = new Control_Plus.Plus(function () {
  return altParAff;
}, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
var alternativeParAff = new Control_Alternative.Alternative(function () {
  return applicativeParAff;
}, function () {
  return plusParAff;
});
module.exports = {
  Canceler: Canceler,
  launchAff: launchAff,
  launchAff_: launchAff_,
  launchSuspendedAff: launchSuspendedAff,
  runAff: runAff,
  runAff_: runAff_,
  runSuspendedAff: runSuspendedAff,
  forkAff: forkAff,
  suspendAff: suspendAff,
  supervise: supervise,
  attempt: attempt,
  apathize: apathize,
  delay: delay,
  never: never,
  "finally": $$finally,
  invincible: invincible,
  killFiber: killFiber,
  joinFiber: joinFiber,
  cancelWith: cancelWith,
  bracket: bracket,
  nonCanceler: nonCanceler,
  effectCanceler: effectCanceler,
  fiberCanceler: fiberCanceler,
  functorAff: functorAff,
  applyAff: applyAff,
  applicativeAff: applicativeAff,
  bindAff: bindAff,
  monadAff: monadAff,
  semigroupAff: semigroupAff,
  monoidAff: monoidAff,
  altAff: altAff,
  plusAff: plusAff,
  monadRecAff: monadRecAff,
  monadThrowAff: monadThrowAff,
  monadErrorAff: monadErrorAff,
  monadEffectAff: monadEffectAff,
  lazyAff: lazyAff,
  functorParAff: functorParAff,
  applyParAff: applyParAff,
  applicativeParAff: applicativeParAff,
  semigroupParAff: semigroupParAff,
  monoidParAff: monoidParAff,
  altParAff: altParAff,
  plusParAff: plusParAff,
  alternativeParAff: alternativeParAff,
  parallelAff: parallelAff,
  functorFiber: functorFiber,
  applyFiber: applyFiber,
  applicativeFiber: applicativeFiber,
  newtypeCanceler: newtypeCanceler,
  semigroupCanceler: semigroupCanceler,
  monoidCanceler: monoidCanceler,
  makeAff: $foreign.makeAff,
  generalBracket: $foreign.generalBracket
};
},{"./foreign.js":"../output/Effect.Aff/foreign.js","../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Parallel/index.js":"../output/Control.Parallel/index.js","../Control.Parallel.Class/index.js":"../output/Control.Parallel.Class/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Effect.Exception/index.js":"../output/Effect.Exception/index.js","../Effect.Unsafe/index.js":"../output/Effect.Unsafe/index.js","../Partial.Unsafe/index.js":"../output/Partial.Unsafe/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Effect.Console/foreign.js":[function(require,module,exports) {
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

exports.timeLog = function (s) {
  return function () {
    console.timeLog(s);
    return {};
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

exports.clear = function () {
  console.clear();
  return {};
};
},{}],"../output/Effect.Console/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Show = require("../Data.Show/index.js");

var warnShow = function warnShow(dictShow) {
  return function (a) {
    return $foreign.warn(Data_Show.show(dictShow)(a));
  };
};

var logShow = function logShow(dictShow) {
  return function (a) {
    return $foreign.log(Data_Show.show(dictShow)(a));
  };
};

var infoShow = function infoShow(dictShow) {
  return function (a) {
    return $foreign.info(Data_Show.show(dictShow)(a));
  };
};

var errorShow = function errorShow(dictShow) {
  return function (a) {
    return $foreign.error(Data_Show.show(dictShow)(a));
  };
};

module.exports = {
  logShow: logShow,
  warnShow: warnShow,
  errorShow: errorShow,
  infoShow: infoShow,
  log: $foreign.log,
  warn: $foreign.warn,
  error: $foreign.error,
  info: $foreign.info,
  time: $foreign.time,
  timeLog: $foreign.timeLog,
  timeEnd: $foreign.timeEnd,
  clear: $foreign.clear
};
},{"./foreign.js":"../output/Effect.Console/foreign.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Array/foreign.js":[function(require,module,exports) {
"use strict"; //------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = new Array(step * (end - start) + 1);
    var i = start,
        n = 0;

    while (i !== end) {
      result[n++] = i;
      i += step;
    }

    result[n] = i;
    return result;
  };
};

var replicateFill = function replicateFill(count) {
  return function (value) {
    if (count < 1) {
      return [];
    }

    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function replicatePolyfill(count) {
  return function (value) {
    var result = [];
    var n = 0;

    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }

    return result;
  };
}; // In browsers that have Array.prototype.fill we use it, as it's faster.


exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

exports.fromFoldableImpl = function () {
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }

  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;

    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }

    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
}(); //------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.length = function (xs) {
  return xs.length;
}; //------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------


exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
}; //------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------


exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
}; //------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------


exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing : just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }

        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }

        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
}; //------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------


exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];

  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];

    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }

  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no = [];

    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x)) yes.push(x);else no.push(x);
    }

    return {
      yes: yes,
      no: no
    };
  };
}; //------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.sortImpl = function (f) {
  return function (l) {
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
}; //------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
}; //------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);

      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }

      return result;
    };
  };
}; //------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------


exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};
},{}],"../output/Control.Monad.ST.Internal/foreign.js":[function(require,module,exports) {
"use strict";

exports.map_ = function (f) {
  return function (a) {
    return function () {
      return f(a());
    };
  };
};

exports.pure_ = function (a) {
  return function () {
    return a;
  };
};

exports.bind_ = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.run = function (f) {
  return f();
};

exports["while"] = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports["for"] = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreach = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

exports.new = function (val) {
  return function () {
    return {
      value: val
    };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (a) {
  return function (ref) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};
},{}],"../output/Control.Monad.ST.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var modify = function modify(f) {
  return $foreign["modify'"](function (s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};

var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function () {
  return applicativeST;
}, function () {
  return bindST;
});
var bindST = new Control_Bind.Bind(function () {
  return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function () {
  return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function () {
  return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadST;
}, function (f) {
  return function (a) {
    var isLooping = function isLooping(v) {
      if (v instanceof Control_Monad_Rec_Class.Loop) {
        return true;
      }

      ;
      return false;
    };

    var fromDone = function fromDone(v) {
      if (v instanceof Control_Monad_Rec_Class.Done) {
        return v.value0;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [v.constructor.name]);
    };

    return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (r) {
      return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function (v) {
        if (v instanceof Control_Monad_Rec_Class.Loop) {
          return Control_Bind.bind(bindST)(f(v.value0))(function (e) {
            return Data_Functor["void"](functorST)($foreign.write(e)(r));
          });
        }

        ;

        if (v instanceof Control_Monad_Rec_Class.Done) {
          return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [v.constructor.name]);
      })))(function () {
        return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
      });
    });
  };
});
module.exports = {
  modify: modify,
  functorST: functorST,
  applyST: applyST,
  applicativeST: applicativeST,
  bindST: bindST,
  monadST: monadST,
  monadRecST: monadRecST,
  map_: $foreign.map_,
  pure_: $foreign.pure_,
  bind_: $foreign.bind_,
  run: $foreign.run,
  "while": $foreign["while"],
  "for": $foreign["for"],
  foreach: $foreign.foreach,
  "new": $foreign["new"],
  read: $foreign.read,
  "modify'": $foreign["modify'"],
  write: $foreign.write
};
},{"./foreign.js":"../output/Control.Monad.ST.Internal/foreign.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Array.ST/foreign.js":[function(require,module,exports) {
"use strict";

exports.empty = function () {
  return [];
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (i) {
      return function (xs) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (i) {
  return function (a) {
    return function (xs) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.popImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.pop()) : nothing;
      };
    };
  };
};

exports.pushAll = function (as) {
  return function (xs) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.shiftImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.shift()) : nothing;
      };
    };
  };
};

exports.unshiftAll = function (as) {
  return function (xs) {
    return function () {
      return xs.unshift.apply(xs, as);
    };
  };
};

exports.splice = function (i) {
  return function (howMany) {
    return function (bs) {
      return function (xs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.unsafeFreeze = function (xs) {
  return function () {
    return xs;
  };
};

exports.unsafeThaw = function (xs) {
  return function () {
    return xs;
  };
};

function copyImpl(xs) {
  return function () {
    return xs.slice();
  };
}

exports.freeze = copyImpl;
exports.thaw = copyImpl;

exports.sortByImpl = function (comp) {
  return function (xs) {
    return function () {
      return xs.sort(function (x, y) {
        return comp(x)(y);
      });
    };
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);

    for (var i = 0; i < n; i++) {
      as[i] = {
        value: xs[i],
        index: i
      };
    }

    return as;
  };
};
},{}],"../output/Data.Array.ST/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var withArray = function withArray(f) {
  return function (xs) {
    return function __do() {
      var result = $foreign.thaw(xs)();
      f(result)();
      return $foreign.unsafeFreeze(result)();
    };
  };
};

var unshift = function unshift(a) {
  return $foreign.unshiftAll([a]);
};

var sortBy = function sortBy(comp) {
  var comp$prime = function comp$prime(x) {
    return function (y) {
      var v = comp(x)(y);

      if (v instanceof Data_Ordering.GT) {
        return 1;
      }

      ;

      if (v instanceof Data_Ordering.EQ) {
        return 0;
      }

      ;

      if (v instanceof Data_Ordering.LT) {
        return -1 | 0;
      }

      ;
      throw new Error("Failed pattern match at Data.Array.ST (line 105, column 15 - line 108, column 13): " + [v.constructor.name]);
    };
  };

  return $foreign.sortByImpl(comp$prime);
};

var sortWith = function sortWith(dictOrd) {
  return function (f) {
    return sortBy(Data_Ord.comparing(dictOrd)(f));
  };
};

var sort = function sort(dictOrd) {
  return sortBy(Data_Ord.compare(dictOrd));
};

var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var run = function run(st) {
  return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
};

var push = function push(a) {
  return $foreign.pushAll([a]);
};

var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var modify = function modify(i) {
  return function (f) {
    return function (xs) {
      return function __do() {
        var entry = peek(i)(xs)();

        if (entry instanceof Data_Maybe.Just) {
          return $foreign.poke(i)(f(entry.value0))(xs)();
        }

        ;

        if (entry instanceof Data_Maybe.Nothing) {
          return false;
        }

        ;
        throw new Error("Failed pattern match at Data.Array.ST (line 188, column 3 - line 190, column 26): " + [entry.constructor.name]);
      };
    };
  };
};

module.exports = {
  run: run,
  withArray: withArray,
  peek: peek,
  modify: modify,
  pop: pop,
  push: push,
  shift: shift,
  unshift: unshift,
  sort: sort,
  sortBy: sortBy,
  sortWith: sortWith,
  empty: $foreign.empty,
  poke: $foreign.poke,
  pushAll: $foreign.pushAll,
  unshiftAll: $foreign.unshiftAll,
  splice: $foreign.splice,
  freeze: $foreign.freeze,
  thaw: $foreign.thaw,
  unsafeFreeze: $foreign.unsafeFreeze,
  unsafeThaw: $foreign.unsafeThaw,
  toAssocArray: $foreign.toAssocArray
};
},{"./foreign.js":"../output/Data.Array.ST/foreign.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad.ST.Internal/index.js":"../output/Control.Monad.ST.Internal/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js"}],"../output/Data.Array.ST.Iterator/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Iterator = function () {
  function Iterator(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Iterator.create = function (value0) {
    return function (value1) {
      return new Iterator(value0, value1);
    };
  };

  return Iterator;
}();

var peek = function peek(v) {
  return function __do() {
    var i = Control_Monad_ST_Internal.read(v.value1)();
    return v.value0(i);
  };
};

var next = function next(v) {
  return function __do() {
    var i = Control_Monad_ST_Internal.read(v.value1)();
    Control_Monad_ST_Internal.modify(function (v1) {
      return v1 + 1 | 0;
    })(v.value1)();
    return v.value0(i);
  };
};

var pushWhile = function pushWhile(p) {
  return function (iter) {
    return function (array) {
      return function __do() {
        var $$break = Control_Monad_ST_Internal["new"](false)();

        while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
          (function __do() {
            var mx = peek(iter)();

            if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
              Data_Array_ST.push(mx.value0)(array)();
              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
            }

            ;
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
          })();
        }

        ;
        return {};
      };
    };
  };
};

var pushAll = pushWhile(Data_Function["const"](true));

var iterator = function iterator(f) {
  return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};

var iterate = function iterate(iter) {
  return function (f) {
    return function __do() {
      var $$break = Control_Monad_ST_Internal["new"](false)();

      while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
        (function __do() {
          var mx = next(iter)();

          if (mx instanceof Data_Maybe.Just) {
            return f(mx.value0)();
          }

          ;

          if (mx instanceof Data_Maybe.Nothing) {
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
          }

          ;
          throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
        })();
      }

      ;
      return {};
    };
  };
};

var exhausted = function () {
  var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
  return function ($14) {
    return $13(peek($14));
  };
}();

module.exports = {
  iterator: iterator,
  iterate: iterate,
  next: next,
  peek: peek,
  exhausted: exhausted,
  pushWhile: pushWhile,
  pushAll: pushAll
};
},{"../Control.Monad.ST.Internal/index.js":"../output/Control.Monad.ST.Internal/index.js","../Data.Array.ST/index.js":"../output/Data.Array.ST/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js"}],"../output/Data.Unfoldable/foreign.js":[function(require,module,exports) {
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;

            while (true) {
              // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};
},{}],"../output/Data.Unfoldable1/foreign.js":[function(require,module,exports) {
"use strict";

exports.unfoldr1ArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;

            while (true) {
              // eslint-disable-line no-constant-condition
              var tuple = f(value);
              result.push(fst(tuple));
              var maybe = snd(tuple);
              if (isNothing(maybe)) return result;
              value = fromJust(maybe);
            }
          };
        };
      };
    };
  };
};
},{}],"../output/Data.Unfoldable1/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Unfoldable1 = function Unfoldable1(unfoldr1) {
  this.unfoldr1 = unfoldr1;
};

var unfoldr1 = function unfoldr1(dict) {
  return dict.unfoldr1;
};

var unfoldable1Maybe = new Unfoldable1(function (f) {
  return function (b) {
    return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
  };
});
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

var replicate1 = function replicate1(dictUnfoldable1) {
  return function (n) {
    return function (v) {
      var step = function step(i) {
        if (i <= 0) {
          return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
        }

        ;

        if (Data_Boolean.otherwise) {
          return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
        }

        ;
        throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [i.constructor.name]);
      };

      return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
    };
  };
};

var replicate1A = function replicate1A(dictApply) {
  return function (dictUnfoldable1) {
    return function (dictTraversable1) {
      return function (n) {
        return function (m) {
          return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
        };
      };
    };
  };
};

var singleton = function singleton(dictUnfoldable1) {
  return replicate1(dictUnfoldable1)(1);
};

var range = function range(dictUnfoldable1) {
  return function (start) {
    return function (end) {
      var go = function go(delta) {
        return function (i) {
          var i$prime = i + delta | 0;
          return new Data_Tuple.Tuple(i, function () {
            var $8 = i === end;

            if ($8) {
              return Data_Maybe.Nothing.value;
            }

            ;
            return new Data_Maybe.Just(i$prime);
          }());
        };
      };

      var delta = function () {
        var $9 = end >= start;

        if ($9) {
          return 1;
        }

        ;
        return -1 | 0;
      }();

      return unfoldr1(dictUnfoldable1)(go(delta))(start);
    };
  };
};

module.exports = {
  Unfoldable1: Unfoldable1,
  unfoldr1: unfoldr1,
  replicate1: replicate1,
  replicate1A: replicate1A,
  singleton: singleton,
  range: range,
  unfoldable1Array: unfoldable1Array,
  unfoldable1Maybe: unfoldable1Maybe
};
},{"./foreign.js":"../output/Data.Unfoldable1/foreign.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js"}],"../output/Data.Unfoldable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Unfoldable = function Unfoldable(Unfoldable10, unfoldr) {
  this.Unfoldable10 = Unfoldable10;
  this.unfoldr = unfoldr;
};

var unfoldr = function unfoldr(dict) {
  return dict.unfoldr;
};

var unfoldableMaybe = new Unfoldable(function () {
  return Data_Unfoldable1.unfoldable1Maybe;
}, function (f) {
  return function (b) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
  };
});
var unfoldableArray = new Unfoldable(function () {
  return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

var replicate = function replicate(dictUnfoldable) {
  return function (n) {
    return function (v) {
      var step = function step(i) {
        var $7 = i <= 0;

        if ($7) {
          return Data_Maybe.Nothing.value;
        }

        ;
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
      };

      return unfoldr(dictUnfoldable)(step)(n);
    };
  };
};

var replicateA = function replicateA(dictApplicative) {
  return function (dictUnfoldable) {
    return function (dictTraversable) {
      return function (n) {
        return function (m) {
          return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
        };
      };
    };
  };
};

var none = function none(dictUnfoldable) {
  return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};

var fromMaybe = function fromMaybe(dictUnfoldable) {
  return unfoldr(dictUnfoldable)(function (b) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
  });
};

module.exports = {
  Unfoldable: Unfoldable,
  unfoldr: unfoldr,
  replicate: replicate,
  replicateA: replicateA,
  none: none,
  fromMaybe: fromMaybe,
  unfoldableArray: unfoldableArray,
  unfoldableMaybe: unfoldableMaybe
};
},{"./foreign.js":"../output/Data.Unfoldable/foreign.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Array/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
      };
    };
  };
};

var zip = $foreign.zipWith(Data_Tuple.Tuple.create);

var updateAtIndices = function updateAtIndices(dictFoldable) {
  return function (us) {
    return function (xs) {
      return Data_Array_ST.withArray(function (res) {
        return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
          return Data_Array_ST.poke(v.value0)(v.value1)(res);
        })(us);
      })(xs)();
    };
  };
};

var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var unsafeIndex = function unsafeIndex(dictPartial) {
  return $foreign.unsafeIndexImpl;
};

var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
  return function (xs) {
    return new Data_Maybe.Just({
      head: x,
      tail: xs
    });
  };
});

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return function (xs) {
    var len = $foreign.length(xs);

    var f = function f(i) {
      if (i < len) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }

      ;
      throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [i.constructor.name]);
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
  };
};

var takeEnd = function takeEnd(n) {
  return function (xs) {
    return $foreign.drop($foreign.length(xs) - n | 0)(xs);
  };
};

var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
  return function (xs) {
    return new Data_Maybe.Just(xs);
  };
});

var sortBy = function sortBy(comp) {
  return function (xs) {
    var comp$prime = function comp$prime(x) {
      return function (y) {
        var v = comp(x)(y);

        if (v instanceof Data_Ordering.GT) {
          return 1;
        }

        ;

        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }

        ;

        if (v instanceof Data_Ordering.LT) {
          return -1 | 0;
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [v.constructor.name]);
      };
    };

    return $foreign.sortImpl(comp$prime)(xs);
  };
};

var sortWith = function sortWith(dictOrd) {
  return function (f) {
    return sortBy(Data_Ord.comparing(dictOrd)(f));
  };
};

var sort = function sort(dictOrd) {
  return function (xs) {
    return sortBy(Data_Ord.compare(dictOrd))(xs);
  };
};

var singleton = function singleton(a) {
  return [a];
};

var $$null = function $$null(xs) {
  return $foreign.length(xs) === 0;
};

var nubByEq = function nubByEq(eq) {
  return function (xs) {
    return function __do() {
      var arr = Data_Array_ST.empty();
      Control_Monad_ST_Internal.foreach(xs)(function (x) {
        return function __do() {
          var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function () {
            var $84 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $85 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
              return eq(v)(x);
            });
            return function ($86) {
              return $84($85($86));
            };
          }())(Data_Array_ST.unsafeFreeze(arr))();
          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
        };
      })();
      return Data_Array_ST.unsafeFreeze(arr)();
    }();
  };
};

var nubEq = function nubEq(dictEq) {
  return nubByEq(Data_Eq.eq(dictEq));
};

var modifyAtIndices = function modifyAtIndices(dictFoldable) {
  return function (is) {
    return function (f) {
      return function (xs) {
        return Data_Array_ST.withArray(function (res) {
          return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
            return Data_Array_ST.modify(i)(f)(res);
          })(is);
        })(xs)();
      };
    };
  };
};

var mapWithIndex = function mapWithIndex(f) {
  return function (xs) {
    return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([]));
    };
  };
};

var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var init = function init(xs) {
  if ($$null(xs)) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (Data_Boolean.otherwise) {
    return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
  }

  ;
  throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [xs.constructor.name]);
};

var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var last = function last(xs) {
  return index(xs)($foreign.length(xs) - 1 | 0);
};

var unsnoc = function unsnoc(xs) {
  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return function (v1) {
      return {
        init: v,
        last: v1
      };
    };
  })(init(xs)))(last(xs));
};

var modifyAt = function modifyAt(i) {
  return function (f) {
    return function (xs) {
      var go = function go(x) {
        return updateAt(i)(f(x))(xs);
      };

      return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
    };
  };
};

var span = function span(p) {
  return function (arr) {
    var go = function go($copy_i) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(i) {
        var v = index(arr)(i);

        if (v instanceof Data_Maybe.Just) {
          var $60 = p(v.value0);

          if ($60) {
            $copy_i = i + 1 | 0;
            return;
          }

          ;
          $tco_done = true;
          return new Data_Maybe.Just(i);
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_i);
      }

      ;
      return $tco_result;
    };

    var breakIndex = go(0);

    if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
      return {
        init: [],
        rest: arr
      };
    }

    ;

    if (breakIndex instanceof Data_Maybe.Just) {
      return {
        init: $foreign.slice(0)(breakIndex.value0)(arr),
        rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
      };
    }

    ;

    if (breakIndex instanceof Data_Maybe.Nothing) {
      return {
        init: arr,
        rest: []
      };
    }

    ;
    throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [breakIndex.constructor.name]);
  };
};

var takeWhile = function takeWhile(p) {
  return function (xs) {
    return span(p)(xs).init;
  };
};

var unzip = function unzip(xs) {
  return function __do() {
    var fsts = Data_Array_ST.empty();
    var snds = Data_Array_ST.empty();
    var iter = Data_Array_ST_Iterator.iterator(function (v) {
      return index(xs)(v);
    })();
    Data_Array_ST_Iterator.iterate(iter)(function (v) {
      return function __do() {
        Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
      };
    })();
    var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
    var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
    return new Data_Tuple.Tuple(fsts$prime, snds$prime);
  }();
};

var head = function head(xs) {
  return index(xs)(0);
};

var nubBy = function nubBy(comp) {
  return function (xs) {
    var indexedAndSorted = sortBy(function (x) {
      return function (y) {
        return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
      };
    })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
    var v = head(indexedAndSorted);

    if (v instanceof Data_Maybe.Nothing) {
      return [];
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(function __do() {
        var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
        Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
          return function __do() {
            var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function () {
              var $87 = function (dictPartial) {
                var $89 = Data_Maybe.fromJust();
                return function ($90) {
                  return $89(last($90));
                };
              }();

              return function ($88) {
                return Data_Tuple.snd($87($88));
              };
            }())(Data_Array_ST.unsafeFreeze(result))();
            return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
          };
        })();
        return Data_Array_ST.unsafeFreeze(result)();
      }()));
    }

    ;
    throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [v.constructor.name]);
  };
};

var nub = function nub(dictOrd) {
  return nubBy(Data_Ord.compare(dictOrd));
};

var groupBy = function groupBy(op) {
  return function (xs) {
    return function __do() {
      var result = Data_Array_ST.empty();
      var iter = Data_Array_ST_Iterator.iterator(function (v) {
        return index(xs)(v);
      })();
      Data_Array_ST_Iterator.iterate(iter)(function (x) {
        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
          var sub = Data_Array_ST.empty();
          Data_Array_ST.push(x)(sub)();
          Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
          var grp = Data_Array_ST.unsafeFreeze(sub)();
          return Data_Array_ST.push(grp)(result)();
        });
      })();
      return Data_Array_ST.unsafeFreeze(result)();
    }();
  };
};

var group = function group(dictEq) {
  return function (xs) {
    return groupBy(Data_Eq.eq(dictEq))(xs);
  };
};

var group$prime = function group$prime(dictOrd) {
  var $91 = group(dictOrd.Eq0());
  var $92 = sort(dictOrd);
  return function ($93) {
    return $91($92($93));
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};

var foldRecM = function foldRecM(dictMonadRec) {
  return function (f) {
    return function (a) {
      return function (array) {
        var go = function go(res) {
          return function (i) {
            if (i >= $foreign.length(array)) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(res));
            }

            ;

            if (Data_Boolean.otherwise) {
              return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(res)(unsafeIndex()(array)(i)))(function (res$prime) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                  a: res$prime,
                  b: i + 1 | 0
                }));
              });
            }

            ;
            throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [res.constructor.name, i.constructor.name]);
          };
        };

        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
      };
    };
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (a) {
      return $foreign["uncons'"](function (v) {
        return Control_Applicative.pure(dictMonad.Applicative0())(a);
      })(function (b) {
        return function (bs) {
          return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
            return foldM(dictMonad)(f)(a$prime)(bs);
          });
        };
      });
    };
  };
};

var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var insertBy = function insertBy(cmp) {
  return function (x) {
    return function (ys) {
      var i = Data_Maybe.maybe(0)(function (v) {
        return v + 1 | 0;
      })(findLastIndex(function (y) {
        return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
      })(ys));
      return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var intersectBy = function intersectBy(eq) {
  return function (xs) {
    return function (ys) {
      return $foreign.filter(function (x) {
        return Data_Maybe.isJust(findIndex(eq(x))(ys));
      })(xs);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  return function (xs) {
    return span(p)(xs).rest;
  };
};

var dropEnd = function dropEnd(n) {
  return function (xs) {
    return $foreign.take($foreign.length(xs) - n | 0)(xs);
  };
};

var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var deleteBy = function deleteBy(v) {
  return function (v1) {
    return function (v2) {
      if (v2.length === 0) {
        return [];
      }

      ;
      return Data_Maybe.maybe(v2)(function (i) {
        return Data_Maybe.fromJust()(deleteAt(i)(v2));
      })(findIndex(v(v1))(v2));
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};

var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));

var mapMaybe = function mapMaybe(f) {
  return concatMap(function () {
    var $94 = Data_Maybe.maybe([])(singleton);
    return function ($95) {
      return $94(f($95));
    };
  }());
};

var filterA = function filterA(dictApplicative) {
  return function (p) {
    var $96 = Data_Functor.map(dictApplicative.Apply0().Functor0())(mapMaybe(function (v) {
      if (v.value1) {
        return new Data_Maybe.Just(v.value0);
      }

      ;
      return Data_Maybe.Nothing.value;
    }));
    var $97 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(x))(p(x));
    });
    return function ($98) {
      return $96($97($98));
    };
  };
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(i) {
  return function (f) {
    return function (xs) {
      var go = function go(x) {
        var v = f(x);

        if (v instanceof Data_Maybe.Nothing) {
          return deleteAt(i)(xs);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return updateAt(i)(v.value0)(xs);
        }

        ;
        throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [v.constructor.name]);
      };

      return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
    };
  };
};

module.exports = {
  fromFoldable: fromFoldable,
  toUnfoldable: toUnfoldable,
  singleton: singleton,
  some: some,
  many: many,
  "null": $$null,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  updateAtIndices: updateAtIndices,
  modifyAt: modifyAt,
  modifyAtIndices: modifyAtIndices,
  alterAt: alterAt,
  concatMap: concatMap,
  filterA: filterA,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  mapWithIndex: mapWithIndex,
  sort: sort,
  sortBy: sortBy,
  sortWith: sortWith,
  takeEnd: takeEnd,
  takeWhile: takeWhile,
  dropEnd: dropEnd,
  dropWhile: dropWhile,
  span: span,
  group: group,
  "group'": group$prime,
  groupBy: groupBy,
  nub: nub,
  nubEq: nubEq,
  nubBy: nubBy,
  nubByEq: nubByEq,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  foldM: foldM,
  foldRecM: foldRecM,
  unsafeIndex: unsafeIndex,
  range: $foreign.range,
  replicate: $foreign.replicate,
  length: $foreign.length,
  cons: $foreign.cons,
  snoc: $foreign.snoc,
  reverse: $foreign.reverse,
  concat: $foreign.concat,
  filter: $foreign.filter,
  partition: $foreign.partition,
  slice: $foreign.slice,
  take: $foreign.take,
  drop: $foreign.drop,
  zipWith: $foreign.zipWith
};
},{"./foreign.js":"../output/Data.Array/foreign.js","../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.ST.Internal/index.js":"../output/Control.Monad.ST.Internal/index.js","../Data.Array.ST/index.js":"../output/Data.Array.ST/index.js","../Data.Array.ST.Iterator/index.js":"../output/Data.Array.ST.Iterator/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js"}],"../output/Data.NonEmpty/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var NonEmpty = function () {
  function NonEmpty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  NonEmpty.create = function (value0) {
    return function (value1) {
      return new NonEmpty(value0, value1);
    };
  };

  return NonEmpty;
}();

var unfoldable1NonEmpty = function unfoldable1NonEmpty(dictUnfoldable) {
  return new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
      return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
    };
  });
};

var tail = function tail(v) {
  return v.value1;
};

var singleton = function singleton(dictPlus) {
  return function (a) {
    return new NonEmpty(a, Control_Plus.empty(dictPlus));
  };
};

var showNonEmpty = function showNonEmpty(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (v) {
      return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
    });
  };
};

var oneOf = function oneOf(dictAlternative) {
  return function (v) {
    return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
  };
};

var head = function head(v) {
  return v.value0;
};

var functorNonEmpty = function functorNonEmpty(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (m) {
      return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
    };
  });
};

var functorWithIndex = function functorWithIndex(dictFunctorWithIndex) {
  return new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmpty(dictFunctorWithIndex.Functor0());
  }, function (f) {
    return function (v) {
      return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
        return f(Data_Maybe.Just.create($146));
      })(v.value1));
    };
  });
};

var fromNonEmpty = function fromNonEmpty(f) {
  return function (v) {
    return f(v.value0)(v.value1);
  };
};

var foldl1 = function foldl1(dictFoldable) {
  return function (f) {
    return function (v) {
      return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
    };
  };
};

var foldableNonEmpty = function foldableNonEmpty(dictFoldable) {
  return new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
      };
    };
  });
};

var foldableWithIndexNonEmpty = function foldableWithIndexNonEmpty(dictFoldableWithIndex) {
  return new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
  }, function (dictMonoid) {
    return function (f) {
      return function (v) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
          return f(Data_Maybe.Just.create($147));
        })(v.value1));
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
          return f(Data_Maybe.Just.create($148));
        })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
      };
    };
  }, function (f) {
    return function (b) {
      return function (v) {
        return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
          return f(Data_Maybe.Just.create($149));
        })(b)(v.value1));
      };
    };
  });
};

var traversableNonEmpty = function traversableNonEmpty(dictTraversable) {
  return new Data_Traversable.Traversable(function () {
    return foldableNonEmpty(dictTraversable.Foldable1());
  }, function () {
    return functorNonEmpty(dictTraversable.Functor0());
  }, function (dictApplicative) {
    return function (v) {
      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
    };
  }, function (dictApplicative) {
    return function (f) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
      };
    };
  });
};

var traversableWithIndexNonEmpty = function traversableWithIndexNonEmpty(dictTraversableWithIndex) {
  return new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
  }, function () {
    return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
  }, function () {
    return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
  }, function (dictApplicative) {
    return function (f) {
      return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
          return f(Data_Maybe.Just.create($150));
        })(v.value1));
      };
    };
  });
};

var foldable1NonEmpty = function foldable1NonEmpty(dictFoldable) {
  return new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableNonEmpty(dictFoldable);
  }, function (dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictSemigroup) {
    return function (f) {
      return function (v) {
        return Data_Foldable.foldl(dictFoldable)(function (s) {
          return function (a1) {
            return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
          };
        })(f(v.value0))(v.value1);
      };
    };
  });
};

var eqNonEmpty = function eqNonEmpty(dictEq1) {
  return function (dictEq) {
    return new Data_Eq.Eq(function (x) {
      return function (y) {
        return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
      };
    });
  };
};

var ordNonEmpty = function ordNonEmpty(dictOrd1) {
  return function (dictOrd) {
    return new Data_Ord.Ord(function () {
      return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
    }, function (x) {
      return function (y) {
        var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

        if (v instanceof Data_Ordering.LT) {
          return Data_Ordering.LT.value;
        }

        ;

        if (v instanceof Data_Ordering.GT) {
          return Data_Ordering.GT.value;
        }

        ;
        return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
      };
    });
  };
};

var eq1NonEmpty = function eq1NonEmpty(dictEq1) {
  return new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
  });
};

var ord1NonEmpty = function ord1NonEmpty(dictOrd1) {
  return new Data_Ord.Ord1(function () {
    return eq1NonEmpty(dictOrd1.Eq10());
  }, function (dictOrd) {
    return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
  });
};

module.exports = {
  NonEmpty: NonEmpty,
  singleton: singleton,
  foldl1: foldl1,
  fromNonEmpty: fromNonEmpty,
  oneOf: oneOf,
  head: head,
  tail: tail,
  showNonEmpty: showNonEmpty,
  eqNonEmpty: eqNonEmpty,
  eq1NonEmpty: eq1NonEmpty,
  ordNonEmpty: ordNonEmpty,
  ord1NonEmpty: ord1NonEmpty,
  functorNonEmpty: functorNonEmpty,
  functorWithIndex: functorWithIndex,
  foldableNonEmpty: foldableNonEmpty,
  foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
  traversableNonEmpty: traversableNonEmpty,
  traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
  foldable1NonEmpty: foldable1NonEmpty,
  unfoldable1NonEmpty: unfoldable1NonEmpty
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Data.List.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Nil = function () {
  function Nil() {}

  ;
  Nil.value = new Nil();
  return Nil;
}();

var Cons = function () {
  function Cons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Cons.create = function (value0) {
    return function (value1) {
      return new Cons(value0, value1);
    };
  };

  return Cons;
}();

var NonEmptyList = function NonEmptyList(x) {
  return x;
};

var toList = function toList(v) {
  return new Cons(v.value0, v.value1);
};

var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
  return n;
}, NonEmptyList);

var nelCons = function nelCons(a) {
  return function (v) {
    return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
  };
};

var listMap = function listMap(f) {
  var chunkedRevMap = function chunkedRevMap($copy_chunksAcc) {
    return function ($copy_v) {
      var $tco_var_chunksAcc = $copy_chunksAcc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(chunksAcc, v) {
        if (v instanceof Cons && v.value1 instanceof Cons && v.value1.value1 instanceof Cons) {
          $tco_var_chunksAcc = new Cons(v, chunksAcc);
          $copy_v = v.value1.value1.value1;
          return;
        }

        ;

        var unrolledMap = function unrolledMap(v1) {
          if (v1 instanceof Cons && v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
          }

          ;

          if (v1 instanceof Cons && v1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), Nil.value);
          }

          ;
          return Nil.value;
        };

        var reverseUnrolledMap = function reverseUnrolledMap($copy_v1) {
          return function ($copy_acc) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v1, acc) {
              if (v1 instanceof Cons && v1.value0 instanceof Cons && v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons) {
                $tco_var_v1 = v1.value1;
                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                return;
              }

              ;
              $tco_done = true;
              return acc;
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
            }

            ;
            return $tco_result;
          };
        };

        $tco_done = true;
        return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return chunkedRevMap(Nil.value);
};

var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldl(foldableList)(function (acc) {
      var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
      return function ($203) {
        return $202(f($203));
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  var go = function go($copy_b) {
    return function ($copy_v) {
      var $tco_var_b = $copy_b;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(b, v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return b;
        }

        ;

        if (v instanceof Cons) {
          $tco_var_b = f(b)(v.value0);
          $copy_v = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_b, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return function (b) {
    var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
    var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
    return function ($205) {
      return $204(rev($205));
    };
  };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableList;
}, function (dictMonoid) {
  return function (f) {
    return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
        var $207 = f(i);
        return function ($208) {
          return $206($207($208));
        };
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  return function (acc) {
    var $209 = Data_Foldable.foldl(foldableList)(function (v) {
      return function (a) {
        return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
      };
    })(new Data_Tuple.Tuple(0, acc));
    return function ($210) {
      return Data_Tuple.snd($209($210));
    };
  };
}, function (f) {
  return function (b) {
    return function (xs) {
      var v = function () {
        var rev = Data_Foldable.foldl(foldableList)(function (v1) {
          return function (a) {
            return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
          };
        });
        return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
      }();

      return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
        return function (a) {
          return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
        };
      })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
    };
  };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableNonEmptyList;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function () {
        var $211 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($212) {
          return f($211($212));
        };
      }())(v);
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($214) {
          return f($213($214));
        };
      }())(b)(v);
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($216) {
          return f($215($216));
        };
      }())(b)(v);
    };
  };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorList;
}, function (f) {
  return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
    return function (x) {
      return function (acc) {
        return new Cons(f(i)(x), acc);
      };
    };
  })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorNonEmptyList;
}, function (fn) {
  return function (v) {
    return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function () {
      var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
      return function ($218) {
        return fn($217($218));
      };
    }())(v));
  };
});
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
  return function (ys) {
    return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
  };
});
var monoidList = new Data_Monoid.Monoid(function () {
  return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
  return function (as$prime) {
    return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
  };
});

var showList = function showList(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof Nil) {
      return "Nil";
    }

    ;
    return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
  });
};

var showNonEmptyList = function showNonEmptyList(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
  });
};

var traversableList = new Data_Traversable.Traversable(function () {
  return foldableList;
}, function () {
  return functorList;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    var $219 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
    var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
      var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
      return function ($223) {
        return $222(f($223));
      };
    })(Control_Applicative.pure(dictApplicative)(Nil.value));
    return function ($221) {
      return $219($220($221));
    };
  };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexList;
}, function () {
  return functorWithIndexList;
}, function () {
  return traversableList;
}, function (dictApplicative) {
  return function (f) {
    var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
    var $224 = Data_Functor.map(dictApplicative.Apply0().Functor0())(rev);
    var $225 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $227 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
        var $228 = f(i);
        return function ($229) {
          return $227($228($229));
        };
      };
    })(Control_Applicative.pure(dictApplicative)(Nil.value));
    return function ($226) {
      return $224($225($226));
    };
  };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexNonEmptyList;
}, function () {
  return functorWithIndexNonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function () {
        var $230 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($231) {
          return f($230($231));
        };
      }())(v));
    };
  };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = new Cons(v.value0, memo);
            return;
          }

          ;

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(Nil.value);
  };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1List;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = new Cons(v.value0.value0, memo);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(Nil.value);
  };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    var go = function go(a) {
      return function (v1) {
        return {
          val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
          acc: new Cons(a, v1.acc)
        };
      };
    };

    return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
      val: Nil.value,
      acc: Nil.value
    })(v.value1).val);
  };
});
var extendList = new Control_Extend.Extend(function () {
  return functorList;
}, function (f) {
  return function (v) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      var go = function go(a$prime) {
        return function (v1) {
          var acc$prime = new Cons(a$prime, v1.acc);
          return {
            val: new Cons(f(acc$prime), v1.val),
            acc: acc$prime
          };
        };
      };

      return new Cons(f(v), Data_Foldable.foldr(foldableList)(go)({
        val: Nil.value,
        acc: Nil.value
      })(v.value1).val);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 187, column 42): " + [f.constructor.name, v.constructor.name]);
  };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          return function ($copy_v2) {
            var $tco_var_v = $copy_v;
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, v1, v2) {
              if (!v2) {
                $tco_done = true;
                return false;
              }

              ;

              if (v instanceof Nil && v1 instanceof Nil) {
                $tco_done = true;
                return v2;
              }

              ;

              if (v instanceof Cons && v1 instanceof Cons) {
                $tco_var_v = v.value1;
                $tco_var_v1 = v1.value1;
                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                return;
              }

              ;
              $tco_done = true;
              return false;
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
            }

            ;
            return $tco_result;
          };
        };
      };

      return go(xs)(ys)(true);
    };
  };
});

var eqList = function eqList(dictEq) {
  return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};

var eqNonEmptyList = function eqNonEmptyList(dictEq) {
  return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};

var ord1List = new Data_Ord.Ord1(function () {
  return eq1List;
}, function (dictOrd) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.EQ.value;
            }

            ;

            if (v instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.LT.value;
            }

            ;

            if (v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.GT.value;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons) {
              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_var_v = v.value1;
                $copy_v1 = v1.value1;
                return;
              }

              ;
              $tco_done = true;
              return v2;
            }

            ;
            throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [v.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(xs)(ys);
    };
  };
});

var ordList = function ordList(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqList(dictOrd.Eq0());
  }, Data_Ord.compare1(ord1List)(dictOrd));
};

var ordNonEmptyList = function ordNonEmptyList(dictOrd) {
  return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};

var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
  return extendNonEmptyList;
}, function (v) {
  return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
  return functorList;
}, function (v) {
  return function (v1) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [v.constructor.name, v1.constructor.name]);
  };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
  return functorNonEmptyList;
}, function (v) {
  return function (v1) {
    return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
  };
});
var bindList = new Control_Bind.Bind(function () {
  return applyList;
}, function (v) {
  return function (v1) {
    if (v instanceof Nil) {
      return Nil.value;
    }

    ;

    if (v instanceof Cons) {
      return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [v.constructor.name, v1.constructor.name]);
  };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
  return applyNonEmptyList;
}, function (v) {
  return function (f) {
    var v1 = f(v.value0);
    return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($232) {
      return toList(f($232));
    })));
  };
});
var applicativeList = new Control_Applicative.Applicative(function () {
  return applyList;
}, function (a) {
  return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
  return applicativeList;
}, function () {
  return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
  return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
  return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
  return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
  return applicativeList;
}, function () {
  return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
  return alternativeList;
}, function () {
  return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
  return applyNonEmptyList;
}, function () {
  var $233 = Data_NonEmpty.singleton(plusList);
  return function ($234) {
    return NonEmptyList($233($234));
  };
}());
var monadNonEmptyList = new Control_Monad.Monad(function () {
  return applicativeNonEmptyList;
}, function () {
  return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1NonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApply) {
  return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApply) {
  return function (f) {
    return function (v) {
      return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
        var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
        return function ($236) {
          return $235(f($236));
        };
      })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
        return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
      });
    };
  };
});
module.exports = {
  Nil: Nil,
  Cons: Cons,
  NonEmptyList: NonEmptyList,
  toList: toList,
  nelCons: nelCons,
  showList: showList,
  eqList: eqList,
  eq1List: eq1List,
  ordList: ordList,
  ord1List: ord1List,
  semigroupList: semigroupList,
  monoidList: monoidList,
  functorList: functorList,
  functorWithIndexList: functorWithIndexList,
  foldableList: foldableList,
  foldableWithIndexList: foldableWithIndexList,
  unfoldable1List: unfoldable1List,
  unfoldableList: unfoldableList,
  traversableList: traversableList,
  traversableWithIndexList: traversableWithIndexList,
  applyList: applyList,
  applicativeList: applicativeList,
  bindList: bindList,
  monadList: monadList,
  altList: altList,
  plusList: plusList,
  alternativeList: alternativeList,
  monadZeroList: monadZeroList,
  monadPlusList: monadPlusList,
  extendList: extendList,
  newtypeNonEmptyList: newtypeNonEmptyList,
  eqNonEmptyList: eqNonEmptyList,
  ordNonEmptyList: ordNonEmptyList,
  showNonEmptyList: showNonEmptyList,
  functorNonEmptyList: functorNonEmptyList,
  applyNonEmptyList: applyNonEmptyList,
  applicativeNonEmptyList: applicativeNonEmptyList,
  bindNonEmptyList: bindNonEmptyList,
  monadNonEmptyList: monadNonEmptyList,
  altNonEmptyList: altNonEmptyList,
  extendNonEmptyList: extendNonEmptyList,
  comonadNonEmptyList: comonadNonEmptyList,
  semigroupNonEmptyList: semigroupNonEmptyList,
  foldableNonEmptyList: foldableNonEmptyList,
  traversableNonEmptyList: traversableNonEmptyList,
  foldable1NonEmptyList: foldable1NonEmptyList,
  unfoldable1NonEmptyList: unfoldable1NonEmptyList,
  functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
  foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
  traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
  traversable1NonEmptyList: traversable1NonEmptyList
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Comonad/index.js":"../output/Control.Comonad/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"../output/Data.NonEmpty/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Data.List/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Pattern = function Pattern(x) {
  return x;
};

var updateAt = function updateAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0 && v2 instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(updateAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
  return function (v1) {
    return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
  };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));

var uncons = function uncons(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just({
      head: v.value0,
      tail: v.value1
    });
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [v.constructor.name]);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
      return new Data_Tuple.Tuple(rec.head, rec.tail);
    })(uncons(xs));
  });
};

var tail = function tail(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just(v.value1);
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [v.constructor.name]);
};

var stripPrefix = function stripPrefix(dictEq) {
  return function (v) {
    return function (s) {
      var go = function go(prefix) {
        return function (input) {
          if (prefix instanceof Data_List_Types.Cons && input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0)) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
              a: prefix.value1,
              b: input.value1
            }));
          }

          ;

          if (prefix instanceof Data_List_Types.Nil) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
          }

          ;
          return Data_Maybe.Nothing.value;
        };
      };

      return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
    };
  };
};

var span = function span(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
      var v2 = span(v)(v1.value1);
      return {
        init: new Data_List_Types.Cons(v1.value0, v2.init),
        rest: v2.rest
      };
    }

    ;
    return {
      init: Data_List_Types.Nil.value,
      rest: v1
    };
  };
};

var snoc = function snoc(xs) {
  return function (x) {
    return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
  };
};

var singleton = function singleton(a) {
  return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};

var sortBy = function sortBy(cmp) {
  var merge = function merge(v) {
    return function (v1) {
      if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
        if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
          return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
        }

        ;

        if (Data_Boolean.otherwise) {
          return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
        }

        ;
      }

      ;

      if (v instanceof Data_List_Types.Nil) {
        return v1;
      }

      ;

      if (v1 instanceof Data_List_Types.Nil) {
        return v;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  var mergePairs = function mergePairs(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
      return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
    }

    ;
    return v;
  };

  var mergeAll = function mergeAll($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return v.value0;
      }

      ;
      $copy_v = mergePairs(v);
      return;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var sequences = function sequences(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
      if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
        return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
      }

      ;

      if (Data_Boolean.otherwise) {
        return ascending(v.value1.value0)(function (v1) {
          return new Data_List_Types.Cons(v.value0, v1);
        })(v.value1.value1);
      }

      ;
    }

    ;
    return singleton(v);
  };

  var descending = function descending($copy_a) {
    return function ($copy_as) {
      return function ($copy_v) {
        var $tco_var_a = $copy_a;
        var $tco_var_as = $copy_as;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(a, as, v) {
          if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
            $tco_var_a = v.value0;
            $tco_var_as = new Data_List_Types.Cons(a, as);
            $copy_v = v.value1;
            return;
          }

          ;
          $tco_done = true;
          return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
        }

        ;
        return $tco_result;
      };
    };
  };

  var ascending = function ascending($copy_a) {
    return function ($copy_as) {
      return function ($copy_v) {
        var $tco_var_a = $copy_a;
        var $tco_var_as = $copy_as;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(a, as, v) {
          if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
            $tco_var_a = v.value0;

            $tco_var_as = function $tco_var_as(ys) {
              return as(new Data_List_Types.Cons(a, ys));
            };

            $copy_v = v.value1;
            return;
          }

          ;
          $tco_done = true;
          return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
        }

        ;
        return $tco_result;
      };
    };
  };

  return function ($331) {
    return mergeAll(sequences($331));
  };
};

var sort = function sort(dictOrd) {
  return function (xs) {
    return sortBy(Data_Ord.compare(dictOrd))(xs);
  };
};

var tails = function tails(v) {
  if (v instanceof Data_List_Types.Nil) {
    return singleton(Data_List_Types.Nil.value);
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_List_Types.Cons(v, tails(v.value1));
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [v.constructor.name]);
};

var showPattern = function showPattern(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
  });
};

var reverse = function () {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return acc;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
          $copy_v = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
}();

var take = function () {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      return function ($copy_v1) {
        var $tco_var_acc = $copy_acc;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(acc, v, v1) {
          if (v < 1) {
            $tco_done = true;
            return reverse(acc);
          }

          ;

          if (v1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return reverse(acc);
          }

          ;

          if (v1 instanceof Data_List_Types.Cons) {
            $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
            $tco_var_v = v - 1 | 0;
            $copy_v1 = v1.value1;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [acc.constructor.name, v.constructor.name, v1.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
        }

        ;
        return $tco_result;
      };
    };
  };

  return go(Data_List_Types.Nil.value);
}();

var takeWhile = function takeWhile(p) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Cons && p(v.value0)) {
          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
          $copy_v = v.value1;
          return;
        }

        ;
        $tco_done = true;
        return reverse(acc);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var unsnoc = function unsnoc(lst) {
  var go = function go($copy_v) {
    return function ($copy_acc) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, acc) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return new Data_Maybe.Just({
            revInit: acc,
            last: v.value0
          });
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          $tco_var_v = v.value1;
          $copy_acc = new Data_List_Types.Cons(v.value0, acc);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [v.constructor.name, acc.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_acc);
      }

      ;
      return $tco_result;
    };
  };

  return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
    return {
      init: reverse(h.revInit),
      last: h.last
    };
  })(go(lst)(Data_List_Types.Nil.value));
};

var zipWith = function zipWith(f) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          return function ($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, v1, acc) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }

              ;

              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }

              ;

              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $tco_var_v1 = v1.value1;
                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [v.constructor.name, v1.constructor.name, acc.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
            }

            ;
            return $tco_result;
          };
        };
      };

      return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
    };
  };
};

var zip = zipWith(Data_Tuple.Tuple.create);

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
      };
    };
  };
};

var range = function range(start) {
  return function (end) {
    if (start === end) {
      return singleton(start);
    }

    ;

    if (Data_Boolean.otherwise) {
      var go = function go($copy_s) {
        return function ($copy_e) {
          return function ($copy_step) {
            return function ($copy_rest) {
              var $tco_var_s = $copy_s;
              var $tco_var_e = $copy_e;
              var $tco_var_step = $copy_step;
              var $tco_done = false;
              var $tco_result;

              function $tco_loop(s, e, step, rest) {
                if (s === e) {
                  $tco_done = true;
                  return new Data_List_Types.Cons(s, rest);
                }

                ;

                if (Data_Boolean.otherwise) {
                  $tco_var_s = s + step | 0;
                  $tco_var_e = e;
                  $tco_var_step = step;
                  $copy_rest = new Data_List_Types.Cons(s, rest);
                  return;
                }

                ;
                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name]);
              }

              ;

              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
              }

              ;
              return $tco_result;
            };
          };
        };
      };

      return go(end)(start)(function () {
        var $220 = start > end;

        if ($220) {
          return 1;
        }

        ;
        return -1 | 0;
      }())(Data_List_Types.Nil.value);
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [start.constructor.name, end.constructor.name]);
  };
};

var partition = function partition(p) {
  return function (xs) {
    var select = function select(x) {
      return function (v) {
        var $223 = p(x);

        if ($223) {
          return {
            no: v.no,
            yes: new Data_List_Types.Cons(x, v.yes)
          };
        }

        ;
        return {
          no: new Data_List_Types.Cons(x, v.no),
          yes: v.yes
        };
      };
    };

    return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
      no: Data_List_Types.Nil.value,
      yes: Data_List_Types.Nil.value
    })(xs);
  };
};

var $$null = function $$null(v) {
  if (v instanceof Data_List_Types.Nil) {
    return true;
  }

  ;
  return false;
};

var newtypePattern = new Data_Newtype.Newtype(function (n) {
  return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);

var mapMaybe = function mapMaybe(f) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return reverse(acc);
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          var v1 = f(v.value0);

          if (v1 instanceof Data_Maybe.Nothing) {
            $tco_var_acc = acc;
            $copy_v = v.value1;
            return;
          }

          ;

          if (v1 instanceof Data_Maybe.Just) {
            $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
            $copy_v = v.value1;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [v1.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var manyRec = function manyRec(dictMonadRec) {
  return function (dictAlternative) {
    return function (p) {
      var go = function go(acc) {
        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
          return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
            return new Data_List_Types.Cons(v, acc);
          })(function (v) {
            return reverse(acc);
          })(aa));
        });
      };

      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
    };
  };
};

var someRec = function someRec(dictMonadRec) {
  return function (dictAlternative) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
    };
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
    };
  };
};

var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
  return function (v) {
    return acc + 1 | 0;
  };
})(0);

var last = function last($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return new Data_Maybe.Just(v.value0);
    }

    ;

    if (v instanceof Data_List_Types.Cons) {
      $copy_v = v.value1;
      return;
    }

    ;
    $tco_done = true;
    return Data_Maybe.Nothing.value;
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var insertBy = function insertBy(v) {
  return function (x) {
    return function (v1) {
      if (v1 instanceof Data_List_Types.Nil) {
        return singleton(x);
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        var v2 = v(x)(v1.value0);

        if (v2 instanceof Data_Ordering.GT) {
          return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
        }

        ;
        return new Data_List_Types.Cons(x, v1);
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [v.constructor.name, x.constructor.name, v1.constructor.name]);
    };
  };
};

var insertAt = function insertAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0) {
        return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(insertAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var init = function init(lst) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.init;
  })(unsnoc(lst));
};

var index = function index($copy_v) {
  return function ($copy_v1) {
    var $tco_var_v = $copy_v;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v, v1) {
      if (v instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Data_List_Types.Cons && v1 === 0) {
        $tco_done = true;
        return new Data_Maybe.Just(v.value0);
      }

      ;

      if (v instanceof Data_List_Types.Cons) {
        $tco_var_v = v.value1;
        $copy_v1 = v1 - 1 | 0;
        return;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [v.constructor.name, v1.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_v, $copy_v1);
    }

    ;
    return $tco_result;
  };
};

var head = function head(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons) {
    return new Data_Maybe.Just(v.value0);
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [v.constructor.name]);
};

var transpose = function transpose(v) {
  if (v instanceof Data_List_Types.Nil) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
    return transpose(v.value1);
  }

  ;

  if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
    return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
  }

  ;
  throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [v.constructor.name]);
};

var groupBy = function groupBy(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Nil) {
      return Data_List_Types.Nil.value;
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      var v2 = span(v(v1.value0))(v1.value1);
      return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [v.constructor.name, v1.constructor.name]);
  };
};

var group = function group(dictEq) {
  return groupBy(Data_Eq.eq(dictEq));
};

var group$prime = function group$prime(dictOrd) {
  var $332 = group(dictOrd.Eq0());
  var $333 = sort(dictOrd);
  return function ($334) {
    return $332($333($334));
  };
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};

var foldM = function foldM(dictMonad) {
  return function (v) {
    return function (a) {
      return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
          return Control_Applicative.pure(dictMonad.Applicative0())(a);
        }

        ;

        if (v1 instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
            return foldM(dictMonad)(v)(a$prime)(v1.value1);
          });
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [v.constructor.name, a.constructor.name, v1.constructor.name]);
      };
    };
  };
};

var findIndex = function findIndex(fn) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Data_List_Types.Cons) {
          if (fn(v1.value0)) {
            $tco_done = true;
            return new Data_Maybe.Just(v);
          }

          ;

          if (Data_Boolean.otherwise) {
            $tco_var_v = v + 1 | 0;
            $copy_v1 = v1.value1;
            return;
          }

          ;
        }

        ;

        if (v1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(0);
};

var findLastIndex = function findLastIndex(fn) {
  return function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
      return (length(xs) - 1 | 0) - v | 0;
    })(findIndex(fn)(reverse(xs)));
  };
};

var filterM = function filterM(dictMonad) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof Data_List_Types.Nil) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (b) {
          return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (xs$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(function () {
              if (b) {
                return new Data_List_Types.Cons(v1.value0, xs$prime);
              }

              ;
              return xs$prime;
            }());
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

var filter = function filter(p) {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return reverse(acc);
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (p(v.value0)) {
            $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
            $copy_v = v.value1;
            return;
          }

          ;

          if (Data_Boolean.otherwise) {
            $tco_var_acc = acc;
            $copy_v = v.value1;
            return;
          }

          ;
        }

        ;
        throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [acc.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Types.Nil.value);
};

var intersectBy = function intersectBy(v) {
  return function (v1) {
    return function (v2) {
      if (v1 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;

      if (v2 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;
      return filter(function (x) {
        return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
      })(v1);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var nubBy = function nubBy(v) {
  return function (v1) {
    if (v1 instanceof Data_List_Types.Nil) {
      return Data_List_Types.Nil.value;
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
        return !v(v1.value0)(y);
      })(v1.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [v.constructor.name, v1.constructor.name]);
  };
};

var nub = function nub(dictEq) {
  return nubBy(Data_Eq.eq(dictEq));
};

var eqPattern = function eqPattern(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
    };
  });
};

var ordPattern = function ordPattern(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqPattern(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
    };
  });
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Types.Cons && p(v.value0)) {
        $copy_v = v.value1;
        return;
      }

      ;
      $tco_done = true;
      return v;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return go;
};

var dropEnd = function dropEnd(n) {
  return function (xs) {
    return take(length(xs) - n | 0)(xs);
  };
};

var drop = function drop($copy_v) {
  return function ($copy_v1) {
    var $tco_var_v = $copy_v;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v, v1) {
      if (v < 1) {
        $tco_done = true;
        return v1;
      }

      ;

      if (v1 instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return Data_List_Types.Nil.value;
      }

      ;

      if (v1 instanceof Data_List_Types.Cons) {
        $tco_var_v = v - 1 | 0;
        $copy_v1 = v1.value1;
        return;
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [v.constructor.name, v1.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_v, $copy_v1);
    }

    ;
    return $tco_result;
  };
};

var slice = function slice(start) {
  return function (end) {
    return function (xs) {
      return take(end - start | 0)(drop(start)(xs));
    };
  };
};

var takeEnd = function takeEnd(n) {
  return function (xs) {
    return drop(length(xs) - n | 0)(xs);
  };
};

var deleteBy = function deleteBy(v) {
  return function (v1) {
    return function (v2) {
      if (v2 instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }

      ;

      if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
        return v2.value1;
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var deleteAt = function deleteAt(v) {
  return function (v1) {
    if (v === 0 && v1 instanceof Data_List_Types.Cons) {
      return new Data_Maybe.Just(v1.value1);
    }

    ;

    if (v1 instanceof Data_List_Types.Cons) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
        return new Data_List_Types.Cons(v1.value0, v2);
      })(deleteAt(v - 1 | 0)(v1.value1));
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));

var concat = function concat(v) {
  return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(v) {
  return function (v1) {
    return function (v2) {
      if (v === 0 && v2 instanceof Data_List_Types.Cons) {
        return Data_Maybe.Just.create(function () {
          var v3 = v1(v2.value0);

          if (v3 instanceof Data_Maybe.Nothing) {
            return v2.value1;
          }

          ;

          if (v3 instanceof Data_Maybe.Just) {
            return new Data_List_Types.Cons(v3.value0, v2.value1);
          }

          ;
          throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [v3.constructor.name]);
        }());
      }

      ;

      if (v2 instanceof Data_List_Types.Cons) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
          return new Data_List_Types.Cons(v2.value0, v3);
        })(alterAt(v - 1 | 0)(v1)(v2.value1));
      }

      ;
      return Data_Maybe.Nothing.value;
    };
  };
};

var modifyAt = function modifyAt(n) {
  return function (f) {
    return alterAt(n)(function ($335) {
      return Data_Maybe.Just.create(f($335));
    });
  };
};

module.exports = {
  toUnfoldable: toUnfoldable,
  fromFoldable: fromFoldable,
  singleton: singleton,
  range: range,
  some: some,
  someRec: someRec,
  many: many,
  manyRec: manyRec,
  "null": $$null,
  length: length,
  snoc: snoc,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  modifyAt: modifyAt,
  alterAt: alterAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  filterM: filterM,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  mapWithIndex: mapWithIndex,
  sort: sort,
  sortBy: sortBy,
  Pattern: Pattern,
  stripPrefix: stripPrefix,
  slice: slice,
  take: take,
  takeEnd: takeEnd,
  takeWhile: takeWhile,
  drop: drop,
  dropEnd: dropEnd,
  dropWhile: dropWhile,
  span: span,
  group: group,
  "group'": group$prime,
  groupBy: groupBy,
  partition: partition,
  nub: nub,
  nubBy: nubBy,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  transpose: transpose,
  foldM: foldM,
  eqPattern: eqPattern,
  ordPattern: ordPattern,
  newtypePattern: newtypePattern,
  showPattern: showPattern
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"../output/Data.NonEmpty/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Lazy/foreign.js":[function(require,module,exports) {
"use strict";

exports.defer = function (thunk) {
  var v = null;
  return function () {
    if (thunk === undefined) return v;
    v = thunk();
    thunk = undefined; // eslint-disable-line no-param-reassign

    return v;
  };
};

exports.force = function (l) {
  return l();
};
},{}],"../output/Data.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var showLazy = function showLazy(dictShow) {
  return new Data_Show.Show(function (x) {
    return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
  });
};

var semiringLazy = function semiringLazy(dictSemiring) {
  return new Data_Semiring.Semiring(function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
      });
    };
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
      });
    };
  }, $foreign.defer(function (v) {
    return Data_Semiring.one(dictSemiring);
  }), $foreign.defer(function (v) {
    return Data_Semiring.zero(dictSemiring);
  }));
};

var semigroupLazy = function semigroupLazy(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var ringLazy = function ringLazy(dictRing) {
  return new Data_Ring.Ring(function () {
    return semiringLazy(dictRing.Semiring0());
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var monoidLazy = function monoidLazy(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupLazy(dictMonoid.Semigroup0());
  }, $foreign.defer(function (v) {
    return Data_Monoid.mempty(dictMonoid);
  }));
};

var lazyLazy = new Control_Lazy.Lazy(function (f) {
  return $foreign.defer(function (v) {
    return $foreign.force(f(Data_Unit.unit));
  });
});
var functorLazy = new Data_Functor.Functor(function (f) {
  return function (l) {
    return $foreign.defer(function (v) {
      return f($foreign.force(l));
    });
  };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorLazy;
}, function (f) {
  return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (l) {
      return f($foreign.force(l));
    };
  };
}, function (f) {
  return function (z) {
    return function (l) {
      return f(z)($foreign.force(l));
    };
  };
}, function (f) {
  return function (z) {
    return function (l) {
      return f($foreign.force(l))(z);
    };
  };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableLazy;
}, function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
  };
}, function (f) {
  return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function (f) {
  return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function () {
  return foldableLazy;
}, function () {
  return functorLazy;
}, function (dictApplicative) {
  return function (l) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(function ($42) {
      return $foreign.defer(Data_Function["const"]($42));
    })($foreign.force(l));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (l) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function ($43) {
        return $foreign.defer(Data_Function["const"]($43));
      })(f($foreign.force(l)));
    };
  };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexLazy;
}, function () {
  return functorWithIndexLazy;
}, function () {
  return traversableLazy;
}, function (dictApplicative) {
  return function (f) {
    return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
  };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableLazy;
}, function (dictSemigroup) {
  return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function (dictSemigroup) {
  return function (f) {
    return function (l) {
      return f($foreign.force(l));
    };
  };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Lazy;
}, function () {
  return traversableLazy;
}, function (dictApply) {
  return function (l) {
    return Data_Functor.map(dictApply.Functor0())(function ($44) {
      return $foreign.defer(Data_Function["const"]($44));
    })($foreign.force(l));
  };
}, function (dictApply) {
  return function (f) {
    return function (l) {
      return Data_Functor.map(dictApply.Functor0())(function ($45) {
        return $foreign.defer(Data_Function["const"]($45));
      })(f($foreign.force(l)));
    };
  };
});
var extendLazy = new Control_Extend.Extend(function () {
  return functorLazy;
}, function (f) {
  return function (x) {
    return $foreign.defer(function (v) {
      return f(x);
    });
  };
});

var eqLazy = function eqLazy(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
    };
  });
};

var ordLazy = function ordLazy(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqLazy(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
    };
  });
};

var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function () {
  return eq1Lazy;
}, function (dictOrd) {
  return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function () {
  return extendLazy;
}, $foreign.force);

var commutativeRingLazy = function commutativeRingLazy(dictCommutativeRing) {
  return new Data_CommutativeRing.CommutativeRing(function () {
    return ringLazy(dictCommutativeRing.Ring0());
  });
};

var euclideanRingLazy = function euclideanRingLazy(dictEuclideanRing) {
  return new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
  }, function () {
    var $46 = Data_EuclideanRing.degree(dictEuclideanRing);
    return function ($47) {
      return $46($foreign.force($47));
    };
  }(), function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
      });
    };
  }, function (a) {
    return function (b) {
      return $foreign.defer(function (v) {
        return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
      });
    };
  });
};

var boundedLazy = function boundedLazy(dictBounded) {
  return new Data_Bounded.Bounded(function () {
    return ordLazy(dictBounded.Ord0());
  }, $foreign.defer(function (v) {
    return Data_Bounded.bottom(dictBounded);
  }), $foreign.defer(function (v) {
    return Data_Bounded.top(dictBounded);
  }));
};

var applyLazy = new Control_Apply.Apply(function () {
  return functorLazy;
}, function (f) {
  return function (x) {
    return $foreign.defer(function (v) {
      return $foreign.force(f)($foreign.force(x));
    });
  };
});
var bindLazy = new Control_Bind.Bind(function () {
  return applyLazy;
}, function (l) {
  return function (f) {
    return $foreign.defer(function (v) {
      return $foreign.force(f($foreign.force(l)));
    });
  };
});

var heytingAlgebraLazy = function heytingAlgebraLazy(dictHeytingAlgebra) {
  return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
    };
  }, function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
    };
  }, $foreign.defer(function (v) {
    return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
  }), function (a) {
    return function (b) {
      return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
    };
  }, function (a) {
    return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
  }, $foreign.defer(function (v) {
    return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
  }));
};

var booleanAlgebraLazy = function booleanAlgebraLazy(dictBooleanAlgebra) {
  return new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
  });
};

var applicativeLazy = new Control_Applicative.Applicative(function () {
  return applyLazy;
}, function (a) {
  return $foreign.defer(function (v) {
    return a;
  });
});
var monadLazy = new Control_Monad.Monad(function () {
  return applicativeLazy;
}, function () {
  return bindLazy;
});
module.exports = {
  semiringLazy: semiringLazy,
  ringLazy: ringLazy,
  commutativeRingLazy: commutativeRingLazy,
  euclideanRingLazy: euclideanRingLazy,
  eqLazy: eqLazy,
  eq1Lazy: eq1Lazy,
  ordLazy: ordLazy,
  ord1Lazy: ord1Lazy,
  boundedLazy: boundedLazy,
  semigroupLazy: semigroupLazy,
  monoidLazy: monoidLazy,
  heytingAlgebraLazy: heytingAlgebraLazy,
  booleanAlgebraLazy: booleanAlgebraLazy,
  functorLazy: functorLazy,
  functorWithIndexLazy: functorWithIndexLazy,
  foldableLazy: foldableLazy,
  foldableWithIndexLazy: foldableWithIndexLazy,
  foldable1Lazy: foldable1Lazy,
  traversableLazy: traversableLazy,
  traversableWithIndexLazy: traversableWithIndexLazy,
  traversable1Lazy: traversable1Lazy,
  invariantLazy: invariantLazy,
  applyLazy: applyLazy,
  applicativeLazy: applicativeLazy,
  bindLazy: bindLazy,
  monadLazy: monadLazy,
  extendLazy: extendLazy,
  comonadLazy: comonadLazy,
  showLazy: showLazy,
  lazyLazy: lazyLazy,
  defer: $foreign.defer,
  force: $foreign.force
};
},{"./foreign.js":"../output/Data.Lazy/foreign.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Comonad/index.js":"../output/Control.Comonad/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.BooleanAlgebra/index.js":"../output/Data.BooleanAlgebra/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Invariant/index.js":"../output/Data.Functor.Invariant/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.List.Lazy.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Comonad = require("../Control.Comonad/index.js");

var Control_Extend = require("../Control.Extend/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var List = function List(x) {
  return x;
};

var Nil = function () {
  function Nil() {}

  ;
  Nil.value = new Nil();
  return Nil;
}();

var Cons = function () {
  function Cons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Cons.create = function (value0) {
    return function (value1) {
      return new Cons(value0, value1);
    };
  };

  return Cons;
}();

var NonEmptyList = function NonEmptyList(x) {
  return x;
};

var nil = List(Data_Lazy.defer(function (v) {
  return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
  return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function (n) {
  return n;
}, List);

var step = function () {
  var $215 = Data_Newtype.unwrap(newtypeList);
  return function ($216) {
    return Data_Lazy.force($215($216));
  };
}();

var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
  return function (ys) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return step(ys);
      }

      ;

      if (v instanceof Cons) {
        return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});

var showList = function showList(dictShow) {
  return new Data_Show.Show(function (xs) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return "Nil";
      }

      ;

      if (v instanceof Cons) {
        return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 64, column 19): " + [v.constructor.name]);
    };

    return "fromStrict (" + (go(step(xs)) + ")");
  });
};

var showNonEmptyList = function showNonEmptyList(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
  });
};

var monoidList = new Data_Monoid.Monoid(function () {
  return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function (f) {
  return List(Data_Lazy.defer(function ($217) {
    return step(f($217));
  }));
});
var functorList = new Data_Functor.Functor(function (f) {
  return function (xs) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return Nil.value;
      }

      ;

      if (v instanceof Cons) {
        return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});
var functorNonEmptyList = new Data_Functor.Functor(function (f) {
  return function (v) {
    return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
  };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return true;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0)) {
              $tco_var_v = step(v.value1);
              $copy_v1 = step(v1.value1);
              return;
            }

            ;
            $tco_done = true;
            return false;
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(step(xs))(step(ys));
    };
  };
});

var eqList = function eqList(dictEq) {
  return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};

var eqNonEmptyList = function eqNonEmptyList(dictEq) {
  return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};

var ord1List = new Data_Ord.Ord1(function () {
  return eq1List;
}, function (dictOrd) {
  return function (xs) {
    return function (ys) {
      var go = function go($copy_v) {
        return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v, v1) {
            if (v instanceof Nil && v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.EQ.value;
            }

            ;

            if (v instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.LT.value;
            }

            ;

            if (v1 instanceof Nil) {
              $tco_done = true;
              return Data_Ordering.GT.value;
            }

            ;

            if (v instanceof Cons && v1 instanceof Cons) {
              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_var_v = step(v.value1);
                $copy_v1 = step(v1.value1);
                return;
              }

              ;
              $tco_done = true;
              return v2;
            }

            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [v.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return go(step(xs))(step(ys));
    };
  };
});

var ordList = function ordList(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqList(dictOrd.Eq0());
  }, Data_Ord.compare1(ord1List)(dictOrd));
};

var ordNonEmptyList = function ordNonEmptyList(dictOrd) {
  return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};

var cons = function cons(x) {
  return function (xs) {
    return List(Data_Lazy.defer(function (v) {
      return new Cons(x, xs);
    }));
  };
};

var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return Data_Foldable.foldl(foldableList)(function (b) {
      return function (a) {
        return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (op) {
  var go = function go($copy_b) {
    return function ($copy_xs) {
      var $tco_var_b = $copy_b;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(b, xs) {
        var v = step(xs);

        if (v instanceof Nil) {
          $tco_done = true;
          return b;
        }

        ;

        if (v instanceof Cons) {
          $tco_var_b = op(b)(v.value0);
          $copy_xs = v.value1;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_b, $copy_xs);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (op) {
  return function (z) {
    return function (xs) {
      var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
      return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
    };
  };
});
var extendList = new Control_Extend.Extend(function () {
  return functorList;
}, function (f) {
  return function (l) {
    var go = function go(a) {
      return function (v) {
        var acc$prime = cons(a)(v.acc);
        return {
          val: cons(f(acc$prime))(v.val),
          acc: acc$prime
        };
      };
    };

    var v = step(l);

    if (v instanceof Nil) {
      return nil;
    }

    ;

    if (v instanceof Cons) {
      return cons(f(l))(Data_Foldable.foldr(foldableList)(go)({
        val: nil,
        acc: nil
      })(v.value1).val);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [v.constructor.name]);
  };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    var go = function go(a) {
      return function (v1) {
        return {
          val: cons(f(Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(a, v1.acc);
          })))(v1.val),
          acc: cons(a)(v1.acc)
        };
      };
    };

    var v1 = Data_Lazy.force(v);
    return NonEmptyList(Data_Lazy.defer(function (v2) {
      return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
        val: nil,
        acc: nil
      })(v1.value1).val);
    }));
  };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
    };
  };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableList;
}, function (dictMonoid) {
  return function (f) {
    return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
      return function (acc) {
        var $218 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
        var $219 = f(i);
        return function ($220) {
          return $218($219($220));
        };
      };
    })(Data_Monoid.mempty(dictMonoid));
  };
}, function (f) {
  return function (acc) {
    var $221 = Data_Foldable.foldl(foldableList)(function (v) {
      return function (a) {
        return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
      };
    })(new Data_Tuple.Tuple(0, acc));
    return function ($222) {
      return Data_Tuple.snd($221($222));
    };
  };
}, function (f) {
  return function (b) {
    return function (xs) {
      var v = function () {
        var rev = Data_Foldable.foldl(foldableList)(function (v1) {
          return function (a) {
            return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
          };
        });
        return rev(new Data_Tuple.Tuple(0, nil))(xs);
      }();

      return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
        return function (a) {
          return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
        };
      })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
    };
  };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableNonEmptyList;
}, function (dictMonoid) {
  return function (f) {
    return function (v) {
      return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function () {
        var $223 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($224) {
          return f($223($224));
        };
      }())(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $225 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($226) {
          return f($225($226));
        };
      }())(b)(Data_Lazy.force(v));
    };
  };
}, function (f) {
  return function (b) {
    return function (v) {
      return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function () {
        var $227 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($228) {
          return f($227($228));
        };
      }())(b)(Data_Lazy.force(v));
    };
  };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorList;
}, function (f) {
  return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
    return function (x) {
      return function (acc) {
        return cons(f(i)(x))(acc);
      };
    };
  })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorNonEmptyList;
}, function (f) {
  return function (v) {
    return NonEmptyList(Data_Lazy.defer(function (v1) {
      return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function () {
        var $229 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($230) {
          return f($229($230));
        };
      }())(Data_Lazy.force(v));
    }));
  };
});

var toList = function toList(v) {
  return Control_Lazy.defer(lazyList)(function (v1) {
    var v2 = Data_Lazy.force(v);
    return cons(v2.value0)(v2.value1);
  });
};

var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
  return function (as$prime) {
    var v1 = Data_Lazy.force(v);
    return Data_Lazy.defer(function (v2) {
      return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
    });
  };
});
var traversableList = new Data_Traversable.Traversable(function () {
  return foldableList;
}, function () {
  return functorList;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    return Data_Foldable.foldr(foldableList)(function (a) {
      return function (b) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(a)))(b);
      };
    })(Control_Applicative.pure(dictApplicative)(nil));
  };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
  return foldableNonEmptyList;
}, function () {
  return functorNonEmptyList;
}, function (dictApplicative) {
  return function (v) {
    return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
      return NonEmptyList(Data_Lazy.defer(function (v1) {
        return xxs;
      }));
    })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
  };
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
          return xxs;
        }));
      })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
    };
  };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexList;
}, function () {
  return functorWithIndexList;
}, function () {
  return traversableList;
}, function (dictApplicative) {
  return function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
      return function (a) {
        return function (b) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(i)(a)))(b);
        };
      };
    })(Control_Applicative.pure(dictApplicative)(nil));
  };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexNonEmptyList;
}, function () {
  return functorWithIndexNonEmptyList;
}, function () {
  return traversableNonEmptyList;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      return Data_Functor.map(dictApplicative.Apply0().Functor0())(function (xxs) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
          return xxs;
        }));
      })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function () {
        var $231 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
        return function ($232) {
          return f($231($232));
        };
      }())(Data_Lazy.force(v)));
    };
  };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function () {
  var go = function go(f) {
    return function (b) {
      return Control_Lazy.defer(lazyList)(function (v) {
        var v1 = f(b);

        if (v1.value1 instanceof Data_Maybe.Just) {
          return cons(v1.value0)(go(f)(v1.value1.value0));
        }

        ;

        if (v1.value1 instanceof Data_Maybe.Nothing) {
          return cons(v1.value0)(nil);
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [v1.constructor.name]);
      });
    };
  };

  return go;
}());
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1List;
}, function () {
  var go = function go(f) {
    return function (b) {
      return Control_Lazy.defer(lazyList)(function (v) {
        var v1 = f(b);

        if (v1 instanceof Data_Maybe.Nothing) {
          return nil;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return cons(v1.value0.value0)(go(f)(v1.value0.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [v1.constructor.name]);
      });
    };
  };

  return go;
}());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    return NonEmptyList(Data_Lazy.defer(function (v) {
      return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
    }));
  };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
  return extendNonEmptyList;
}, function (v) {
  return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function () {
  return applicativeList;
}, function () {
  return bindList;
});
var bindList = new Control_Bind.Bind(function () {
  return applyList;
}, function (xs) {
  return function (f) {
    var go = function go(v) {
      if (v instanceof Nil) {
        return Nil.value;
      }

      ;

      if (v instanceof Cons) {
        return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [v.constructor.name]);
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
  };
});
var applyList = new Control_Apply.Apply(function () {
  return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
  return applyList;
}, function (a) {
  return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
  return functorNonEmptyList;
}, function (v) {
  return function (v1) {
    var v2 = Data_Lazy.force(v1);
    var v3 = Data_Lazy.force(v);
    return Data_Lazy.defer(function (v4) {
      return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
    });
  };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
  return applyNonEmptyList;
}, function (v) {
  return function (f) {
    var v1 = Data_Lazy.force(v);
    var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
    return Data_Lazy.defer(function (v3) {
      return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($233) {
        return toList(f($233));
      })));
    });
  };
});
var altNonEmptyList = new Control_Alt.Alt(function () {
  return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
  return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
  return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
  return applicativeList;
}, function () {
  return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
  return alternativeList;
}, function () {
  return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
  return applyNonEmptyList;
}, function (a) {
  return Data_Lazy.defer(function (v) {
    return Data_NonEmpty.singleton(plusList)(a);
  });
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
  return applicativeNonEmptyList;
}, function () {
  return bindNonEmptyList;
});
module.exports = {
  List: List,
  Nil: Nil,
  Cons: Cons,
  step: step,
  nil: nil,
  cons: cons,
  NonEmptyList: NonEmptyList,
  toList: toList,
  newtypeList: newtypeList,
  showList: showList,
  eqList: eqList,
  eq1List: eq1List,
  ordList: ordList,
  ord1List: ord1List,
  lazyList: lazyList,
  semigroupList: semigroupList,
  monoidList: monoidList,
  functorList: functorList,
  functorWithIndexList: functorWithIndexList,
  foldableList: foldableList,
  foldableWithIndexList: foldableWithIndexList,
  unfoldable1List: unfoldable1List,
  unfoldableList: unfoldableList,
  traversableList: traversableList,
  traversableWithIndexList: traversableWithIndexList,
  applyList: applyList,
  applicativeList: applicativeList,
  bindList: bindList,
  monadList: monadList,
  altList: altList,
  plusList: plusList,
  alternativeList: alternativeList,
  monadZeroList: monadZeroList,
  monadPlusList: monadPlusList,
  extendList: extendList,
  newtypeNonEmptyList: newtypeNonEmptyList,
  eqNonEmptyList: eqNonEmptyList,
  ordNonEmptyList: ordNonEmptyList,
  showNonEmptyList: showNonEmptyList,
  functorNonEmptyList: functorNonEmptyList,
  applyNonEmptyList: applyNonEmptyList,
  applicativeNonEmptyList: applicativeNonEmptyList,
  bindNonEmptyList: bindNonEmptyList,
  monadNonEmptyList: monadNonEmptyList,
  altNonEmptyList: altNonEmptyList,
  extendNonEmptyList: extendNonEmptyList,
  comonadNonEmptyList: comonadNonEmptyList,
  semigroupNonEmptyList: semigroupNonEmptyList,
  foldableNonEmptyList: foldableNonEmptyList,
  traversableNonEmptyList: traversableNonEmptyList,
  unfoldable1NonEmptyList: unfoldable1NonEmptyList,
  functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
  foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
  traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Comonad/index.js":"../output/Control.Comonad/index.js","../Control.Extend/index.js":"../output/Control.Extend/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Lazy/index.js":"../output/Data.Lazy/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"../output/Data.NonEmpty/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Data.List.Lazy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Pattern = function Pattern(x) {
  return x;
};

var zipWith = function zipWith(f) {
  return function (xs) {
    return function (ys) {
      var go = function go(v) {
        return function (v1) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
    };
  };
};

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
      };
    };
  };
};

var zip = zipWith(Data_Tuple.Tuple.create);

var updateAt = function updateAt(n) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        return function (v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(x, v1.value1);
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
  return function (v1) {
    return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
  };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));

var uncons = function uncons(xs) {
  var v = Data_List_Lazy_Types.step(xs);

  if (v instanceof Data_List_Lazy_Types.Nil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_List_Lazy_Types.Cons) {
    return new Data_Maybe.Just({
      head: v.value0,
      tail: v.value1
    });
  }

  ;
  throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [v.constructor.name]);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
      return new Data_Tuple.Tuple(rec.head, rec.tail);
    })(uncons(xs));
  });
};

var takeWhile = function takeWhile(p) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
      return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
    }

    ;
    return Data_List_Lazy_Types.Nil.value;
  };

  var $239 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $240 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($241) {
    return Data_List_Lazy_Types.List($239($240($241)));
  };
};

var take = function take(n) {
  var go = function go(v) {
    return function (v1) {
      if (v1 instanceof Data_List_Lazy_Types.Nil) {
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v1 instanceof Data_List_Lazy_Types.Cons) {
        return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  var $119 = n <= 0;

  if ($119) {
    return Data_Function["const"](Data_List_Lazy_Types.nil);
  }

  ;
  var $242 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
  var $243 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($244) {
    return Data_List_Lazy_Types.List($242($243($244)));
  };
};

var tail = function tail(xs) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.tail;
  })(uncons(xs));
};

var stripPrefix = function stripPrefix(dictEq) {
  return function (v) {
    return function (s) {
      var go = function go(prefix) {
        return function (input) {
          var v1 = Data_List_Lazy_Types.step(prefix);

          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            var v2 = Data_List_Lazy_Types.step(input);

            if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
              return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                a: v1.value1,
                b: v2.value1
              }));
            }

            ;
            return Data_Maybe.Nothing.value;
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [v1.constructor.name]);
        };
      };

      return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
    };
  };
};

var span = function span(p) {
  return function (xs) {
    var v = uncons(xs);

    if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
      var v1 = span(p)(v.value0.tail);
      return {
        init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
        rest: v1.rest
      };
    }

    ;
    return {
      init: Data_List_Lazy_Types.nil,
      rest: xs
    };
  };
};

var snoc = function snoc(xs) {
  return function (x) {
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
  };
};

var singleton = function singleton(a) {
  return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};

var showPattern = function showPattern(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
  });
};

var scanrLazy = function scanrLazy(f) {
  return function (acc) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          var acc$prime = f(v.value0)(acc);
          return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var reverse = function reverse(xs) {
  return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
  });
};

var replicateM = function replicateM(dictMonad) {
  return function (n) {
    return function (m) {
      if (n < 1) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
      }

      ;

      if (Data_Boolean.otherwise) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
          return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (as) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [n.constructor.name, m.constructor.name]);
    };
  };
};

var repeat = function repeat(x) {
  return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
    return Data_List_Lazy_Types.cons(x)(xs);
  });
};

var replicate = function replicate(i) {
  return function (xs) {
    return take(i)(repeat(xs));
  };
};

var range = function range(start) {
  return function (end) {
    if (start > end) {
      var g = function g(x) {
        if (x >= end) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [x.constructor.name]);
      };

      return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
    }

    ;

    if (Data_Boolean.otherwise) {
      var f = function f(x) {
        if (x <= end) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [x.constructor.name]);
      };

      return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [start.constructor.name, end.constructor.name]);
  };
};

var partition = function partition(f) {
  var go = function go(x) {
    return function (v) {
      var $147 = f(x);

      if ($147) {
        return {
          yes: Data_List_Lazy_Types.cons(x)(v.yes),
          no: v.no
        };
      }

      ;
      return {
        yes: v.yes,
        no: Data_List_Lazy_Types.cons(x)(v.no)
      };
    };
  };

  return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
    yes: Data_List_Lazy_Types.nil,
    no: Data_List_Lazy_Types.nil
  });
};

var $$null = function $$null($245) {
  return Data_Maybe.isNothing(uncons($245));
};

var newtypePattern = new Data_Newtype.Newtype(function (n) {
  return n;
}, Pattern);

var mapMaybe = function mapMaybe(f) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Nil) {
        $tco_done = true;
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v instanceof Data_List_Lazy_Types.Cons) {
        var v1 = f(v.value0);

        if (v1 instanceof Data_Maybe.Nothing) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          $tco_done = true;
          return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [v1.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var $246 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $247 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($248) {
    return Data_List_Lazy_Types.List($246($247($248)));
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
        return many(dictAlternative)(dictLazy)(v);
      }));
    };
  };
};

var many = function many(dictAlternative) {
  return function (dictLazy) {
    return function (v) {
      return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
    };
  };
};

var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
  return function (v) {
    return l + 1 | 0;
  };
})(0);

var last = function () {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Cons) {
        if ($$null(v.value1)) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }

        ;

        if (Data_Boolean.otherwise) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;
      }

      ;
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($249) {
    return go(Data_List_Lazy_Types.step($249));
  };
}();

var iterate = function iterate(f) {
  return function (x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
      return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
    });
  };
};

var insertAt = function insertAt(v) {
  return function (x) {
    return function (xs) {
      if (v === 0) {
        return Data_List_Lazy_Types.cons(x)(xs);
      }

      ;

      var go = function go(v1) {
        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [v1.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var init = function () {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Cons) {
      if ($$null(v.value1)) {
        return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
      }

      ;

      if (Data_Boolean.otherwise) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
      }

      ;
    }

    ;
    return Data_Maybe.Nothing.value;
  };

  return function ($250) {
    return go(Data_List_Lazy_Types.step($250));
  };
}();

var index = function index(xs) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          $tco_var_v = Data_List_Lazy_Types.step(v.value1);
          $copy_v1 = v1 - 1 | 0;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_List_Lazy_Types.step(xs));
};

var head = function head(xs) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return v.head;
  })(uncons(xs));
};

var transpose = function transpose(xs) {
  var v = uncons(xs);

  if (v instanceof Data_Maybe.Nothing) {
    return xs;
  }

  ;

  if (v instanceof Data_Maybe.Just) {
    var v1 = uncons(v.value0.head);

    if (v1 instanceof Data_Maybe.Nothing) {
      return transpose(v.value0.tail);
    }

    ;

    if (v1 instanceof Data_Maybe.Just) {
      return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [v1.constructor.name]);
  }

  ;
  throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [v.constructor.name]);
};

var groupBy = function groupBy(eq) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Nil) {
      return Data_List_Lazy_Types.Nil.value;
    }

    ;

    if (v instanceof Data_List_Lazy_Types.Cons) {
      var v1 = span(eq(v.value0))(v.value1);
      return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
        return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
      }), groupBy(eq)(v1.rest));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [v.constructor.name]);
  };

  var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $252 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($253) {
    return Data_List_Lazy_Types.List($251($252($253)));
  };
};

var group = function group(dictEq) {
  return groupBy(Data_Eq.eq(dictEq));
};

var fromStep = function () {
  var $254 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
  return function ($255) {
    return Data_List_Lazy_Types.List($254($255));
  };
}();

var insertBy = function insertBy(cmp) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          var v1 = cmp(x)(v.value0);

          if (v1 instanceof Data_Ordering.GT) {
            return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
          }

          ;
          return new Data_List_Lazy_Types.Cons(x, fromStep(v));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var insert = function insert(dictOrd) {
  return insertBy(Data_Ord.compare(dictOrd));
};

var fromFoldable = function fromFoldable(dictFoldable) {
  return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};

var foldrLazy = function foldrLazy(dictLazy) {
  return function (op) {
    return function (z) {
      var go = function go(xs) {
        var v = Data_List_Lazy_Types.step(xs);

        if (v instanceof Data_List_Lazy_Types.Cons) {
          return Control_Lazy.defer(dictLazy)(function (v1) {
            return op(v.value0)(go(v.value1));
          });
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Nil) {
          return z;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [v.constructor.name]);
      };

      return go;
    };
  };
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (a) {
      return function (xs) {
        var v = uncons(xs);

        if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(a);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
            return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
          });
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [v.constructor.name]);
      };
    };
  };
};

var findIndex = function findIndex(fn) {
  var go = function go(n) {
    return function (list) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (o) {
        var $199 = fn(o.head);

        if ($199) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
        }

        ;
        return go(n + 1 | 0)(o.tail);
      });
    };
  };

  return go(0);
};

var findLastIndex = function findLastIndex(fn) {
  return function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
      return (length(xs) - 1 | 0) - v | 0;
    })(findIndex(fn)(reverse(xs)));
  };
};

var filterM = function filterM(dictMonad) {
  return function (p) {
    return function (list) {
      var v = uncons(list);

      if (v instanceof Data_Maybe.Nothing) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
      }

      ;

      if (v instanceof Data_Maybe.Just) {
        return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (b) {
          return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (xs$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(function () {
              if (b) {
                return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
              }

              ;
              return xs$prime;
            }());
          });
        });
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [v.constructor.name]);
    };
  };
};

var filter = function filter(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Nil) {
        $tco_done = true;
        return Data_List_Lazy_Types.Nil.value;
      }

      ;

      if (v instanceof Data_List_Lazy_Types.Cons) {
        if (p(v.value0)) {
          $tco_done = true;
          return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
        }

        ;

        if (Data_Boolean.otherwise) {
          $copy_v = Data_List_Lazy_Types.step(v.value1);
          return;
        }

        ;
      }

      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($258) {
    return Data_List_Lazy_Types.List($256($257($258)));
  };
};

var intersectBy = function intersectBy(eq) {
  return function (xs) {
    return function (ys) {
      return filter(function (x) {
        return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
      })(xs);
    };
  };
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var nubBy = function nubBy(eq) {
  var go = function go(v) {
    if (v instanceof Data_List_Lazy_Types.Nil) {
      return Data_List_Lazy_Types.Nil.value;
    }

    ;

    if (v instanceof Data_List_Lazy_Types.Cons) {
      return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
        return !eq(v.value0)(y);
      })(v.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [v.constructor.name]);
  };

  var $259 = Data_Functor.map(Data_Lazy.functorLazy)(go);
  var $260 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($261) {
    return Data_List_Lazy_Types.List($259($260($261)));
  };
};

var nub = function nub(dictEq) {
  return nubBy(Data_Eq.eq(dictEq));
};

var eqPattern = function eqPattern(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
    };
  });
};

var ordPattern = function ordPattern(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqPattern(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
    };
  });
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return findLastIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return findIndex(function (v) {
      return Data_Eq.eq(dictEq)(v)(x);
    });
  };
};

var dropWhile = function dropWhile(p) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
        $copy_v = Data_List_Lazy_Types.step(v.value1);
        return;
      }

      ;
      $tco_done = true;
      return fromStep(v);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return function ($262) {
    return go(Data_List_Lazy_Types.step($262));
  };
};

var drop = function drop(n) {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v === 0) {
          $tco_done = true;
          return v1;
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          $tco_done = true;
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          $tco_var_v = v - 1 | 0;
          $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
  var $264 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
  return function ($265) {
    return Data_List_Lazy_Types.List($263($264($265)));
  };
};

var slice = function slice(start) {
  return function (end) {
    return function (xs) {
      return take(end - start | 0)(drop(start)(xs));
    };
  };
};

var deleteBy = function deleteBy(eq) {
  return function (x) {
    return function (xs) {
      var go = function go(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v instanceof Data_List_Lazy_Types.Cons) {
          if (eq(x)(v.value0)) {
            return Data_List_Lazy_Types.step(v.value1);
          }

          ;

          if (Data_Boolean.otherwise) {
            return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
          }

          ;
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [v.constructor.name]);
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    return function (ys) {
      return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var deleteAt = function deleteAt(n) {
  return function (xs) {
    var go = function go(v) {
      return function (v1) {
        if (v1 instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }

        ;

        if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
          return Data_List_Lazy_Types.step(v1.value1);
        }

        ;

        if (v1 instanceof Data_List_Lazy_Types.Cons) {
          return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
        }

        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
  };
};

var $$delete = function $$delete(dictEq) {
  return deleteBy(Data_Eq.eq(dictEq));
};

var difference = function difference(dictEq) {
  return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};

var cycle = function cycle(xs) {
  return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
    return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
  });
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));

var concat = function concat(v) {
  return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};

var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

var alterAt = function alterAt(n) {
  return function (f) {
    return function (xs) {
      var go = function go(v) {
        return function (v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }

          ;

          if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
            var v2 = f(v1.value0);

            if (v2 instanceof Data_Maybe.Nothing) {
              return Data_List_Lazy_Types.step(v1.value1);
            }

            ;

            if (v2 instanceof Data_Maybe.Just) {
              return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
            }

            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [v2.constructor.name]);
          }

          ;

          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
  };
};

var modifyAt = function modifyAt(n) {
  return function (f) {
    return alterAt(n)(function ($266) {
      return Data_Maybe.Just.create(f($266));
    });
  };
};

module.exports = {
  toUnfoldable: toUnfoldable,
  fromFoldable: fromFoldable,
  singleton: singleton,
  range: range,
  replicate: replicate,
  replicateM: replicateM,
  some: some,
  many: many,
  repeat: repeat,
  iterate: iterate,
  cycle: cycle,
  "null": $$null,
  length: length,
  snoc: snoc,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  modifyAt: modifyAt,
  alterAt: alterAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  filterM: filterM,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  Pattern: Pattern,
  stripPrefix: stripPrefix,
  slice: slice,
  take: take,
  takeWhile: takeWhile,
  drop: drop,
  dropWhile: dropWhile,
  span: span,
  group: group,
  groupBy: groupBy,
  partition: partition,
  nub: nub,
  nubBy: nubBy,
  union: union,
  unionBy: unionBy,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  intersect: intersect,
  intersectBy: intersectBy,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  transpose: transpose,
  foldM: foldM,
  foldrLazy: foldrLazy,
  scanrLazy: scanrLazy,
  eqPattern: eqPattern,
  ordPattern: ordPattern,
  newtypePattern: newtypePattern,
  showPattern: showPattern
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Lazy/index.js":"../output/Data.Lazy/index.js","../Data.List.Lazy.Types/index.js":"../output/Data.List.Lazy.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.NonEmpty/index.js":"../output/Data.NonEmpty/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js"}],"../output/Data.Map.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Lazy = require("../Data.List.Lazy/index.js");

var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Leaf = function () {
  function Leaf() {}

  ;
  Leaf.value = new Leaf();
  return Leaf;
}();

var Two = function () {
  function Two(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  Two.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new Two(value0, value1, value2, value3);
        };
      };
    };
  };

  return Two;
}();

var Three = function () {
  function Three(value0, value1, value2, value3, value4, value5, value6) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  ;

  Three.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return function (value6) {
                return new Three(value0, value1, value2, value3, value4, value5, value6);
              };
            };
          };
        };
      };
    };
  };

  return Three;
}();

var TwoLeft = function () {
  function TwoLeft(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  TwoLeft.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new TwoLeft(value0, value1, value2);
      };
    };
  };

  return TwoLeft;
}();

var TwoRight = function () {
  function TwoRight(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  TwoRight.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new TwoRight(value0, value1, value2);
      };
    };
  };

  return TwoRight;
}();

var ThreeLeft = function () {
  function ThreeLeft(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeLeft.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeLeft;
}();

var ThreeMiddle = function () {
  function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeMiddle.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeMiddle;
}();

var ThreeRight = function () {
  function ThreeRight(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  ;

  ThreeRight.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return function (value4) {
            return function (value5) {
              return new ThreeRight(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };

  return ThreeRight;
}();

var KickUp = function () {
  function KickUp(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  KickUp.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new KickUp(value0, value1, value2, value3);
        };
      };
    };
  };

  return KickUp;
}();

var values = function values(v) {
  if (v instanceof Leaf) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Two) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
  }

  ;

  if (v instanceof Three) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [v.constructor.name]);
};

var size = function size(v) {
  if (v instanceof Leaf) {
    return 0;
  }

  ;

  if (v instanceof Two) {
    return (1 + size(v.value0) | 0) + size(v.value3) | 0;
  }

  ;

  if (v instanceof Three) {
    return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [v.constructor.name]);
};

var singleton = function singleton(k) {
  return function (v) {
    return new Two(Leaf.value, k, v, Leaf.value);
  };
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return function (m) {
    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof Leaf) {
            $copy_v = v.value1;
            return;
          }

          ;

          if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
          }

          ;

          if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
          }

          ;

          if (v.value0 instanceof Two) {
            $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
            return;
          }

          ;

          if (v.value0 instanceof Three) {
            $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
  };
};

var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);

var toUnfoldableUnordered = function toUnfoldableUnordered(dictUnfoldable) {
  return function (m) {
    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof Leaf) {
            $copy_v = v.value1;
            return;
          }

          ;

          if (v.value0 instanceof Two) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
          }

          ;

          if (v.value0 instanceof Three) {
            $tco_done = true;
            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
  };
};

var showTree = function showTree(dictShow) {
  return function (dictShow1) {
    return function (v) {
      if (v instanceof Leaf) {
        return "Leaf";
      }

      ;

      if (v instanceof Two) {
        return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
      }

      ;

      if (v instanceof Three) {
        return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [v.constructor.name]);
    };
  };
};

var showMap = function showMap(dictShow) {
  return function (dictShow1) {
    return new Data_Show.Show(function (m) {
      return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
    });
  };
};

var lookupLE = function lookupLE(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value3)));
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return go(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value4);

        if (v3 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value4,
            value: v.value5
          });
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value4,
            value: v.value5
          })(go(v.value6)));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return go(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var lookupGE = function lookupGE(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return go(v.value3);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value1);

        if (v3 instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just({
            key: v.value1,
            value: v.value2
          });
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return go(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var lookup = function lookup(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go($copy_v) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v) {
        if (v instanceof Leaf) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        if (v instanceof Two) {
          var v2 = comp(k)(v.value1);

          if (v2 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value2);
          }

          ;

          if (v2 instanceof Data_Ordering.LT) {
            $copy_v = v.value0;
            return;
          }

          ;
          $copy_v = v.value3;
          return;
        }

        ;

        if (v instanceof Three) {
          var v3 = comp(k)(v.value1);

          if (v3 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value2);
          }

          ;
          var v4 = comp(k)(v.value4);

          if (v4 instanceof Data_Ordering.EQ) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value5);
          }

          ;

          if (v3 instanceof Data_Ordering.LT) {
            $copy_v = v.value0;
            return;
          }

          ;

          if (v4 instanceof Data_Ordering.GT) {
            $copy_v = v.value6;
            return;
          }

          ;
          $copy_v = v.value3;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }

      ;
      return $tco_result;
    };

    return go;
  };
};

var member = function member(dictOrd) {
  return function (k) {
    return function (m) {
      return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
    };
  };
};

var keys = function keys(v) {
  if (v instanceof Leaf) {
    return Data_List_Types.Nil.value;
  }

  ;

  if (v instanceof Two) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
  }

  ;

  if (v instanceof Three) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
  }

  ;
  throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [v.constructor.name]);
};

var isSubmap = function isSubmap(dictOrd) {
  return function (dictEq) {
    return function (m1) {
      return function (m2) {
        var f = function f(v) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
        };

        return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
      };
    };
  };
};

var isEmpty = function isEmpty(v) {
  if (v instanceof Leaf) {
    return true;
  }

  ;
  return false;
};

var functorMap = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof Leaf) {
      return Leaf.value;
    }

    ;

    if (v1 instanceof Two) {
      return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
    }

    ;

    if (v1 instanceof Three) {
      return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [v.constructor.name, v1.constructor.name]);
  };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
  return functorMap;
}, function (v) {
  return function (v1) {
    if (v1 instanceof Leaf) {
      return Leaf.value;
    }

    ;

    if (v1 instanceof Two) {
      return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
    }

    ;

    if (v1 instanceof Three) {
      return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 152): " + [v.constructor.name, v1.constructor.name]);
  };
});

var fromZipper = function fromZipper($copy_dictOrd) {
  return function ($copy_v) {
    return function ($copy_tree) {
      var $tco_var_dictOrd = $copy_dictOrd;
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(dictOrd, v, tree) {
        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return tree;
        }

        ;

        if (v instanceof Data_List_Types.Cons) {
          if (v.value0 instanceof TwoLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
            return;
          }

          ;

          if (v.value0 instanceof TwoRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
            return;
          }

          ;

          if (v.value0 instanceof ThreeLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }

          ;

          if (v.value0 instanceof ThreeMiddle) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }

          ;

          if (v.value0 instanceof ThreeRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [v.value0.constructor.name]);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [v.constructor.name, tree.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
      }

      ;
      return $tco_result;
    };
  };
};

var insert = function insert(dictOrd) {
  return function (k) {
    return function (v) {
      var up = function up($copy_v1) {
        return function ($copy_v2) {
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(v1, v2) {
            if (v1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
            }

            ;

            if (v1 instanceof Data_List_Types.Cons) {
              if (v1.value0 instanceof TwoLeft) {
                $tco_done = true;
                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
              }

              ;

              if (v1.value0 instanceof TwoRight) {
                $tco_done = true;
                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
              }

              ;

              if (v1.value0 instanceof ThreeLeft) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }

              ;

              if (v1.value0 instanceof ThreeMiddle) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }

              ;

              if (v1.value0 instanceof ThreeRight) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [v1.constructor.name, v2.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v1, $copy_v2);
          }

          ;
          return $tco_result;
        };
      };

      var comp = Data_Ord.compare(dictOrd);

      var down = function down($copy_ctx) {
        return function ($copy_v1) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(ctx, v1) {
            if (v1 instanceof Leaf) {
              $tco_done = true;
              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
            }

            ;

            if (v1 instanceof Two) {
              var v2 = comp(k)(v1.value1);

              if (v2 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
              }

              ;

              if (v2 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                $copy_v1 = v1.value0;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
              $copy_v1 = v1.value3;
              return;
            }

            ;

            if (v1 instanceof Three) {
              var v3 = comp(k)(v1.value1);

              if (v3 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
              }

              ;
              var v4 = comp(k)(v1.value4);

              if (v4 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
              }

              ;

              if (v3 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value0;
                return;
              }

              ;

              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value3;
                return;
              }

              ;
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
              $copy_v1 = v1.value6;
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ctx.constructor.name, v1.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
          }

          ;
          return $tco_result;
        };
      };

      return down(Data_List_Types.Nil.value);
    };
  };
};

var pop = function pop(dictOrd) {
  return function (k) {
    var up = function up($copy_ctxs) {
      return function ($copy_tree) {
        var $tco_var_ctxs = $copy_ctxs;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctxs, tree) {
          if (ctxs instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return tree;
          }

          ;

          if (ctxs instanceof Data_List_Types.Cons) {
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
              return;
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
              return;
            }

            ;

            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
            }

            ;

            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value0 instanceof Leaf && ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }

            ;

            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }

            ;

            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
            }

            ;

            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
              $tco_done = true;
              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ctxs.value0.constructor.name, tree.constructor.name]);
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ctxs.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
        }

        ;
        return $tco_result;
      };
    };

    var removeMaxNode = function removeMaxNode($copy_ctx) {
      return function ($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctx, m) {
          if (m instanceof Two && m.value0 instanceof Leaf && m.value3 instanceof Leaf) {
            $tco_done = true;
            return up(ctx)(Leaf.value);
          }

          ;

          if (m instanceof Two) {
            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }

          ;

          if (m instanceof Three && m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
            $tco_done = true;
            return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
          }

          ;

          if (m instanceof Three) {
            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [m.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }

        ;
        return $tco_result;
      };
    };

    var maxNode = function maxNode($copy_m) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(m) {
        if (m instanceof Two && m.value3 instanceof Leaf) {
          $tco_done = true;
          return {
            key: m.value1,
            value: m.value2
          };
        }

        ;

        if (m instanceof Two) {
          $copy_m = m.value3;
          return;
        }

        ;

        if (m instanceof Three && m.value6 instanceof Leaf) {
          $tco_done = true;
          return {
            key: m.value4,
            value: m.value5
          };
        }

        ;

        if (m instanceof Three) {
          $copy_m = m.value6;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [m.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_m);
      }

      ;
      return $tco_result;
    };

    var comp = Data_Ord.compare(dictOrd);

    var down = function down($copy_ctx) {
      return function ($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ctx, m) {
          if (m instanceof Leaf) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
          }

          ;

          if (m instanceof Two) {
            var v = comp(k)(m.value1);

            if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
            }

            ;

            if (v instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value0);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
            }

            ;

            if (v instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
              $copy_m = m.value0;
              return;
            }

            ;
            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }

          ;

          if (m instanceof Three) {
            var leaves = function () {
              if (m.value0 instanceof Leaf && m.value3 instanceof Leaf && m.value6 instanceof Leaf) {
                return true;
              }

              ;
              return false;
            }();

            var v = comp(k)(m.value4);
            var v3 = comp(k)(m.value1);

            if (leaves && v3 instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
            }

            ;

            if (leaves && v instanceof Data_Ordering.EQ) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
            }

            ;

            if (v3 instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value0);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
            }

            ;

            if (v instanceof Data_Ordering.EQ) {
              var max = maxNode(m.value3);
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
            }

            ;

            if (v3 instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value0;
              return;
            }

            ;

            if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value3;
              return;
            }

            ;
            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [m.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }

        ;
        return $tco_result;
      };
    };

    return down(Data_List_Types.Nil.value);
  };
};

var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    return function (m) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
    };
  };
});
var traversableMap = new Data_Traversable.Traversable(function () {
  return foldableMap;
}, function () {
  return functorMap;
}, function (dictApplicative) {
  return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      if (v instanceof Leaf) {
        return Control_Applicative.pure(dictApplicative)(Leaf.value);
      }

      ;

      if (v instanceof Two) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
      }

      ;

      if (v instanceof Three) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [f.constructor.name, v.constructor.name]);
    };
  };
});

var foldSubmap = function foldSubmap(dictOrd) {
  return function (dictMonoid) {
    return function (kmin) {
      return function (kmax) {
        return function (f) {
          var tooSmall = function () {
            if (kmin instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](false);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [kmin.constructor.name]);
          }();

          var tooLarge = function () {
            if (kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmax instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](false);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [kmax.constructor.name]);
          }();

          var inBounds = function () {
            if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
              return function (k) {
                return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
              };
            }

            ;

            if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
              return Data_Function["const"](true);
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [kmin.constructor.name, kmax.constructor.name]);
          }();

          var go = function go(v) {
            if (v instanceof Leaf) {
              return Data_Monoid.mempty(dictMonoid);
            }

            ;

            if (v instanceof Two) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $633 = tooSmall(v.value1);

                if ($633) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value0);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $634 = inBounds(v.value1);

                if ($634) {
                  return f(v.value1)(v.value2);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(function () {
                var $635 = tooLarge(v.value1);

                if ($635) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value3);
              }()));
            }

            ;

            if (v instanceof Three) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $640 = tooSmall(v.value1);

                if ($640) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value0);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $641 = inBounds(v.value1);

                if ($641) {
                  return f(v.value1)(v.value2);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $642 = tooSmall(v.value4) || tooLarge(v.value1);

                if ($642) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value3);
              }())(Data_Semigroup.append(dictMonoid.Semigroup0())(function () {
                var $643 = inBounds(v.value4);

                if ($643) {
                  return f(v.value4)(v.value5);
                }

                ;
                return Data_Monoid.mempty(dictMonoid);
              }())(function () {
                var $644 = tooLarge(v.value4);

                if ($644) {
                  return Data_Monoid.mempty(dictMonoid);
                }

                ;
                return go(v.value6);
              }()))));
            }

            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [v.constructor.name]);
          };

          return go;
        };
      };
    };
  };
};

var findMin = function () {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Leaf) {
          $tco_done = true;
          return v;
        }

        ;

        if (v1 instanceof Two) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }

        ;

        if (v1 instanceof Three) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_Maybe.Nothing.value);
}();

var lookupGT = function lookupGT(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return findMin(v.value3);
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return go(v.value3);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value1);

        if (v3 instanceof Data_Ordering.EQ) {
          return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value0)));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return go(new Two(v.value3, v.value4, v.value5, v.value6));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var findMax = function () {
  var go = function go($copy_v) {
    return function ($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(v, v1) {
        if (v1 instanceof Leaf) {
          $tco_done = true;
          return v;
        }

        ;

        if (v1 instanceof Two) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value3;
          return;
        }

        ;

        if (v1 instanceof Three) {
          $tco_var_v = new Data_Maybe.Just({
            key: v1.value4,
            value: v1.value5
          });
          $copy_v1 = v1.value6;
          return;
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [v.constructor.name, v1.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }

      ;
      return $tco_result;
    };
  };

  return go(Data_Maybe.Nothing.value);
}();

var lookupLT = function lookupLT(dictOrd) {
  return function (k) {
    var comp = Data_Ord.compare(dictOrd);

    var go = function go(v) {
      if (v instanceof Leaf) {
        return Data_Maybe.Nothing.value;
      }

      ;

      if (v instanceof Two) {
        var v2 = comp(k)(v.value1);

        if (v2 instanceof Data_Ordering.EQ) {
          return findMax(v.value0);
        }

        ;

        if (v2 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value1,
            value: v.value2
          })(go(v.value3)));
        }

        ;

        if (v2 instanceof Data_Ordering.LT) {
          return go(v.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [v2.constructor.name]);
      }

      ;

      if (v instanceof Three) {
        var v3 = comp(k)(v.value4);

        if (v3 instanceof Data_Ordering.EQ) {
          return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;

        if (v3 instanceof Data_Ordering.GT) {
          return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
            key: v.value4,
            value: v.value5
          })(go(v.value6)));
        }

        ;

        if (v3 instanceof Data_Ordering.LT) {
          return go(new Two(v.value0, v.value1, v.value2, v.value3));
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [v3.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v.constructor.name]);
    };

    return go;
  };
};

var eqMap = function eqMap(dictEq) {
  return function (dictEq1) {
    return new Data_Eq.Eq(function (m1) {
      return function (m2) {
        return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
      };
    });
  };
};

var ordMap = function ordMap(dictOrd) {
  return function (dictOrd1) {
    return new Data_Ord.Ord(function () {
      return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
    }, function (m1) {
      return function (m2) {
        return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
      };
    });
  };
};

var eq1Map = function eq1Map(dictEq) {
  return new Data_Eq.Eq1(function (dictEq1) {
    return Data_Eq.eq(eqMap(dictEq)(dictEq1));
  });
};

var ord1Map = function ord1Map(dictOrd) {
  return new Data_Ord.Ord1(function () {
    return eq1Map(dictOrd.Eq0());
  }, function (dictOrd1) {
    return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
  });
};

var empty = Leaf.value;

var fromFoldable = function fromFoldable(dictOrd) {
  return function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(function (m) {
      return function (v) {
        return insert(dictOrd)(v.value0)(v.value1)(m);
      };
    })(empty);
  };
};

var filterWithKey = function filterWithKey(dictOrd) {
  return function (predicate) {
    var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
    var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
    var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
    return function ($761) {
      return $758($759($760($761)));
    };
  };
};

var filter = function filter(dictOrd) {
  return function (predicate) {
    return filterWithKey(dictOrd)(Data_Function["const"](predicate));
  };
};

var filterKeys = function filterKeys(dictOrd) {
  return function (predicate) {
    return filterWithKey(dictOrd)(function ($762) {
      return Data_Function["const"](predicate($762));
    });
  };
};

var fromFoldableWithIndex = function fromFoldableWithIndex(dictOrd) {
  return function (dictFoldableWithIndex) {
    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
      return function (m) {
        return function (v) {
          return insert(dictOrd)(k)(v)(m);
        };
      };
    })(empty);
  };
};

var intersectionWith = function intersectionWith(dictOrd) {
  return function (f) {
    return function (m1) {
      return function (m2) {
        var go = function go($copy_v) {
          return function ($copy_v1) {
            return function ($copy_m) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;

              function $tco_loop(v, v1, m) {
                if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return m;
                }

                ;

                if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return m;
                }

                ;

                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);

                  if (v2 instanceof Data_Ordering.LT) {
                    $tco_var_v = v.value1;
                    $tco_var_v1 = v1;
                    $copy_m = m;
                    return;
                  }

                  ;

                  if (v2 instanceof Data_Ordering.EQ) {
                    $tco_var_v = v.value1;
                    $tco_var_v1 = v1.value1;
                    $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                    return;
                  }

                  ;

                  if (v2 instanceof Data_Ordering.GT) {
                    $tco_var_v = v;
                    $tco_var_v1 = v1.value1;
                    $copy_m = m;
                    return;
                  }

                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [v2.constructor.name]);
                }

                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [v.constructor.name, v1.constructor.name, m.constructor.name]);
              }

              ;

              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
              }

              ;
              return $tco_result;
            };
          };
        };

        return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
      };
    };
  };
};

var intersection = function intersection(dictOrd) {
  return intersectionWith(dictOrd)(Data_Function["const"]);
};

var $$delete = function $$delete(dictOrd) {
  return function (k) {
    return function (m) {
      return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
    };
  };
};

var difference = function difference(dictOrd) {
  return function (m1) {
    return function (m2) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
    };
  };
};

var checkValid = function checkValid(tree) {
  var allHeights = function allHeights(v) {
    if (v instanceof Leaf) {
      return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
    }

    ;

    if (v instanceof Two) {
      return Data_Functor.map(Data_List_Types.functorList)(function (n) {
        return n + 1 | 0;
      })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
    }

    ;

    if (v instanceof Three) {
      return Data_Functor.map(Data_List_Types.functorList)(function (n) {
        return n + 1 | 0;
      })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
    }

    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [v.constructor.name]);
  };

  return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};

var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
  return foldableMap;
}, function (dictMonoid) {
  return function (f) {
    return function (m) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(function () {
        var $763 = Data_Function.flip(f);
        return function ($764) {
          return Data_Tuple.uncurry($763($764));
        };
      }())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
}, function (f) {
  return function (z) {
    return function (m) {
      return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
    };
  };
});

var mapMaybeWithKey = function mapMaybeWithKey(dictOrd) {
  return function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
      return function (a) {
        return function (acc) {
          return Data_Maybe.maybe(acc)(function (b) {
            return insert(dictOrd)(k)(b)(acc);
          })(f(k)(a));
        };
      };
    })(empty);
  };
};

var mapMaybe = function mapMaybe(dictOrd) {
  var $765 = mapMaybeWithKey(dictOrd);
  return function ($766) {
    return $765(Data_Function["const"]($766));
  };
};

var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
  return foldableWithIndexMap;
}, function () {
  return functorWithIndexMap;
}, function () {
  return traversableMap;
}, function (dictApplicative) {
  return function (f) {
    return function (v) {
      if (v instanceof Leaf) {
        return Control_Applicative.pure(dictApplicative)(Leaf.value);
      }

      ;

      if (v instanceof Two) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
      }

      ;

      if (v instanceof Three) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
      }

      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 150, column 40): " + [f.constructor.name, v.constructor.name]);
    };
  };
});

var alter = function alter(dictOrd) {
  return function (f) {
    return function (k) {
      return function (m) {
        var v = f(lookup(dictOrd)(k)(m));

        if (v instanceof Data_Maybe.Nothing) {
          return $$delete(dictOrd)(k)(m);
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return insert(dictOrd)(k)(v.value0)(m);
        }

        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [v.constructor.name]);
      };
    };
  };
};

var fromFoldableWith = function fromFoldableWith(dictOrd) {
  return function (dictFoldable) {
    return function (f) {
      var combine = function combine(v) {
        return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(f(v)(v1.value0));
          }

          ;

          if (v1 instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(v);
          }

          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [v.constructor.name, v1.constructor.name]);
        };
      };

      return Data_Foldable.foldl(dictFoldable)(function (m) {
        return function (v) {
          return alter(dictOrd)(combine(v.value1))(v.value0)(m);
        };
      })(empty);
    };
  };
};

var insertWith = function insertWith(dictOrd) {
  return function (f) {
    return function (k) {
      return function (v) {
        return alter(dictOrd)(function () {
          var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
          return function ($768) {
            return Data_Maybe.Just.create($767($768));
          };
        }())(k);
      };
    };
  };
};

var unionWith = function unionWith(dictOrd) {
  return function (f) {
    return function (m1) {
      return function (m2) {
        var go = function go(m) {
          return function (v) {
            return alter(dictOrd)(function () {
              var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
              return function ($770) {
                return Data_Maybe.Just.create($769($770));
              };
            }())(v.value0)(m);
          };
        };

        return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
      };
    };
  };
};

var union = function union(dictOrd) {
  return unionWith(dictOrd)(Data_Function["const"]);
};

var semigroupMap = function semigroupMap(dictOrd) {
  return new Data_Semigroup.Semigroup(union(dictOrd));
};

var monoidMap = function monoidMap(dictOrd) {
  return new Data_Monoid.Monoid(function () {
    return semigroupMap(dictOrd);
  }, empty);
};

var submap = function submap(dictOrd) {
  return function (kmin) {
    return function (kmax) {
      return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
    };
  };
};

var unions = function unions(dictOrd) {
  return function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
  };
};

var update = function update(dictOrd) {
  return function (f) {
    return function (k) {
      return function (m) {
        return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
      };
    };
  };
};

module.exports = {
  showTree: showTree,
  empty: empty,
  isEmpty: isEmpty,
  singleton: singleton,
  checkValid: checkValid,
  insert: insert,
  insertWith: insertWith,
  lookup: lookup,
  lookupLE: lookupLE,
  lookupLT: lookupLT,
  lookupGE: lookupGE,
  lookupGT: lookupGT,
  findMin: findMin,
  findMax: findMax,
  foldSubmap: foldSubmap,
  submap: submap,
  fromFoldable: fromFoldable,
  fromFoldableWith: fromFoldableWith,
  fromFoldableWithIndex: fromFoldableWithIndex,
  toUnfoldable: toUnfoldable,
  toUnfoldableUnordered: toUnfoldableUnordered,
  "delete": $$delete,
  pop: pop,
  member: member,
  alter: alter,
  update: update,
  keys: keys,
  values: values,
  union: union,
  unionWith: unionWith,
  unions: unions,
  intersection: intersection,
  intersectionWith: intersectionWith,
  difference: difference,
  isSubmap: isSubmap,
  size: size,
  filterWithKey: filterWithKey,
  filterKeys: filterKeys,
  filter: filter,
  mapMaybeWithKey: mapMaybeWithKey,
  mapMaybe: mapMaybe,
  eq1Map: eq1Map,
  eqMap: eqMap,
  ord1Map: ord1Map,
  ordMap: ordMap,
  showMap: showMap,
  semigroupMap: semigroupMap,
  monoidMap: monoidMap,
  functorMap: functorMap,
  functorWithIndexMap: functorWithIndexMap,
  foldableMap: foldableMap,
  foldableWithIndexMap: foldableWithIndexMap,
  traversableMap: traversableMap,
  traversableWithIndexMap: traversableWithIndexMap
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.List/index.js":"../output/Data.List/index.js","../Data.List.Lazy/index.js":"../output/Data.List.Lazy/index.js","../Data.List.Lazy.Types/index.js":"../output/Data.List.Lazy.Types/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js"}],"../output/Data.Compactable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Compactable = function Compactable(compact, separate) {
  this.compact = compact;
  this.separate = separate;
};

var separate = function separate(dict) {
  return dict.separate;
};

var mapToList = function mapToList(dictOrd) {
  return Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
};

var compactableMaybe = new Compactable(Control_Bind.join(Data_Maybe.bindMaybe), function (v) {
  if (v instanceof Data_Maybe.Nothing) {
    return {
      left: Data_Maybe.Nothing.value,
      right: Data_Maybe.Nothing.value
    };
  }

  ;

  if (v instanceof Data_Maybe.Just) {
    if (v.value0 instanceof Data_Either.Left) {
      return {
        left: new Data_Maybe.Just(v.value0.value0),
        right: Data_Maybe.Nothing.value
      };
    }

    ;

    if (v.value0 instanceof Data_Either.Right) {
      return {
        left: Data_Maybe.Nothing.value,
        right: new Data_Maybe.Just(v.value0.value0)
      };
    }

    ;
    throw new Error("Failed pattern match at Data.Compactable (line 91, column 23 - line 93, column 48): " + [v.value0.constructor.name]);
  }

  ;
  throw new Error("Failed pattern match at Data.Compactable (line 87, column 1 - line 93, column 48): " + [v.constructor.name]);
});

var compactableMap = function compactableMap(dictOrd) {
  return new Compactable(function () {
    var select = function select(v) {
      return function (m) {
        return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](v.value1))(v.value0)(m);
      };
    };

    var $71 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty);
    var $72 = mapToList(dictOrd);
    return function ($73) {
      return $71($72($73));
    };
  }(), function () {
    var select = function select(v) {
      return function (v1) {
        if (v.value1 instanceof Data_Either.Left) {
          return {
            left: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.left),
            right: v1.right
          };
        }

        ;

        if (v.value1 instanceof Data_Either.Right) {
          return {
            left: v1.left,
            right: Data_Map_Internal.insert(dictOrd)(v.value0)(v.value1.value0)(v1.right)
          };
        }

        ;
        throw new Error("Failed pattern match at Data.Compactable (line 142, column 44 - line 144, column 63): " + [v.value1.constructor.name]);
      };
    };

    var $74 = Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
      left: Data_Map_Internal.empty,
      right: Data_Map_Internal.empty
    });
    var $75 = mapToList(dictOrd);
    return function ($76) {
      return $74($75($76));
    };
  }());
};

var compactableList = new Compactable(Data_List.catMaybes, function () {
  var go = function go(acc) {
    return function (v) {
      if (v instanceof Data_Either.Left) {
        return {
          left: Control_Alt.alt(Data_List_Types.altList)(acc.left)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
          right: acc.right
        };
      }

      ;

      if (v instanceof Data_Either.Right) {
        return {
          right: Control_Alt.alt(Data_List_Types.altList)(acc.right)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
          left: acc.left
        };
      }

      ;
      throw new Error("Failed pattern match at Data.Compactable (line 131, column 14 - line 133, column 54): " + [v.constructor.name]);
    };
  };

  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)({
    left: Control_Plus.empty(Data_List_Types.plusList),
    right: Control_Plus.empty(Data_List_Types.plusList)
  });
}());

var compactableEither = function compactableEither(dictMonoid) {
  return new Compactable(function (v) {
    if (v instanceof Data_Either.Left) {
      return new Data_Either.Left(v.value0);
    }

    ;

    if (v instanceof Data_Either.Right) {
      if (v.value0 instanceof Data_Maybe.Just) {
        return new Data_Either.Right(v.value0.value0);
      }

      ;

      if (v.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
      }

      ;
      throw new Error("Failed pattern match at Data.Compactable (line 97, column 23 - line 99, column 27): " + [v.value0.constructor.name]);
    }

    ;
    throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [v.constructor.name]);
  }, function (v) {
    if (v instanceof Data_Either.Left) {
      return {
        left: new Data_Either.Left(v.value0),
        right: new Data_Either.Left(v.value0)
      };
    }

    ;

    if (v instanceof Data_Either.Right) {
      if (v.value0 instanceof Data_Either.Left) {
        return {
          left: new Data_Either.Right(v.value0.value0),
          right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
        };
      }

      ;

      if (v.value0 instanceof Data_Either.Right) {
        return {
          left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
          right: new Data_Either.Right(v.value0.value0)
        };
      }

      ;
      throw new Error("Failed pattern match at Data.Compactable (line 102, column 24 - line 104, column 53): " + [v.value0.constructor.name]);
    }

    ;
    throw new Error("Failed pattern match at Data.Compactable (line 95, column 1 - line 104, column 53): " + [v.constructor.name]);
  });
};

var compactableArray = new Compactable(function (xs) {
  return function __do() {
    var result = Data_Array_ST.empty();
    var iter = Data_Array_ST_Iterator.iterator(function (v) {
      return Data_Array.index(xs)(v);
    })();
    Data_Array_ST_Iterator.iterate(iter)(function () {
      var $77 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
      return function ($78) {
        return $77(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(0);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Data_Array_ST.push(v.value0)(result);
          }

          ;
          throw new Error("Failed pattern match at Data.Compactable (line 111, column 34 - line 113, column 35): " + [v.constructor.name]);
        }($78));
      };
    }())();
    return Data_Array_ST.unsafeFreeze(result)();
  }();
}, function (xs) {
  return function __do() {
    var ls = Data_Array_ST.empty();
    var rs = Data_Array_ST.empty();
    var iter = Data_Array_ST_Iterator.iterator(function (v) {
      return Data_Array.index(xs)(v);
    })();
    Data_Array_ST_Iterator.iterate(iter)(function () {
      var $79 = Data_Functor["void"](Control_Monad_ST_Internal.functorST);
      return function ($80) {
        return $79(function (v) {
          if (v instanceof Data_Either.Left) {
            return Data_Array_ST.push(v.value0)(ls);
          }

          ;

          if (v instanceof Data_Either.Right) {
            return Data_Array_ST.push(v.value0)(rs);
          }

          ;
          throw new Error("Failed pattern match at Data.Compactable (line 122, column 34 - line 124, column 31): " + [v.constructor.name]);
        }($80));
      };
    }())();
    return Control_Apply.apply(Control_Monad_ST_Internal.applyST)(Data_Functor.map(Control_Monad_ST_Internal.functorST)(function (v) {
      return function (v1) {
        return {
          left: v,
          right: v1
        };
      };
    })(Data_Array_ST.unsafeFreeze(ls)))(Data_Array_ST.unsafeFreeze(rs))();
  }();
});

var compactDefault = function compactDefault(dictFunctor) {
  return function (dictCompactable) {
    var $81 = separate(dictCompactable);
    var $82 = Data_Functor.map(dictFunctor)(Data_Either.note(Data_Unit.unit));
    return function ($83) {
      return function (v) {
        return v.right;
      }($81($82($83)));
    };
  };
};

var compact = function compact(dict) {
  return dict.compact;
};

var separateDefault = function separateDefault(dictFunctor) {
  return function (dictCompactable) {
    return function (xs) {
      var swapEither = function swapEither(e) {
        if (e instanceof Data_Either.Left) {
          return new Data_Either.Right(e.value0);
        }

        ;

        if (e instanceof Data_Either.Right) {
          return new Data_Either.Left(e.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Compactable (line 83, column 20 - line 85, column 24): " + [e.constructor.name]);
      };

      return {
        left: compact(dictCompactable)(Data_Functor.map(dictFunctor)(function ($84) {
          return Data_Either.hush(swapEither($84));
        })(xs)),
        right: compact(dictCompactable)(Data_Functor.map(dictFunctor)(Data_Either.hush)(xs))
      };
    };
  };
};

var bindMaybe = function bindMaybe(dictBind) {
  return function (dictCompactable) {
    return function (x) {
      var $85 = compact(dictCompactable);
      var $86 = Control_Bind.bind(dictBind)(x);
      return function ($87) {
        return $85($86($87));
      };
    };
  };
};

var bindEither = function bindEither(dictBind) {
  return function (dictCompactable) {
    return function (x) {
      var $88 = separate(dictCompactable);
      var $89 = Control_Bind.bind(dictBind)(x);
      return function ($90) {
        return $88($89($90));
      };
    };
  };
};

var applyMaybe = function applyMaybe(dictApply) {
  return function (dictCompactable) {
    return function (p) {
      var $91 = compact(dictCompactable);
      var $92 = Control_Apply.apply(dictApply)(p);
      return function ($93) {
        return $91($92($93));
      };
    };
  };
};

var applyEither = function applyEither(dictApply) {
  return function (dictCompactable) {
    return function (p) {
      var $94 = separate(dictCompactable);
      var $95 = Control_Apply.apply(dictApply)(p);
      return function ($96) {
        return $94($95($96));
      };
    };
  };
};

module.exports = {
  Compactable: Compactable,
  compact: compact,
  separate: separate,
  compactDefault: compactDefault,
  separateDefault: separateDefault,
  applyMaybe: applyMaybe,
  applyEither: applyEither,
  bindMaybe: bindMaybe,
  bindEither: bindEither,
  compactableMaybe: compactableMaybe,
  compactableEither: compactableEither,
  compactableArray: compactableArray,
  compactableList: compactableList,
  compactableMap: compactableMap
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad.ST.Internal/index.js":"../output/Control.Monad.ST.Internal/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Array.ST/index.js":"../output/Data.Array.ST/index.js","../Data.Array.ST.Iterator/index.js":"../output/Data.Array.ST.Iterator/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.List/index.js":"../output/Data.List/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"../output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Data.Filterable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Bind = require("../Control.Bind/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Compactable = require("../Data.Compactable/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Filterable = function Filterable(Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
  this.Compactable0 = Compactable0;
  this.Functor1 = Functor1;
  this.filter = filter;
  this.filterMap = filterMap;
  this.partition = partition;
  this.partitionMap = partitionMap;
};

var partitionMapDefault = function partitionMapDefault(dictFilterable) {
  return function (p) {
    var $82 = Data_Compactable.separate(dictFilterable.Compactable0());
    var $83 = Data_Functor.map(dictFilterable.Functor1())(p);
    return function ($84) {
      return $82($83($84));
    };
  };
};

var partitionMap = function partitionMap(dict) {
  return dict.partitionMap;
};

var partition = function partition(dict) {
  return dict.partition;
};

var maybeBool = function maybeBool(p) {
  return function (x) {
    var $33 = p(x);

    if ($33) {
      return new Data_Maybe.Just(x);
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var filterableList = new Filterable(function () {
  return Data_Compactable.compactableList;
}, function () {
  return Data_List_Types.functorList;
}, Data_List.filter, function (p) {
  return Data_List.mapMaybe(p);
}, function (p) {
  return function (xs) {
    var select = function select(x) {
      return function (v) {
        var $36 = p(x);

        if ($36) {
          return {
            no: v.no,
            yes: new Data_List_Types.Cons(x, v.yes)
          };
        }

        ;
        return {
          no: new Data_List_Types.Cons(x, v.no),
          yes: v.yes
        };
      };
    };

    return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
      no: Data_List_Types.Nil.value,
      yes: Data_List_Types.Nil.value
    })(xs);
  };
}, function (p) {
  return function (xs) {
    var select = function select(x) {
      return function (v) {
        var v1 = p(x);

        if (v1 instanceof Data_Either.Left) {
          return {
            left: new Data_List_Types.Cons(v1.value0, v.left),
            right: v.right
          };
        }

        ;

        if (v1 instanceof Data_Either.Right) {
          return {
            left: v.left,
            right: new Data_List_Types.Cons(v1.value0, v.right)
          };
        }

        ;
        throw new Error("Failed pattern match at Data.Filterable (line 190, column 36 - line 192, column 83): " + [v1.constructor.name]);
      };
    };

    return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
      left: Data_List_Types.Nil.value,
      right: Data_List_Types.Nil.value
    })(xs);
  };
});
var filterableArray = new Filterable(function () {
  return Data_Compactable.compactableArray;
}, function () {
  return Data_Functor.functorArray;
}, Data_Array.filter, Data_Array.mapMaybe, Data_Array.partition, function (p) {
  var go = function go(acc) {
    return function (x) {
      var v = p(x);

      if (v instanceof Data_Either.Left) {
        return {
          left: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.left)([v.value0]),
          right: acc.right
        };
      }

      ;

      if (v instanceof Data_Either.Right) {
        return {
          right: Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc.right)([v.value0]),
          left: acc.left
        };
      }

      ;
      throw new Error("Failed pattern match at Data.Filterable (line 149, column 16 - line 151, column 50): " + [v.constructor.name]);
    };
  };

  return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
    left: [],
    right: []
  });
});

var filterMapDefault = function filterMapDefault(dictFilterable) {
  return function (p) {
    var $85 = Data_Compactable.compact(dictFilterable.Compactable0());
    var $86 = Data_Functor.map(dictFilterable.Functor1())(p);
    return function ($87) {
      return $85($86($87));
    };
  };
};

var filterMap = function filterMap(dict) {
  return dict.filterMap;
};

var partitionDefaultFilterMap = function partitionDefaultFilterMap(dictFilterable) {
  return function (p) {
    return function (xs) {
      return {
        yes: filterMap(dictFilterable)(maybeBool(p))(xs),
        no: filterMap(dictFilterable)(maybeBool(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p)))(xs)
      };
    };
  };
};

var filterDefaultPartition = function filterDefaultPartition(dictFilterable) {
  return function (p) {
    return function (xs) {
      return partition(dictFilterable)(p)(xs).yes;
    };
  };
};

var filterDefault = function filterDefault(dictFilterable) {
  var $88 = filterMap(dictFilterable);
  return function ($89) {
    return $88(maybeBool($89));
  };
};

var filter = function filter(dict) {
  return dict.filter;
};

var partitionDefaultFilter = function partitionDefaultFilter(dictFilterable) {
  return function (p) {
    return function (xs) {
      return {
        yes: filter(dictFilterable)(p)(xs),
        no: filter(dictFilterable)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(p))(xs)
      };
    };
  };
};

var eitherBool = function eitherBool(p) {
  return function (x) {
    var $49 = p(x);

    if ($49) {
      return new Data_Either.Right(x);
    }

    ;
    return new Data_Either.Left(x);
  };
};

var filterDefaultPartitionMap = function filterDefaultPartitionMap(dictFilterable) {
  return function (p) {
    return function (xs) {
      return partitionMap(dictFilterable)(eitherBool(p))(xs).right;
    };
  };
};

var partitionDefault = function partitionDefault(dictFilterable) {
  return function (p) {
    return function (xs) {
      var o = partitionMap(dictFilterable)(eitherBool(p))(xs);
      return {
        no: o.left,
        yes: o.right
      };
    };
  };
};

var filterableEither = function filterableEither(dictMonoid) {
  return new Filterable(function () {
    return Data_Compactable.compactableEither(dictMonoid);
  }, function () {
    return Data_Either.functorEither;
  }, function (p) {
    return filterDefault(filterableEither(dictMonoid))(p);
  }, function (p) {
    return function (v) {
      if (v instanceof Data_Either.Left) {
        return new Data_Either.Left(v.value0);
      }

      ;

      if (v instanceof Data_Either.Right) {
        var v1 = p(v.value0);

        if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left(Data_Monoid.mempty(dictMonoid));
        }

        ;

        if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v1.value0);
        }

        ;
        throw new Error("Failed pattern match at Data.Filterable (line 180, column 27 - line 182, column 22): " + [v1.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [p.constructor.name, v.constructor.name]);
    };
  }, function (p) {
    return partitionDefault(filterableEither(dictMonoid))(p);
  }, function (p) {
    return function (v) {
      if (v instanceof Data_Either.Left) {
        return {
          left: new Data_Either.Left(v.value0),
          right: new Data_Either.Left(v.value0)
        };
      }

      ;

      if (v instanceof Data_Either.Right) {
        var v1 = p(v.value0);

        if (v1 instanceof Data_Either.Left) {
          return {
            left: new Data_Either.Right(v1.value0),
            right: new Data_Either.Left(Data_Monoid.mempty(dictMonoid))
          };
        }

        ;

        if (v1 instanceof Data_Either.Right) {
          return {
            left: new Data_Either.Left(Data_Monoid.mempty(dictMonoid)),
            right: new Data_Either.Right(v1.value0)
          };
        }

        ;
        throw new Error("Failed pattern match at Data.Filterable (line 173, column 30 - line 175, column 53): " + [v1.constructor.name]);
      }

      ;
      throw new Error("Failed pattern match at Data.Filterable (line 171, column 1 - line 184, column 29): " + [p.constructor.name, v.constructor.name]);
    };
  });
};

var filterableMap = function filterableMap(dictOrd) {
  return new Filterable(function () {
    return Data_Compactable.compactableMap(dictOrd);
  }, function () {
    return Data_Map_Internal.functorMap;
  }, function (p) {
    return filterDefault(filterableMap(dictOrd))(p);
  }, function (p) {
    return function (xs) {
      var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);

      var select = function select(v) {
        return function (m) {
          return Data_Map_Internal.alter(dictOrd)(Data_Function["const"](p(v.value1)))(v.value0)(m);
        };
      };

      return Data_Foldable.foldr(Data_List_Types.foldableList)(select)(Data_Map_Internal.empty)(toList(xs));
    };
  }, function (p) {
    return partitionDefault(filterableMap(dictOrd))(p);
  }, function (p) {
    return function (xs) {
      var toList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);

      var select = function select(v) {
        return function (v1) {
          var v2 = p(v.value1);

          if (v2 instanceof Data_Either.Left) {
            return {
              left: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.left),
              right: v1.right
            };
          }

          ;

          if (v2 instanceof Data_Either.Right) {
            return {
              left: v1.left,
              right: Data_Map_Internal.insert(dictOrd)(v.value0)(v2.value0)(v1.right)
            };
          }

          ;
          throw new Error("Failed pattern match at Data.Filterable (line 215, column 44 - line 217, column 57): " + [v2.constructor.name]);
        };
      };

      return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
        left: Data_Map_Internal.empty,
        right: Data_Map_Internal.empty
      })(toList(xs));
    };
  });
};

var filterableMaybe = new Filterable(function () {
  return Data_Compactable.compactableMaybe;
}, function () {
  return Data_Maybe.functorMaybe;
}, function (p) {
  return filterDefault(filterableMaybe)(p);
}, Control_Bind.bindFlipped(Data_Maybe.bindMaybe), function (p) {
  return partitionDefault(filterableMaybe)(p);
}, function (p) {
  return function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return {
        left: Data_Maybe.Nothing.value,
        right: Data_Maybe.Nothing.value
      };
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      var v1 = p(v.value0);

      if (v1 instanceof Data_Either.Left) {
        return {
          left: new Data_Maybe.Just(v1.value0),
          right: Data_Maybe.Nothing.value
        };
      }

      ;

      if (v1 instanceof Data_Either.Right) {
        return {
          left: Data_Maybe.Nothing.value,
          right: new Data_Maybe.Just(v1.value0)
        };
      }

      ;
      throw new Error("Failed pattern match at Data.Filterable (line 161, column 29 - line 163, column 48): " + [v1.constructor.name]);
    }

    ;
    throw new Error("Failed pattern match at Data.Filterable (line 159, column 1 - line 169, column 29): " + [p.constructor.name, v.constructor.name]);
  };
});

var cleared = function cleared(dictFilterable) {
  return filterMap(dictFilterable)(Data_Function["const"](Data_Maybe.Nothing.value));
};

module.exports = {
  Filterable: Filterable,
  partitionMap: partitionMap,
  partition: partition,
  filterMap: filterMap,
  filter: filter,
  eitherBool: eitherBool,
  partitionDefault: partitionDefault,
  partitionDefaultFilter: partitionDefaultFilter,
  partitionDefaultFilterMap: partitionDefaultFilterMap,
  partitionMapDefault: partitionMapDefault,
  maybeBool: maybeBool,
  filterDefault: filterDefault,
  filterDefaultPartition: filterDefaultPartition,
  filterDefaultPartitionMap: filterDefaultPartitionMap,
  filterMapDefault: filterMapDefault,
  cleared: cleared,
  filterableArray: filterableArray,
  filterableMaybe: filterableMaybe,
  filterableEither: filterableEither,
  filterableList: filterableList,
  filterableMap: filterableMap
};
},{"../Control.Bind/index.js":"../output/Control.Bind/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Compactable/index.js":"../output/Data.Compactable/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.List/index.js":"../output/Data.List/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"../output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js"}],"../output/FRP.Event.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Compactable = require("../Data.Compactable/index.js");

var Data_Filterable = require("../Data.Filterable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var IsEvent = function IsEvent(Alternative0, Filterable1, fix, fold, keepLatest, sampleOn) {
  this.Alternative0 = Alternative0;
  this.Filterable1 = Filterable1;
  this.fix = fix;
  this.fold = fold;
  this.keepLatest = keepLatest;
  this.sampleOn = sampleOn;
};

var sampleOn = function sampleOn(dict) {
  return dict.sampleOn;
};

var sampleOn_ = function sampleOn_(dictIsEvent) {
  return function (a) {
    return function (b) {
      return sampleOn(dictIsEvent)(a)(Data_Functor.voidLeft(dictIsEvent.Filterable1().Functor1())(b)(Control_Category.identity(Control_Category.categoryFn)));
    };
  };
};

var keepLatest = function keepLatest(dict) {
  return dict.keepLatest;
};

var gateBy = function gateBy(dictIsEvent) {
  return function (f) {
    return function (sampled) {
      var $20 = Data_Compactable.compact(dictIsEvent.Filterable1().Compactable0());
      var $21 = sampleOn(dictIsEvent)(Control_Alt.alt(dictIsEvent.Alternative0().Plus1().Alt0())(Control_Applicative.pure(dictIsEvent.Alternative0().Applicative0())(Data_Maybe.Nothing.value))(Data_Functor.map(dictIsEvent.Filterable1().Functor1())(Data_Maybe.Just.create)(sampled)));
      var $22 = Data_Functor.map(dictIsEvent.Filterable1().Functor1())(function (x) {
        return function (p) {
          var $12 = f(p)(x);

          if ($12) {
            return new Data_Maybe.Just(x);
          }

          ;
          return Data_Maybe.Nothing.value;
        };
      });
      return function ($23) {
        return $20($21($22($23)));
      };
    };
  };
};

var gate = function gate(dictIsEvent) {
  return gateBy(dictIsEvent)(function (x) {
    return function (v) {
      return Data_Maybe.fromMaybe(false)(x);
    };
  });
};

var fold = function fold(dict) {
  return dict.fold;
};

var folded = function folded(dictIsEvent) {
  return function (dictMonoid) {
    return function (s) {
      return fold(dictIsEvent)(Data_Semigroup.append(dictMonoid.Semigroup0()))(s)(Data_Monoid.mempty(dictMonoid));
    };
  };
};

var mapAccum = function mapAccum(dictIsEvent) {
  return function (f) {
    return function (xs) {
      return function (acc) {
        return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Data_Tuple.snd)(fold(dictIsEvent)(function (a) {
          return function (v) {
            return Data_Functor.map(Data_Tuple.functorTuple)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(f(a)(v.value0));
          };
        })(xs)(new Data_Tuple.Tuple(acc, Data_Maybe.Nothing.value)));
      };
    };
  };
};

var withLast = function withLast(dictIsEvent) {
  return function (e) {
    var step = function step(a) {
      return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just({
            now: a,
            last: Data_Maybe.Nothing.value
          });
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just({
            now: a,
            last: new Data_Maybe.Just(v.value0.now)
          });
        }

        ;
        throw new Error("Failed pattern match at FRP.Event.Class (line 51, column 3 - line 51, column 60): " + [a.constructor.name, v.constructor.name]);
      };
    };

    return Data_Filterable.filterMap(dictIsEvent.Filterable1())(Control_Category.identity(Control_Category.categoryFn))(fold(dictIsEvent)(step)(e)(Data_Maybe.Nothing.value));
  };
};

var fix = function fix(dict) {
  return dict.fix;
};

var count = function count(dictIsEvent) {
  return function (s) {
    return fold(dictIsEvent)(function (v) {
      return function (n) {
        return n + 1 | 0;
      };
    })(s)(0);
  };
};

module.exports = {
  IsEvent: IsEvent,
  fold: fold,
  folded: folded,
  count: count,
  mapAccum: mapAccum,
  withLast: withLast,
  sampleOn: sampleOn,
  sampleOn_: sampleOn_,
  keepLatest: keepLatest,
  fix: fix,
  gate: gate,
  gateBy: gateBy
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Compactable/index.js":"../output/Data.Compactable/index.js","../Data.Filterable/index.js":"../output/Data.Filterable/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js"}],"../output/Unsafe.Reference/foreign.js":[function(require,module,exports) {
"use strict";

exports.reallyUnsafeRefEq = function (a) {
  return function (b) {
    return a === b;
  };
};
},{}],"../output/Unsafe.Reference/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var UnsafeRefEqFallback = function UnsafeRefEqFallback(x) {
  return x;
};

var UnsafeRefEq = function UnsafeRefEq(x) {
  return x;
};

var unsafeRefEq = $foreign.reallyUnsafeRefEq;

var eqUnsafeRefEqFallback = function eqUnsafeRefEqFallback(dictEq) {
  return new Data_Eq.Eq(function (v) {
    return function (v1) {
      return unsafeRefEq(v)(v1) || Data_Eq.eq(dictEq)(v)(v1);
    };
  });
};

var eqUnsafeRefEq = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return unsafeRefEq(v)(v1);
  };
});
module.exports = {
  unsafeRefEq: unsafeRefEq,
  UnsafeRefEq: UnsafeRefEq,
  UnsafeRefEqFallback: UnsafeRefEqFallback,
  eqUnsafeRefEq: eqUnsafeRefEq,
  eqUnsafeRefEqFallback: eqUnsafeRefEqFallback,
  reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
};
},{"./foreign.js":"../output/Unsafe.Reference/foreign.js","../Data.Eq/index.js":"../output/Data.Eq/index.js"}],"../output/FRP.Event/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Compactable = require("../Data.Compactable/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Filterable = require("../Data.Filterable/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Effect_Unsafe = require("../Effect.Unsafe/index.js");

var FRP_Event_Class = require("../FRP.Event.Class/index.js");

var Unsafe_Reference = require("../Unsafe.Reference/index.js");

var Event = function Event(x) {
  return x;
};

var subscribe = function subscribe(v) {
  return function (k) {
    return v(function () {
      var $45 = Data_Functor["void"](Effect.functorEffect);
      return function ($46) {
        return $45(k($46));
      };
    }());
  };
};

var sampleOn = function sampleOn(v) {
  return function (v1) {
    return function (k) {
      return function __do() {
        var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
        var c1 = v(function (a) {
          return Effect_Ref.write(new Data_Maybe.Just(a))(latest);
        })();
        var c2 = v1(function (f) {
          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latest))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($47) {
            return k(f($47));
          }));
        })();
        return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
      };
    };
  };
};

var makeEvent = Event;

var keepLatest = function keepLatest(v) {
  return function (k) {
    return function __do() {
      var cancelInner = Effect_Ref["new"](Data_Maybe.Nothing.value)();
      var cancelOuter = v(function (inner) {
        return function __do() {
          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
          var c = subscribe(inner)(k)();
          return Effect_Ref.write(new Data_Maybe.Just(c))(cancelInner)();
        };
      })();
      return function __do() {
        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(cancelInner))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
        return cancelOuter();
      };
    };
  };
};

var functorEvent = new Data_Functor.Functor(function (f) {
  return function (v) {
    return function (k) {
      return v(function ($48) {
        return k(f($48));
      });
    };
  };
});

var fold = function fold(f) {
  return function (v) {
    return function (b) {
      return function (k) {
        return function __do() {
          var result = Effect_Ref["new"](b)();
          return v(function (a) {
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(result))(k);
          })();
        };
      };
    };
  };
};

var filter = function filter(p) {
  return function (v) {
    return function (k) {
      return v(function (a) {
        var $34 = p(a);

        if ($34) {
          return k(a);
        }

        ;
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      });
    };
  };
};

var create = function __do() {
  var subscribers = Effect_Ref["new"]([])();
  return {
    event: function event(k) {
      return function __do() {
        Effect_Ref.modify(function (v) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([k]);
        })(subscribers)();
        return function __do() {
          Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers)();
          return Data_Unit.unit;
        };
      };
    },
    push: function push(a) {
      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
        return k(a);
      }));
    }
  };
};

var fix = function fix(f) {
  var v = Effect_Unsafe.unsafePerformEffect(create);
  var v1 = f(v.event);
  return function (k) {
    return function __do() {
      var c1 = subscribe(v1.input)(v.push)();
      var c2 = subscribe(v1.output)(k)();
      return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
    };
  };
};

var compactableEvent = new Data_Compactable.Compactable(function (xs) {
  return Data_Functor.map(functorEvent)(function (x) {
    return Data_Maybe.fromJust()(x);
  })(filter(Data_Maybe.isJust)(xs));
}, function (xs) {
  return {
    left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
    right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
  };
});
var filterableEvent = new Data_Filterable.Filterable(function () {
  return compactableEvent;
}, function () {
  return functorEvent;
}, filter, function (f) {
  var $49 = Data_Functor.map(functorEvent)(function (x) {
    return Data_Maybe.fromJust()(x);
  });
  var $50 = filter(Data_Maybe.isJust);
  var $51 = Data_Functor.map(functorEvent)(f);
  return function ($52) {
    return $49($50($51($52)));
  };
}, function (p) {
  return function (xs) {
    return {
      yes: filter(p)(xs),
      no: filter(function () {
        var $53 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
        return function ($54) {
          return $53(p($54));
        };
      }())(xs)
    };
  };
}, function (f) {
  return function (xs) {
    return {
      left: Data_Filterable.filterMap(filterableEvent)(function () {
        var $55 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
        return function ($56) {
          return $55(f($56));
        };
      }())(xs),
      right: Data_Filterable.filterMap(filterableEvent)(function ($57) {
        return Data_Either.hush(f($57));
      })(xs)
    };
  };
});
var applyEvent = new Control_Apply.Apply(function () {
  return functorEvent;
}, function (v) {
  return function (v1) {
    return function (k) {
      return function __do() {
        var latestA = Effect_Ref["new"](Data_Maybe.Nothing.value)();
        var latestB = Effect_Ref["new"](Data_Maybe.Nothing.value)();
        var c1 = v(function (a) {
          return function __do() {
            Effect_Ref.write(new Data_Maybe.Just(a))(latestA)();
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestB))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($58) {
              return k(a($58));
            }))();
          };
        })();
        var c2 = v1(function (b) {
          return function __do() {
            Effect_Ref.write(new Data_Maybe.Just(b))(latestB)();
            return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(latestA))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($59) {
              return k(function (v2) {
                return v2(b);
              }($59));
            }))();
          };
        })();
        return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
      };
    };
  };
});

var semigroupEvent = function semigroupEvent(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEvent)(Data_Semigroup.append(dictSemigroup)));
};

var applicativeEvent = new Control_Applicative.Applicative(function () {
  return applyEvent;
}, function (a) {
  return function (k) {
    return function __do() {
      k(a)();
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    };
  };
});

var monoidEvent = function monoidEvent(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupEvent(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(applicativeEvent)(Data_Monoid.mempty(dictMonoid)));
};

var altEvent = new Control_Alt.Alt(function () {
  return functorEvent;
}, function (v) {
  return function (v1) {
    return function (k) {
      return function __do() {
        var c1 = v(k)();
        var c2 = v1(k)();
        return Control_Apply.applySecond(Effect.applyEffect)(c1)(c2);
      };
    };
  };
});
var plusEvent = new Control_Plus.Plus(function () {
  return altEvent;
}, function (v) {
  return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
});
var alternativeEvent = new Control_Alternative.Alternative(function () {
  return applicativeEvent;
}, function () {
  return plusEvent;
});
var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
  return alternativeEvent;
}, function () {
  return filterableEvent;
}, fix, fold, keepLatest, sampleOn);
module.exports = {
  create: create,
  makeEvent: makeEvent,
  subscribe: subscribe,
  functorEvent: functorEvent,
  compactableEvent: compactableEvent,
  filterableEvent: filterableEvent,
  applyEvent: applyEvent,
  applicativeEvent: applicativeEvent,
  altEvent: altEvent,
  plusEvent: plusEvent,
  alternativeEvent: alternativeEvent,
  semigroupEvent: semigroupEvent,
  monoidEvent: monoidEvent,
  eventIsEvent: eventIsEvent
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Compactable/index.js":"../output/Data.Compactable/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Filterable/index.js":"../output/Data.Filterable/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js","../Effect.Unsafe/index.js":"../output/Effect.Unsafe/index.js","../FRP.Event.Class/index.js":"../output/FRP.Event.Class/index.js","../Unsafe.Reference/index.js":"../output/Unsafe.Reference/index.js"}],"../output/Web.HTML/foreign.js":[function(require,module,exports) {
/* global window */
"use strict";

exports.window = function () {
  return window;
};
},{}],"../output/Web.HTML/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  window: $foreign.window
};
},{"./foreign.js":"../output/Web.HTML/foreign.js"}],"../output/Web.HTML.Window/foreign.js":[function(require,module,exports) {
"use strict";

exports.document = function (window) {
  return function () {
    return window.document;
  };
};

exports.navigator = function (window) {
  return function () {
    return window.navigator;
  };
};

exports.location = function (window) {
  return function () {
    return window.location;
  };
};

exports.history = function (window) {
  return function () {
    return window.history;
  };
};

exports.innerWidth = function (window) {
  return function () {
    return window.innerWidth;
  };
};

exports.innerHeight = function (window) {
  return function () {
    return window.innerHeight;
  };
};

exports.alert = function (str) {
  return function (window) {
    return function () {
      window.alert(str);
      return {};
    };
  };
};

exports.confirm = function (str) {
  return function (window) {
    return function () {
      return window.confirm(str);
    };
  };
};

exports.moveBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.moveBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.moveTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.moveTo(width, height);
        return {};
      };
    };
  };
};

exports._open = function (url) {
  return function (name) {
    return function (features) {
      return function (window) {
        return function () {
          return window.open(url, name, features);
        };
      };
    };
  };
};

exports.outerHeight = function (window) {
  return function () {
    return window.outerHeight;
  };
};

exports.outerWidth = function (window) {
  return function () {
    return window.outerWidth;
  };
};

exports.print = function (window) {
  return function () {
    window.print();
    return {};
  };
};

exports._prompt = function (str) {
  return function (defaultText) {
    return function (window) {
      return function () {
        return window.prompt(str, defaultText);
      };
    };
  };
};

exports.resizeBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.resizeBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.resizeTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.resizeTo(width, height);
        return {};
      };
    };
  };
};

exports.screenX = function (window) {
  return function () {
    return window.screenX;
  };
};

exports.screenY = function (window) {
  return function () {
    return window.screenY;
  };
};

exports.scroll = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scroll(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollBy = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scrollBy(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollX = function (window) {
  return function () {
    return window.scrollX;
  };
};

exports.scrollY = function (window) {
  return function () {
    return window.scrollY;
  };
};

exports.localStorage = function (window) {
  return function () {
    return window.localStorage;
  };
};

exports.sessionStorage = function (window) {
  return function () {
    return window.sessionStorage;
  };
};

exports._requestAnimationFrame = function (fn) {
  return function (window) {
    return function () {
      return window.requestAnimationFrame(fn);
    };
  };
};

exports._cancelAnimationFrame = function (id) {
  return function (window) {
    return function () {
      return window.cancelAnimationFrame(id);
    };
  };
};

exports._requestIdleCallback = function (opts) {
  return function (fn) {
    return function (window) {
      return function () {
        return window.requestIdleCallback(fn, opts);
      };
    };
  };
};

exports._cancelIdleCallback = function (id) {
  return function (window) {
    return function () {
      return window.cancelIdleCallback(id);
    };
  };
};

exports.parent = function (window) {
  return function () {
    return window.parent;
  };
};

exports._opener = function (window) {
  return function () {
    return window.opener;
  };
};
},{}],"../output/Data.Nullable/foreign.js":[function(require,module,exports) {
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};
},{}],"../output/Data.Nullable/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);

var toMaybe = function toMaybe(n) {
  return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};

var showNullable = function showNullable(dictShow) {
  return new Data_Show.Show(function () {
    var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
    return function ($6) {
      return $5(toMaybe($6));
    };
  }());
};

var eqNullable = function eqNullable(dictEq) {
  return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
};

var ordNullable = function ordNullable(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqNullable(dictOrd.Eq0());
  }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
};

var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqNullable(dictEq));
});
var ord1Nullable = new Data_Ord.Ord1(function () {
  return eq1Nullable;
}, function (dictOrd) {
  return Data_Ord.compare(ordNullable(dictOrd));
});
module.exports = {
  toMaybe: toMaybe,
  toNullable: toNullable,
  showNullable: showNullable,
  eqNullable: eqNullable,
  eq1Nullable: eq1Nullable,
  ordNullable: ordNullable,
  ord1Nullable: ord1Nullable,
  "null": $foreign["null"],
  notNull: $foreign.notNull
};
},{"./foreign.js":"../output/Data.Nullable/foreign.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Web.HTML.Window/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var RequestIdleCallbackId = function RequestIdleCallbackId(x) {
  return x;
};

var RequestAnimationFrameId = function RequestAnimationFrameId(x) {
  return x;
};

var toEventTarget = Unsafe_Coerce.unsafeCoerce;

var requestIdleCallback = function requestIdleCallback(opts) {
  return function (fn) {
    var $30 = Data_Functor.map(Effect.functorEffect)(RequestIdleCallbackId);
    var $31 = $foreign["_requestIdleCallback"](opts)(fn);
    return function ($32) {
      return $30($31($32));
    };
  };
};

var requestAnimationFrame = function requestAnimationFrame(fn) {
  var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
  var $34 = $foreign["_requestAnimationFrame"](fn);
  return function ($35) {
    return $33($34($35));
  };
};

var promptDefault = function promptDefault(msg) {
  return function (defaultText) {
    return function (window) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
    };
  };
};

var prompt = function prompt(msg) {
  return function (window) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
  };
};

var opener = function opener(window) {
  return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
};

var open = function open(url$prime) {
  return function (name) {
    return function (features) {
      return function (window) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
      };
    };
  };
};

var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
  return n;
}, RequestIdleCallbackId);
var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
  return n;
}, RequestAnimationFrameId);
var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
  return eqRequestIdleCallbackId;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});
var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
  return eqRequestAnimationFrameId;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});

var cancelIdleCallback = function cancelIdleCallback(idAF) {
  return $foreign["_cancelIdleCallback"](Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
};

var cancelAnimationFrame = function cancelAnimationFrame(idAF) {
  return $foreign["_cancelAnimationFrame"](Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
};

module.exports = {
  toEventTarget: toEventTarget,
  open: open,
  prompt: prompt,
  promptDefault: promptDefault,
  requestAnimationFrame: requestAnimationFrame,
  cancelAnimationFrame: cancelAnimationFrame,
  requestIdleCallback: requestIdleCallback,
  cancelIdleCallback: cancelIdleCallback,
  opener: opener,
  newtypeRequestAnimationFrameId: newtypeRequestAnimationFrameId,
  eqRequestAnimationFrameId: eqRequestAnimationFrameId,
  ordRequestAnimationFrameId: ordRequestAnimationFrameId,
  newtypeRequestIdleCallbackId: newtypeRequestIdleCallbackId,
  eqRequestIdleCallbackId: eqRequestIdleCallbackId,
  ordRequestIdleCallbackId: ordRequestIdleCallbackId,
  document: $foreign.document,
  navigator: $foreign.navigator,
  location: $foreign.location,
  history: $foreign.history,
  innerWidth: $foreign.innerWidth,
  innerHeight: $foreign.innerHeight,
  alert: $foreign.alert,
  confirm: $foreign.confirm,
  moveBy: $foreign.moveBy,
  moveTo: $foreign.moveTo,
  outerHeight: $foreign.outerHeight,
  outerWidth: $foreign.outerWidth,
  print: $foreign.print,
  resizeBy: $foreign.resizeBy,
  resizeTo: $foreign.resizeTo,
  screenX: $foreign.screenX,
  screenY: $foreign.screenY,
  scroll: $foreign.scroll,
  scrollBy: $foreign.scrollBy,
  scrollX: $foreign.scrollX,
  scrollY: $foreign.scrollY,
  localStorage: $foreign.localStorage,
  sessionStorage: $foreign.sessionStorage,
  parent: $foreign.parent
};
},{"./foreign.js":"../output/Web.HTML.Window/foreign.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Effect/index.js":"../output/Effect/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/FRP.Event.AnimationFrame/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Monad = require("../Control.Monad/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var FRP_Event = require("../FRP.Event/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var animationFrame = FRP_Event.makeEvent(function (k) {
  return function __do() {
    var w = Web_HTML.window();
    var cancelled = Effect_Ref["new"](false)();
    var loop = Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(function __do() {
      k(Data_Unit.unit)();
      return Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(cancelled))(loop)();
    })(w));
    loop();
    return Effect_Ref.write(true)(cancelled);
  };
});
module.exports = {
  animationFrame: animationFrame
};
},{"../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js","../FRP.Event/index.js":"../output/FRP.Event/index.js","../Web.HTML/index.js":"../output/Web.HTML/index.js","../Web.HTML.Window/index.js":"../output/Web.HTML.Window/index.js"}],"../output/FRP.Behavior/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Filterable = require("../Data.Filterable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var FRP_Event = require("../FRP.Event/index.js");

var FRP_Event_AnimationFrame = require("../FRP.Event.AnimationFrame/index.js");

var FRP_Event_Class = require("../FRP.Event.Class/index.js");

var ABehavior = function ABehavior(x) {
  return x;
};

var step = function step(dictIsEvent) {
  return function (a) {
    return function (e) {
      return FRP_Event_Class.sampleOn(dictIsEvent)(Control_Alt.alt(dictIsEvent.Alternative0().Plus1().Alt0())(Control_Applicative.pure(dictIsEvent.Alternative0().Applicative0())(a))(e));
    };
  };
};

var unfold = function unfold(dictIsEvent) {
  return function (f) {
    return function (e) {
      return function (a) {
        return step(dictIsEvent)(a)(FRP_Event_Class.fold(dictIsEvent)(f)(e)(a));
      };
    };
  };
};

var sample = function sample(v) {
  return function (e) {
    return v(e);
  };
};

var functorABehavior = function functorABehavior(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (e) {
        return v(Data_Functor.map(dictFunctor)(function (v1) {
          return function ($66) {
            return v1(f($66));
          };
        })(e));
      };
    };
  });
};

var sampleBy = function sampleBy(dictIsEvent) {
  return function (f) {
    return function (b) {
      return function (e) {
        return sample(Data_Functor.map(functorABehavior(dictIsEvent.Filterable1().Functor1()))(f)(b))(Data_Functor.map(dictIsEvent.Filterable1().Functor1())(Data_Function.applyFlipped)(e));
      };
    };
  };
};

var gateBy = function gateBy(dictIsEvent) {
  return function (f) {
    return function (ps) {
      return function (xs) {
        return Data_Filterable.cleared(dictIsEvent.Filterable1())(sampleBy(dictIsEvent)(function (p) {
          return function (x) {
            var $44 = f(p)(x);

            if ($44) {
              return new Data_Maybe.Just(x);
            }

            ;
            return Data_Maybe.Nothing.value;
          };
        })(ps)(xs));
      };
    };
  };
};

var gate = function gate(dictIsEvent) {
  return gateBy(dictIsEvent)(Data_Function["const"]);
};

var integral = function integral(dictIsEvent) {
  return function (dictField) {
    return function (dictSemiring) {
      return function (g) {
        return function (initial) {
          return function (t) {
            return function (b) {
              var two = Data_Semiring.add(dictField.DivisionRing1().Ring0().Semiring0())(Data_Semiring.one(dictField.DivisionRing1().Ring0().Semiring0()))(Data_Semiring.one(dictField.DivisionRing1().Ring0().Semiring0()));

              var approx = function approx(v) {
                return function (s) {
                  if (v.last instanceof Data_Maybe.Nothing) {
                    return s;
                  }

                  ;

                  if (v.last instanceof Data_Maybe.Just) {
                    return Data_Semiring.add(dictSemiring)(s)(g(function (f) {
                      return Data_EuclideanRing.div(dictField.EuclideanRing0())(Data_Semiring.mul(dictField.DivisionRing1().Ring0().Semiring0())(f(Data_Semiring.add(dictSemiring)(v.last.value0.value1)(v.now.value1)))(Data_Ring.sub(dictField.DivisionRing1().Ring0())(v.now.value0)(v.last.value0.value0)))(two);
                    }));
                  }

                  ;
                  throw new Error("Failed pattern match at FRP.Behavior (line 132, column 5 - line 132, column 35): " + [v.constructor.name, s.constructor.name]);
                };
              };

              return function (e) {
                var x = sample(b)(Data_Functor.voidLeft(dictIsEvent.Filterable1().Functor1())(e)(Control_Category.identity(Control_Category.categoryFn)));
                var y = FRP_Event_Class.withLast(dictIsEvent)(sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
                var z = FRP_Event_Class.fold(dictIsEvent)(approx)(y)(initial);
                return Control_Apply.apply(dictIsEvent.Alternative0().Applicative0().Apply0())(e)(z);
              };
            };
          };
        };
      };
    };
  };
};

var integral$prime = function integral$prime(dictIsEvent) {
  return function (dictField) {
    return integral(dictIsEvent)(dictField)(dictField.DivisionRing1().Ring0().Semiring0())(function (v) {
      return v(Control_Category.identity(Control_Category.categoryFn));
    });
  };
};

var sample_ = function sample_(dictIsEvent) {
  return sampleBy(dictIsEvent)(Data_Function["const"]);
};

var derivative = function derivative(dictIsEvent) {
  return function (dictField) {
    return function (dictRing) {
      return function (g) {
        return function (t) {
          return function (b) {
            var approx = function approx(v) {
              if (v.last instanceof Data_Maybe.Nothing) {
                return Data_Semiring.zero(dictRing.Semiring0());
              }

              ;

              if (v.last instanceof Data_Maybe.Just) {
                return g(function (f) {
                  return Data_EuclideanRing.div(dictField.EuclideanRing0())(f(Data_Ring.sub(dictRing)(v.now.value1)(v.last.value0.value1)))(Data_Ring.sub(dictField.DivisionRing1().Ring0())(v.now.value0)(v.last.value0.value0));
                });
              }

              ;
              throw new Error("Failed pattern match at FRP.Behavior (line 177, column 5 - line 177, column 36): " + [v.constructor.name]);
            };

            return function (e) {
              var x = sample(b)(Data_Functor.voidLeft(dictIsEvent.Filterable1().Functor1())(e)(Control_Category.identity(Control_Category.categoryFn)));
              var y = FRP_Event_Class.withLast(dictIsEvent)(sampleBy(dictIsEvent)(Data_Tuple.Tuple.create)(t)(x));
              var z = Data_Functor.map(dictIsEvent.Filterable1().Functor1())(approx)(y);
              return Control_Apply.apply(dictIsEvent.Alternative0().Applicative0().Apply0())(e)(z);
            };
          };
        };
      };
    };
  };
};

var derivative$prime = function derivative$prime(dictIsEvent) {
  return function (dictField) {
    return derivative(dictIsEvent)(dictField)(dictField.DivisionRing1().Ring0())(function (v) {
      return v(Control_Category.identity(Control_Category.categoryFn));
    });
  };
};

var behavior = ABehavior;

var fixB = function fixB(a) {
  return function (f) {
    return behavior(function (s) {
      return FRP_Event_Class.fix(FRP_Event.eventIsEvent)(function (event) {
        var b = f(step(FRP_Event.eventIsEvent)(a)(event));
        return {
          input: sample_(FRP_Event.eventIsEvent)(b)(s),
          output: FRP_Event_Class.sampleOn(FRP_Event.eventIsEvent)(event)(s)
        };
      });
    });
  };
};

var solve = function solve(dictField) {
  return function (dictSemiring) {
    return function (g) {
      return function (a0) {
        return function (t) {
          return function (f) {
            return fixB(a0)(function (b) {
              return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(a0)(t)(f(b));
            });
          };
        };
      };
    };
  };
};

var solve$prime = function solve$prime(dictField) {
  return solve(dictField)(dictField.DivisionRing1().Ring0().Semiring0())(function (v) {
    return v(Control_Category.identity(Control_Category.categoryFn));
  });
};

var solve2 = function solve2(dictField) {
  return function (dictSemiring) {
    return function (g) {
      return function (a0) {
        return function (da0) {
          return function (t) {
            return function (f) {
              return fixB(a0)(function (b) {
                return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(a0)(t)(fixB(da0)(function (db) {
                  return integral(FRP_Event.eventIsEvent)(dictField)(dictSemiring)(g)(da0)(t)(f(b)(db));
                }));
              });
            };
          };
        };
      };
    };
  };
};

var solve2$prime = function solve2$prime(dictField) {
  return solve2(dictField)(dictField.DivisionRing1().Ring0().Semiring0())(function (v) {
    return v(Control_Category.identity(Control_Category.categoryFn));
  });
};

var switcher = function switcher(b0) {
  return function (e) {
    return behavior(function (s) {
      return FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent)(Control_Alt.alt(FRP_Event.altEvent)(Control_Applicative.pure(FRP_Event.applicativeEvent)(sample(b0)(s)))(Data_Functor.map(FRP_Event.functorEvent)(function (b) {
        return sample(b)(s);
      })(e)));
    });
  };
};

var applyABehavior = function applyABehavior(dictFunctor) {
  return new Control_Apply.Apply(function () {
    return functorABehavior(dictFunctor);
  }, function (v) {
    return function (v1) {
      return function (e) {
        return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
      };
    };
  });
};

var semigroupABehavior = function semigroupABehavior(dictFunctor) {
  return function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyABehavior(dictFunctor))(Data_Semigroup.append(dictSemigroup)));
  };
};

var applicativeABehavior = function applicativeABehavior(dictFunctor) {
  return new Control_Applicative.Applicative(function () {
    return applyABehavior(dictFunctor);
  }, function (a) {
    return function (e) {
      return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
    };
  });
};

var monoidABehavior = function monoidABehavior(dictFunctor) {
  return function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
      return semigroupABehavior(dictFunctor)(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeABehavior(dictFunctor))(Data_Monoid.mempty(dictMonoid)));
  };
};

var animate = function animate(scene) {
  return function (render) {
    return FRP_Event.subscribe(sample_(FRP_Event.eventIsEvent)(scene)(FRP_Event_AnimationFrame.animationFrame))(render);
  };
};

module.exports = {
  behavior: behavior,
  step: step,
  sample: sample,
  sampleBy: sampleBy,
  sample_: sample_,
  gate: gate,
  gateBy: gateBy,
  unfold: unfold,
  switcher: switcher,
  integral: integral,
  "integral'": integral$prime,
  derivative: derivative,
  "derivative'": derivative$prime,
  solve: solve,
  "solve'": solve$prime,
  solve2: solve2,
  "solve2'": solve2$prime,
  fixB: fixB,
  animate: animate,
  functorABehavior: functorABehavior,
  applyABehavior: applyABehavior,
  applicativeABehavior: applicativeABehavior,
  semigroupABehavior: semigroupABehavior,
  monoidABehavior: monoidABehavior
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Semigroupoid/index.js":"../output/Control.Semigroupoid/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Filterable/index.js":"../output/Data.Filterable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../FRP.Event/index.js":"../output/FRP.Event/index.js","../FRP.Event.AnimationFrame/index.js":"../output/FRP.Event.AnimationFrame/index.js","../FRP.Event.Class/index.js":"../output/FRP.Event.Class/index.js"}],"../output/Data.Set/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Array_ST = require("../Data.Array.ST/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Map_Internal = require("../Data.Map.Internal/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var $$Set = function $$Set(x) {
  return x;
};

var union = function union(dictOrd) {
  return function (v) {
    return function (v1) {
      return Data_Map_Internal.union(dictOrd)(v)(v1);
    };
  };
};

var toList = function toList(v) {
  return Data_Map_Internal.keys(v);
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  var $63 = Data_List.toUnfoldable(dictUnfoldable);
  return function ($64) {
    return $63(toList($64));
  };
};

var size = function size(v) {
  return Data_Map_Internal.size(v);
};

var singleton = function singleton(a) {
  return Data_Map_Internal.singleton(a)(Data_Unit.unit);
};

var showSet = function showSet(dictShow) {
  return new Data_Show.Show(function (s) {
    return "(fromFoldable " + (Data_Show.show(Data_List_Types.showList(dictShow))(toList(s)) + ")");
  });
};

var semigroupSet = function semigroupSet(dictOrd) {
  return new Data_Semigroup.Semigroup(union(dictOrd));
};

var member = function member(dictOrd) {
  return function (a) {
    return function (v) {
      return Data_Map_Internal.member(dictOrd)(a)(v);
    };
  };
};

var isEmpty = function isEmpty(v) {
  return Data_Map_Internal.isEmpty(v);
};

var insert = function insert(dictOrd) {
  return function (a) {
    return function (v) {
      return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
    };
  };
};

var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
  return function (f) {
    var $65 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
    return function ($66) {
      return $65(toList($66));
    };
  };
}, function (f) {
  return function (x) {
    var $67 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
    return function ($68) {
      return $67(toList($68));
    };
  };
}, function (f) {
  return function (x) {
    var $69 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
    return function ($70) {
      return $69(toList($70));
    };
  };
});

var findMin = function findMin(v) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
    return v1.key;
  })(Data_Map_Internal.findMin(v));
};

var findMax = function findMax(v) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
    return v1.key;
  })(Data_Map_Internal.findMax(v));
};

var filter = function filter(dictOrd) {
  return function (f) {
    return function (v) {
      return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
        return function (v1) {
          return f(k);
        };
      })(v);
    };
  };
};

var eqSet = function eqSet(dictEq) {
  return new Data_Eq.Eq(function (v) {
    return function (v1) {
      return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
    };
  });
};

var ordSet = function ordSet(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqSet(dictOrd.Eq0());
  }, function (s1) {
    return function (s2) {
      return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
    };
  });
};

var eq1Set = new Data_Eq.Eq1(function (dictEq) {
  return Data_Eq.eq(eqSet(dictEq));
});
var ord1Set = new Data_Ord.Ord1(function () {
  return eq1Set;
}, function (dictOrd) {
  return Data_Ord.compare(ordSet(dictOrd));
});
var empty = Data_Map_Internal.empty;

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (dictOrd) {
    return Data_Foldable.foldl(dictFoldable)(function (m) {
      return function (a) {
        return insert(dictOrd)(a)(m);
      };
    })(empty);
  };
};

var intersection = function intersection(dictOrd) {
  return function (s1) {
    return function (s2) {
      var toArray = function () {
        var $71 = Data_Array.fromFoldable(Data_List_Types.foldableList);
        return function ($72) {
          return $71(toList($72));
        };
      }();

      var rs = toArray(s2);
      var rl = Data_Array.length(rs);
      var ls = toArray(s1);
      var ll = Data_Array.length(ls);

      var intersect = function intersect(acc) {
        var go = function go(l) {
          return function (r) {
            var $58 = l < ll && r < rl;

            if ($58) {
              var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);

              if (v instanceof Data_Ordering.EQ) {
                return function __do() {
                  Data_Array_ST.push(ls[l])(acc)();
                  return new Control_Monad_Rec_Class.Loop({
                    a: l + 1 | 0,
                    b: r + 1 | 0
                  });
                };
              }

              ;

              if (v instanceof Data_Ordering.LT) {
                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                  a: l + 1 | 0,
                  b: r
                }));
              }

              ;

              if (v instanceof Data_Ordering.GT) {
                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                  a: l,
                  b: r + 1 | 0
                }));
              }

              ;
              throw new Error("Failed pattern match at Data.Set (line 176, column 12 - line 181, column 43): " + [v.constructor.name]);
            }

            ;
            return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
          };
        };

        return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
      };

      return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(intersect))(Data_Array_ST.unsafeFreeze)());
    };
  };
};

var map = function map(dictOrd) {
  return function (f) {
    return Data_Foldable.foldl(foldableSet)(function (m) {
      return function (a) {
        return insert(dictOrd)(f(a))(m);
      };
    })(empty);
  };
};

var mapMaybe = function mapMaybe(dictOrd) {
  return function (f) {
    return Data_Foldable.foldr(foldableSet)(function (a) {
      return function (acc) {
        return Data_Maybe.maybe(acc)(function (b) {
          return insert(dictOrd)(b)(acc);
        })(f(a));
      };
    })(empty);
  };
};

var monoidSet = function monoidSet(dictOrd) {
  return new Data_Monoid.Monoid(function () {
    return semigroupSet(dictOrd);
  }, empty);
};

var unions = function unions(dictFoldable) {
  return function (dictOrd) {
    return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
  };
};

var $$delete = function $$delete(dictOrd) {
  return function (a) {
    return function (v) {
      return Data_Map_Internal["delete"](dictOrd)(a)(v);
    };
  };
};

var difference = function difference(dictOrd) {
  return function (s1) {
    return function (s2) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
    };
  };
};

var subset = function subset(dictOrd) {
  return function (s1) {
    return function (s2) {
      return isEmpty(difference(dictOrd)(s1)(s2));
    };
  };
};

var properSubset = function properSubset(dictOrd) {
  return function (s1) {
    return function (s2) {
      return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
    };
  };
};

var checkValid = function checkValid(v) {
  return Data_Map_Internal.checkValid(v);
};

module.exports = {
  fromFoldable: fromFoldable,
  toUnfoldable: toUnfoldable,
  empty: empty,
  isEmpty: isEmpty,
  singleton: singleton,
  map: map,
  checkValid: checkValid,
  insert: insert,
  member: member,
  "delete": $$delete,
  size: size,
  findMin: findMin,
  findMax: findMax,
  union: union,
  unions: unions,
  difference: difference,
  subset: subset,
  properSubset: properSubset,
  intersection: intersection,
  filter: filter,
  mapMaybe: mapMaybe,
  eqSet: eqSet,
  eq1Set: eq1Set,
  showSet: showSet,
  ordSet: ordSet,
  ord1Set: ord1Set,
  monoidSet: monoidSet,
  semigroupSet: semigroupSet,
  foldableSet: foldableSet
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.ST.Internal/index.js":"../output/Control.Monad.ST.Internal/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Array.ST/index.js":"../output/Data.Array.ST/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.List/index.js":"../output/Data.List/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Map.Internal/index.js":"../output/Data.Map.Internal/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Web.Event.Event/foreign.js":[function(require,module,exports) {
"use strict";

exports.bubbles = function (e) {
  return e.bubbles;
};

exports.cancelable = function (e) {
  return e.cancelable;
};

exports._currentTarget = function (e) {
  return e.currentTarget;
};

exports.defaultPrevented = function (e) {
  return function () {
    return e.defaultPrevented;
  };
};

exports.eventPhaseIndex = function (e) {
  return e.eventPhase;
};

exports._target = function (e) {
  return e.target;
};

exports.timeStamp = function (e) {
  return e.timeStamp;
};

exports.type_ = function (e) {
  return e.type;
};

exports.preventDefault = function (e) {
  return function () {
    return e.preventDefault();
  };
};

exports.stopImmediatePropagation = function (e) {
  return function () {
    return e.stopImmediatePropagation();
  };
};

exports.stopPropagation = function (e) {
  return function () {
    return e.stopPropagation();
  };
};
},{}],"../output/Data.Enum/foreign.js":[function(require,module,exports) {
"use strict";

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};
},{}],"../output/Data.Enum/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Cardinality = function Cardinality(x) {
  return x;
};

var Enum = function Enum(Ord0, pred, succ) {
  this.Ord0 = Ord0;
  this.pred = pred;
  this.succ = succ;
};

var BoundedEnum = function BoundedEnum(Bounded0, Enum1, cardinality, fromEnum, toEnum) {
  this.Bounded0 = Bounded0;
  this.Enum1 = Enum1;
  this.cardinality = cardinality;
  this.fromEnum = fromEnum;
  this.toEnum = toEnum;
};

var toEnum = function toEnum(dict) {
  return dict.toEnum;
};

var succ = function succ(dict) {
  return dict.succ;
};

var upFromIncluding = function upFromIncluding(dictEnum) {
  return function (dictUnfoldable1) {
    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
  };
};

var showCardinality = new Data_Show.Show(function (v) {
  return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});

var pred = function pred(dict) {
  return dict.pred;
};

var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
  return n;
}, Cardinality);

var fromEnum = function fromEnum(dict) {
  return dict.fromEnum;
};

var toEnumWithDefaults = function toEnumWithDefaults(dictBoundedEnum) {
  return function (low) {
    return function (high) {
      return function (x) {
        var v = toEnum(dictBoundedEnum)(x);

        if (v instanceof Data_Maybe.Just) {
          return v.value0;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));

          if ($54) {
            return low;
          }

          ;
          return high;
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
      };
    };
  };
};

var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function () {
  return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));

var enumTuple = function enumTuple(dictEnum) {
  return function (dictBoundedEnum) {
    return new Enum(function () {
      return Data_Tuple.ordTuple(dictEnum.Ord0())(dictBoundedEnum.Enum1().Ord0());
    }, function (v) {
      return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function () {
        var $96 = Data_Tuple.Tuple.create(v.value0);
        return function ($97) {
          return Data_Maybe.Just.create($96($97));
        };
      }())(pred(dictBoundedEnum.Enum1())(v.value1));
    }, function (v) {
      return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function () {
        var $98 = Data_Tuple.Tuple.create(v.value0);
        return function ($99) {
          return Data_Maybe.Just.create($98($99));
        };
      }())(succ(dictBoundedEnum.Enum1())(v.value1));
    });
  };
};

var enumOrdering = new Enum(function () {
  return Data_Ord.ordOrdering;
}, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return new Data_Maybe.Just(Data_Ordering.LT.value);
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
}, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return new Data_Maybe.Just(Data_Ordering.GT.value);
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
});

var enumMaybe = function enumMaybe(dictBoundedEnum) {
  return new Enum(function () {
    return Data_Maybe.ordMaybe(dictBoundedEnum.Enum1().Ord0());
  }, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
  }, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
      return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
    }

    ;

    if (v instanceof Data_Maybe.Just) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
    }

    ;
    throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
  });
};

var enumInt = new Enum(function () {
  return Data_Ord.ordInt;
}, function (n) {
  var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);

  if ($67) {
    return new Data_Maybe.Just(n - 1 | 0);
  }

  ;
  return Data_Maybe.Nothing.value;
}, function (n) {
  var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);

  if ($68) {
    return new Data_Maybe.Just(n + 1 | 0);
  }

  ;
  return Data_Maybe.Nothing.value;
});

var enumFromTo = function enumFromTo(dictEnum) {
  return function (dictUnfoldable1) {
    var go = function go(step) {
      return function (op) {
        return function (to) {
          return function (a) {
            return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
              return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
            }));
          };
        };
      };
    };

    return function (v) {
      return function (v1) {
        if (Data_Eq.eq(dictEnum.Ord0().Eq0())(v)(v1)) {
          return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
        }

        ;

        if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
        }

        ;

        if (Data_Boolean.otherwise) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
};

var enumFromThenTo = function enumFromThenTo(dictUnfoldable) {
  return function (dictFunctor) {
    return function (dictBoundedEnum) {
      var go = function go(step) {
        return function (to) {
          return function (e) {
            if (e <= to) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
            }

            ;

            if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [step.constructor.name, to.constructor.name, e.constructor.name]);
          };
        };
      };

      return function (a) {
        return function (b) {
          return function (c) {
            var c$prime = fromEnum(dictBoundedEnum)(c);
            var b$prime = fromEnum(dictBoundedEnum)(b);
            var a$prime = fromEnum(dictBoundedEnum)(a);
            return Data_Functor.map(dictFunctor)(function () {
              var $100 = Data_Maybe.fromJust();
              var $101 = toEnum(dictBoundedEnum);
              return function ($102) {
                return $100($101($102));
              };
            }())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
          };
        };
      };
    };
  };
};

var enumEither = function enumEither(dictBoundedEnum) {
  return function (dictBoundedEnum1) {
    return new Enum(function () {
      return Data_Either.ordEither(dictBoundedEnum.Enum1().Ord0())(dictBoundedEnum1.Enum1().Ord0());
    }, function (v) {
      if (v instanceof Data_Either.Left) {
        return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($103) {
          return Data_Maybe.Just.create(Data_Either.Left.create($103));
        })(pred(dictBoundedEnum.Enum1())(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right) {
        return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($104) {
          return Data_Maybe.Just.create(Data_Either.Right.create($104));
        })(pred(dictBoundedEnum1.Enum1())(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
    }, function (v) {
      if (v instanceof Data_Either.Left) {
        return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($105) {
          return Data_Maybe.Just.create(Data_Either.Left.create($105));
        })(succ(dictBoundedEnum.Enum1())(v.value0));
      }

      ;

      if (v instanceof Data_Either.Right) {
        return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($106) {
          return Data_Maybe.Just.create(Data_Either.Right.create($106));
        })(succ(dictBoundedEnum1.Enum1())(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
    });
  };
};

var enumBoolean = new Enum(function () {
  return Data_Ord.ordBoolean;
}, function (v) {
  if (v) {
    return new Data_Maybe.Just(false);
  }

  ;
  return Data_Maybe.Nothing.value;
}, function (v) {
  if (!v) {
    return new Data_Maybe.Just(true);
  }

  ;
  return Data_Maybe.Nothing.value;
});

var downFromIncluding = function downFromIncluding(dictEnum) {
  return function (dictUnfoldable1) {
    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
  };
};

var diag = function diag(a) {
  return new Data_Tuple.Tuple(a, a);
};

var downFrom = function downFrom(dictEnum) {
  return function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function () {
      var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
      var $108 = pred(dictEnum);
      return function ($109) {
        return $107($108($109));
      };
    }());
  };
};

var upFrom = function upFrom(dictEnum) {
  return function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function () {
      var $110 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
      var $111 = succ(dictEnum);
      return function ($112) {
        return $110($111($112));
      };
    }());
  };
};

var defaultToEnum = function defaultToEnum(dictBounded) {
  return function (dictEnum) {
    return function (i$prime) {
      var go = function go($copy_i) {
        return function ($copy_x) {
          var $tco_var_i = $copy_i;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(i, x) {
            var $82 = i === 0;

            if ($82) {
              $tco_done = true;
              return new Data_Maybe.Just(x);
            }

            ;
            var v = succ(dictEnum)(x);

            if (v instanceof Data_Maybe.Just) {
              $tco_var_i = i - 1 | 0;
              $copy_x = v.value0;
              return;
            }

            ;

            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [v.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_i, $copy_x);
          }

          ;
          return $tco_result;
        };
      };

      var $85 = i$prime < 0;

      if ($85) {
        return Data_Maybe.Nothing.value;
      }

      ;
      return go(i$prime)(Data_Bounded.bottom(dictBounded));
    };
  };
};

var defaultSucc = function defaultSucc(toEnum$prime) {
  return function (fromEnum$prime) {
    return function (a) {
      return toEnum$prime(fromEnum$prime(a) + 1 | 0);
    };
  };
};

var defaultPred = function defaultPred(toEnum$prime) {
  return function (fromEnum$prime) {
    return function (a) {
      return toEnum$prime(fromEnum$prime(a) - 1 | 0);
    };
  };
};

var defaultFromEnum = function defaultFromEnum(dictEnum) {
  var go = function go($copy_i) {
    return function ($copy_x) {
      var $tco_var_i = $copy_i;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(i, x) {
        var v = pred(dictEnum)(x);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_i = i + 1 | 0;
          $copy_x = v.value0;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return i;
        }

        ;
        throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_i, $copy_x);
      }

      ;
      return $tco_result;
    };
  };

  return go(0);
};

var defaultCardinality = function defaultCardinality(dictBounded) {
  return function (dictEnum) {
    var go = function go($copy_i) {
      return function ($copy_x) {
        var $tco_var_i = $copy_i;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(i, x) {
          var v = succ(dictEnum)(x);

          if (v instanceof Data_Maybe.Just) {
            $tco_var_i = i + 1 | 0;
            $copy_x = v.value0;
            return;
          }

          ;

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return i;
          }

          ;
          throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_i, $copy_x);
        }

        ;
        return $tco_result;
      };
    };

    return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
  };
};

var charToEnum = function charToEnum(v) {
  if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
    return new Data_Maybe.Just($foreign.fromCharCode(v));
  }

  ;
  return Data_Maybe.Nothing.value;
};

var enumChar = new Enum(function () {
  return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));

var cardinality = function cardinality(dict) {
  return dict.cardinality;
};

var boundedEnumUnit = new BoundedEnum(function () {
  return Data_Bounded.boundedUnit;
}, function () {
  return enumUnit;
}, 1, Data_Function["const"](0), function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(Data_Unit.unit);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function () {
  return Data_Bounded.boundedOrdering;
}, function () {
  return enumOrdering;
}, 3, function (v) {
  if (v instanceof Data_Ordering.LT) {
    return 0;
  }

  ;

  if (v instanceof Data_Ordering.EQ) {
    return 1;
  }

  ;

  if (v instanceof Data_Ordering.GT) {
    return 2;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [v.constructor.name]);
}, function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(Data_Ordering.LT.value);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(Data_Ordering.EQ.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(Data_Ordering.GT.value);
  }

  ;
  return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function () {
  return Data_Bounded.boundedChar;
}, function () {
  return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function () {
  return Data_Bounded.boundedBoolean;
}, function () {
  return enumBoolean;
}, 2, function (v) {
  if (!v) {
    return 0;
  }

  ;

  if (v) {
    return 1;
  }

  ;
  throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [v.constructor.name]);
}, function (v) {
  if (v === 0) {
    return new Data_Maybe.Just(false);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(true);
  }

  ;
  return Data_Maybe.Nothing.value;
});
module.exports = {
  Enum: Enum,
  succ: succ,
  pred: pred,
  BoundedEnum: BoundedEnum,
  cardinality: cardinality,
  toEnum: toEnum,
  fromEnum: fromEnum,
  toEnumWithDefaults: toEnumWithDefaults,
  Cardinality: Cardinality,
  enumFromTo: enumFromTo,
  enumFromThenTo: enumFromThenTo,
  upFrom: upFrom,
  upFromIncluding: upFromIncluding,
  downFrom: downFrom,
  downFromIncluding: downFromIncluding,
  defaultSucc: defaultSucc,
  defaultPred: defaultPred,
  defaultCardinality: defaultCardinality,
  defaultToEnum: defaultToEnum,
  defaultFromEnum: defaultFromEnum,
  enumBoolean: enumBoolean,
  enumInt: enumInt,
  enumChar: enumChar,
  enumUnit: enumUnit,
  enumOrdering: enumOrdering,
  enumMaybe: enumMaybe,
  enumEither: enumEither,
  enumTuple: enumTuple,
  boundedEnumBoolean: boundedEnumBoolean,
  boundedEnumChar: boundedEnumChar,
  boundedEnumUnit: boundedEnumUnit,
  boundedEnumOrdering: boundedEnumOrdering,
  newtypeCardinality: newtypeCardinality,
  eqCardinality: eqCardinality,
  ordCardinality: ordCardinality,
  showCardinality: showCardinality
};
},{"./foreign.js":"../output/Data.Enum/foreign.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js"}],"../output/Web.Event.EventPhase/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var None = function () {
  function None() {}

  ;
  None.value = new None();
  return None;
}();

var Capturing = function () {
  function Capturing() {}

  ;
  Capturing.value = new Capturing();
  return Capturing;
}();

var AtTarget = function () {
  function AtTarget() {}

  ;
  AtTarget.value = new AtTarget();
  return AtTarget;
}();

var Bubbling = function () {
  function Bubbling() {}

  ;
  Bubbling.value = new Bubbling();
  return Bubbling;
}();

var toEnumEventPhase = function toEnumEventPhase(v) {
  if (v === 0) {
    return new Data_Maybe.Just(None.value);
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just(Capturing.value);
  }

  ;

  if (v === 2) {
    return new Data_Maybe.Just(AtTarget.value);
  }

  ;

  if (v === 3) {
    return new Data_Maybe.Just(Bubbling.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var fromEnumEventPhase = function fromEnumEventPhase(v) {
  if (v instanceof None) {
    return 0;
  }

  ;

  if (v instanceof Capturing) {
    return 1;
  }

  ;

  if (v instanceof AtTarget) {
    return 2;
  }

  ;

  if (v instanceof Bubbling) {
    return 3;
  }

  ;
  throw new Error("Failed pattern match at Web.Event.EventPhase (line 40, column 3 - line 44, column 18): " + [v.constructor.name]);
};

var eqEventPhase = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof None && y instanceof None) {
      return true;
    }

    ;

    if (x instanceof Capturing && y instanceof Capturing) {
      return true;
    }

    ;

    if (x instanceof AtTarget && y instanceof AtTarget) {
      return true;
    }

    ;

    if (x instanceof Bubbling && y instanceof Bubbling) {
      return true;
    }

    ;
    return false;
  };
});
var ordEventPhase = new Data_Ord.Ord(function () {
  return eqEventPhase;
}, function (x) {
  return function (y) {
    if (x instanceof None && y instanceof None) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof None) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof None) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Capturing && y instanceof Capturing) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Capturing) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Capturing) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof AtTarget && y instanceof AtTarget) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof AtTarget) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof AtTarget) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Bubbling && y instanceof Bubbling) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Web.Event.EventPhase (line 14, column 1 - line 14, column 48): " + [x.constructor.name, y.constructor.name]);
  };
});
var enumEventPhase = new Data_Enum.Enum(function () {
  return ordEventPhase;
}, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
var boundedEventPhase = new Data_Bounded.Bounded(function () {
  return ordEventPhase;
}, None.value, Bubbling.value);
var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
  return boundedEventPhase;
}, function () {
  return enumEventPhase;
}, 4, fromEnumEventPhase, toEnumEventPhase);
module.exports = {
  None: None,
  Capturing: Capturing,
  AtTarget: AtTarget,
  Bubbling: Bubbling,
  toEnumEventPhase: toEnumEventPhase,
  fromEnumEventPhase: fromEnumEventPhase,
  eqEventPhase: eqEventPhase,
  ordEventPhase: ordEventPhase,
  boundedEventPhase: boundedEventPhase,
  enumEventPhase: enumEventPhase,
  boundedEnumEventPhase: boundedEnumEventPhase
};
},{"../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Enum/index.js":"../output/Data.Enum/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js"}],"../output/Web.Event.Event/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Web_Event_EventPhase = require("../Web.Event.EventPhase/index.js");

var EventType = function EventType(x) {
  return x;
};

var target = function target($4) {
  return Data_Nullable.toMaybe($foreign["_target"]($4));
};

var ordEventType = Data_Ord.ordString;
var newtypeEventType = new Data_Newtype.Newtype(function (n) {
  return n;
}, EventType);

var eventPhase = function eventPhase(dictPartial) {
  var $5 = Data_Maybe.fromJust();
  var $6 = Data_Enum.toEnum(Web_Event_EventPhase.boundedEnumEventPhase);
  return function ($7) {
    return $5($6($foreign.eventPhaseIndex($7)));
  };
};

var eqEventType = Data_Eq.eqString;

var currentTarget = function currentTarget($8) {
  return Data_Nullable.toMaybe($foreign["_currentTarget"]($8));
};

module.exports = {
  EventType: EventType,
  target: target,
  currentTarget: currentTarget,
  eventPhase: eventPhase,
  newtypeEventType: newtypeEventType,
  eqEventType: eqEventType,
  ordEventType: ordEventType,
  type_: $foreign.type_,
  stopPropagation: $foreign.stopPropagation,
  stopImmediatePropagation: $foreign.stopImmediatePropagation,
  bubbles: $foreign.bubbles,
  cancelable: $foreign.cancelable,
  preventDefault: $foreign.preventDefault,
  defaultPrevented: $foreign.defaultPrevented,
  timeStamp: $foreign.timeStamp
};
},{"./foreign.js":"../output/Web.Event.Event/foreign.js","../Data.Enum/index.js":"../output/Data.Enum/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Web.Event.EventPhase/index.js":"../output/Web.Event.EventPhase/index.js"}],"../output/Web.Event.EventTarget/foreign.js":[function(require,module,exports) {
"use strict";

exports.eventListener = function (fn) {
  return function () {
    return function (event) {
      return fn(event)();
    };
  };
};

exports.addEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.removeEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.dispatchEvent = function (event) {
  return function (target) {
    return function () {
      return target.dispatchEvent(event);
    };
  };
};
},{}],"../output/Web.Event.EventTarget/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  eventListener: $foreign.eventListener,
  addEventListener: $foreign.addEventListener,
  removeEventListener: $foreign.removeEventListener,
  dispatchEvent: $foreign.dispatchEvent
};
},{"./foreign.js":"../output/Web.Event.EventTarget/foreign.js"}],"../output/Web.UIEvent.MouseEvent/foreign.js":[function(require,module,exports) {
"use strict";

exports.screenX = function (e) {
  return e.screenX;
};

exports.screenY = function (e) {
  return e.screenY;
};

exports.clientX = function (e) {
  return e.clientX;
};

exports.clientY = function (e) {
  return e.clientY;
};

exports.pageX = function (e) {
  return e.pageX;
};

exports.pageY = function (e) {
  return e.pageY;
};

exports.ctrlKey = function (e) {
  return e.ctrlKey;
};

exports.shiftKey = function (e) {
  return e.shiftKey;
};

exports.altKey = function (e) {
  return e.altKey;
};

exports.metaKey = function (e) {
  return e.metaKey;
};

exports.button = function (e) {
  return e.button;
};

exports._relatedTarget = function (e) {
  return e.relatedTarget;
};

exports.buttons = function (e) {
  return e.buttons;
};

exports.getModifierState = function (s) {
  return function (e) {
    return function () {
      return e.getModifierState(s);
    };
  };
};
},{}],"../output/Web.Internal.FFI/foreign.js":[function(require,module,exports) {
"use strict";

exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
  if (typeof window !== "undefined") {
    var ty = window[name];

    if (ty != null && value instanceof ty) {
      return just(value);
    }

    return nothing;
  }

  var obj = value;

  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;

    if (constructorName === name) {
      return just(value);
    } else if (constructorName === "Object") {
      return nothing;
    }

    obj = proto;
  }

  return nothing;
};
},{}],"../output/Web.Internal.FFI/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var unsafeReadProtoTagged = function unsafeReadProtoTagged(name) {
  return function (value) {
    return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
  };
};

module.exports = {
  unsafeReadProtoTagged: unsafeReadProtoTagged
};
},{"./foreign.js":"../output/Web.Internal.FFI/foreign.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js"}],"../output/Web.UIEvent.MouseEvent/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toUIEvent = Unsafe_Coerce.unsafeCoerce;
var toEvent = Unsafe_Coerce.unsafeCoerce;
var relatedTarget = Data_Functor.map(Data_Functor.functorFn)(Data_Nullable.toMaybe)($foreign["_relatedTarget"]);
var fromUIEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
module.exports = {
  fromUIEvent: fromUIEvent,
  fromEvent: fromEvent,
  toUIEvent: toUIEvent,
  toEvent: toEvent,
  relatedTarget: relatedTarget,
  screenX: $foreign.screenX,
  screenY: $foreign.screenY,
  clientX: $foreign.clientX,
  clientY: $foreign.clientY,
  pageX: $foreign.pageX,
  pageY: $foreign.pageY,
  ctrlKey: $foreign.ctrlKey,
  shiftKey: $foreign.shiftKey,
  altKey: $foreign.altKey,
  metaKey: $foreign.metaKey,
  button: $foreign.button,
  buttons: $foreign.buttons,
  getModifierState: $foreign.getModifierState
};
},{"./foreign.js":"../output/Web.UIEvent.MouseEvent/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.Internal.FFI/index.js":"../output/Web.Internal.FFI/index.js"}],"../output/FRP.Event.Mouse/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Data_Compactable = require("../Data.Compactable/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Set = require("../Data.Set/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect = require("../Effect/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var FRP_Event = require("../FRP.Event/index.js");

var Web_Event_Event = require("../Web.Event.Event/index.js");

var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var Web_UIEvent_MouseEvent = require("../Web.UIEvent.MouseEvent/index.js");

var Mouse = function Mouse(x) {
  return x;
};

var withPosition = function withPosition(v) {
  return function (e) {
    return FRP_Event.makeEvent(function (k) {
      return FRP_Event.subscribe(e)(function (value) {
        return function __do() {
          var pos = Effect_Ref.read(v.position)();
          return k({
            value: value,
            pos: pos
          })();
        };
      });
    });
  };
};

var withButtons = function withButtons(v) {
  return function (e) {
    return FRP_Event.makeEvent(function (k) {
      return FRP_Event.subscribe(e)(function (value) {
        return function __do() {
          var buttonsValue = Effect_Ref.read(v.buttons)();
          return k({
            value: value,
            buttons: buttonsValue
          })();
        };
      });
    });
  };
};

var up = FRP_Event.makeEvent(function (k) {
  return function __do() {
    var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
    var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
        return k(Web_UIEvent_MouseEvent.button(me));
      })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target)();
    return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target);
  };
});

var move = function move(m) {
  return Data_Compactable.compact(FRP_Event.compactableEvent)(Data_Functor.map(FRP_Event.functorEvent)(function (v) {
    return v.pos;
  })(withPosition(m)(Control_Applicative.pure(FRP_Event.applicativeEvent)(Data_Unit.unit))));
};

var getMouse = function __do() {
  var position = Effect_Ref["new"](Data_Maybe.Nothing.value)();
  var buttons = Effect_Ref["new"](Data_Set.empty)();
  var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
  var mouseMoveListener = Web_Event_EventTarget.eventListener(function (e) {
    return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
      return Effect_Ref.write(new Data_Maybe.Just({
        x: Web_UIEvent_MouseEvent.clientX(me),
        y: Web_UIEvent_MouseEvent.clientY(me)
      }))(position);
    })(Web_UIEvent_MouseEvent.fromEvent(e));
  })();
  var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
    return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
      return Effect_Ref.modify(Data_Set.insert(Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
    })(Web_UIEvent_MouseEvent.fromEvent(e));
  })();
  var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
    return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
      return Effect_Ref.modify(Data_Set["delete"](Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(buttons);
    })(Web_UIEvent_MouseEvent.fromEvent(e));
  })();
  Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(mouseMoveListener)(false)(target)();
  Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
  Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target)();

  var dispose = function __do() {
    Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(mouseMoveListener)(false)(target)();
    Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
    return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(mouseUpListener)(false)(target)();
  };

  return {
    position: position,
    buttons: buttons,
    dispose: dispose
  };
};

var down = FRP_Event.makeEvent(function (k) {
  return function __do() {
    var target = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
    var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
      return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
        return k(Web_UIEvent_MouseEvent.button(me));
      })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target)();
    return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(mouseDownListener)(false)(target);
  };
});

var disposeMouse = function disposeMouse(v) {
  return v.dispose;
};

module.exports = {
  getMouse: getMouse,
  disposeMouse: disposeMouse,
  move: move,
  down: down,
  up: up,
  withPosition: withPosition,
  withButtons: withButtons
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Data.Compactable/index.js":"../output/Data.Compactable/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Set/index.js":"../output/Data.Set/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js","../FRP.Event/index.js":"../output/FRP.Event/index.js","../Web.Event.Event/index.js":"../output/Web.Event.Event/index.js","../Web.Event.EventTarget/index.js":"../output/Web.Event.EventTarget/index.js","../Web.HTML/index.js":"../output/Web.HTML/index.js","../Web.HTML.Window/index.js":"../output/Web.HTML.Window/index.js","../Web.UIEvent.MouseEvent/index.js":"../output/Web.UIEvent.MouseEvent/index.js"}],"../output/FRP.Behavior.Mouse/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var FRP_Behavior = require("../FRP.Behavior/index.js");

var FRP_Event = require("../FRP.Event/index.js");

var FRP_Event_Mouse = require("../FRP.Event.Mouse/index.js");

var position = function position(m) {
  return FRP_Behavior.behavior(function (e) {
    return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
      return v.value(v.pos);
    })(FRP_Event_Mouse.withPosition(m)(e));
  });
};

var buttons = function buttons(m) {
  return FRP_Behavior.behavior(function (e) {
    return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
      return v.value(v.buttons);
    })(FRP_Event_Mouse.withButtons(m)(e));
  });
};

module.exports = {
  position: position,
  buttons: buttons
};
},{"../Data.Functor/index.js":"../output/Data.Functor/index.js","../FRP.Behavior/index.js":"../output/FRP.Behavior/index.js","../FRP.Event/index.js":"../output/FRP.Event/index.js","../FRP.Event.Mouse/index.js":"../output/FRP.Event.Mouse/index.js"}],"../output/Global/foreign.js":[function(require,module,exports) {
/* globals exports */
"use strict";

exports.nan = NaN;
exports.isNaN = isNaN;
exports.infinity = Infinity;
exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

var formatNumber = function formatNumber(format) {
  return function (fail, succ, digits, n) {
    try {
      return succ(n[format](digits));
    } catch (e) {
      return fail(e.message);
    }
  };
};

exports._toFixed = formatNumber("toFixed");
exports._toExponential = formatNumber("toExponential");
exports._toPrecision = formatNumber("toPrecision");

var encdecURI = function encdecURI(encdec) {
  return function (fail, succ, s) {
    try {
      return succ(encdec(s));
    } catch (e) {
      return fail(e.message);
    }
  };
};

exports._decodeURI = encdecURI(decodeURI);
exports._encodeURI = encdecURI(encodeURI);
exports._decodeURIComponent = encdecURI(decodeURIComponent);
exports._encodeURIComponent = encdecURI(encodeURIComponent);
},{}],"../output/Global/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var toPrecision = function toPrecision(digits) {
  return function (n) {
    return $foreign["_toPrecision"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var toFixed = function toFixed(digits) {
  return function (n) {
    return $foreign["_toFixed"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var toExponential = function toExponential(digits) {
  return function (n) {
    return $foreign["_toExponential"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, digits, n);
  };
};

var $$encodeURIComponent = function $$encodeURIComponent(s) {
  return $foreign["_encodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$encodeURI = function $$encodeURI(s) {
  return $foreign["_encodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$decodeURIComponent = function $$decodeURIComponent(s) {
  return $foreign["_decodeURIComponent"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

var $$decodeURI = function $$decodeURI(s) {
  return $foreign["_decodeURI"](Data_Function["const"](Data_Maybe.Nothing.value), Data_Maybe.Just.create, s);
};

module.exports = {
  toFixed: toFixed,
  toExponential: toExponential,
  toPrecision: toPrecision,
  "decodeURI": $$decodeURI,
  "encodeURI": $$encodeURI,
  "decodeURIComponent": $$decodeURIComponent,
  "encodeURIComponent": $$encodeURIComponent,
  nan: $foreign.nan,
  "isNaN": $foreign["isNaN"],
  infinity: $foreign.infinity,
  "isFinite": $foreign["isFinite"],
  readInt: $foreign.readInt,
  readFloat: $foreign.readFloat
};
},{"./foreign.js":"../output/Global/foreign.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js"}],"../output/Data.Int/foreign.js":[function(require,module,exports) {
"use strict";

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;

      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }

      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};

exports.quot = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.rem = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x, y) | 0;
  };
};
},{}],"../output/Data.DivisionRing/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var DivisionRing = function DivisionRing(Ring0, recip) {
  this.Ring0 = Ring0;
  this.recip = recip;
};

var recip = function recip(dict) {
  return dict.recip;
};

var rightDiv = function rightDiv(dictDivisionRing) {
  return function (a) {
    return function (b) {
      return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(a)(recip(dictDivisionRing)(b));
    };
  };
};

var leftDiv = function leftDiv(dictDivisionRing) {
  return function (a) {
    return function (b) {
      return Data_Semiring.mul(dictDivisionRing.Ring0().Semiring0())(recip(dictDivisionRing)(b))(a);
    };
  };
};

var divisionringNumber = new DivisionRing(function () {
  return Data_Ring.ringNumber;
}, function (x) {
  return 1.0 / x;
});
module.exports = {
  DivisionRing: DivisionRing,
  recip: recip,
  leftDiv: leftDiv,
  rightDiv: rightDiv,
  divisionringNumber: divisionringNumber
};
},{"../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js"}],"../output/Math/foreign.js":[function(require,module,exports) {
"use strict"; // module Math

exports.abs = Math.abs;
exports.acos = Math.acos;
exports.asin = Math.asin;
exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;
exports.cos = Math.cos;
exports.exp = Math.exp;
exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;
exports.sin = Math.sin;
exports.sqrt = Math.sqrt;
exports.tan = Math.tan;
exports.e = Math.E;
exports.ln2 = Math.LN2;
exports.ln10 = Math.LN10;
exports.log2e = Math.LOG2E;
exports.log10e = Math.LOG10E;
exports.pi = Math.PI;
exports.tau = 2 * Math.PI;
exports.sqrt1_2 = Math.SQRT1_2;
exports.sqrt2 = Math.SQRT2;
},{}],"../output/Math/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  abs: $foreign.abs,
  acos: $foreign.acos,
  asin: $foreign.asin,
  atan: $foreign.atan,
  atan2: $foreign.atan2,
  ceil: $foreign.ceil,
  cos: $foreign.cos,
  exp: $foreign.exp,
  floor: $foreign.floor,
  log: $foreign.log,
  max: $foreign.max,
  min: $foreign.min,
  pow: $foreign.pow,
  round: $foreign.round,
  sin: $foreign.sin,
  sqrt: $foreign.sqrt,
  tan: $foreign.tan,
  trunc: $foreign.trunc,
  remainder: $foreign.remainder,
  e: $foreign.e,
  ln2: $foreign.ln2,
  ln10: $foreign.ln10,
  log2e: $foreign.log2e,
  log10e: $foreign.log10e,
  pi: $foreign.pi,
  tau: $foreign.tau,
  sqrt1_2: $foreign.sqrt1_2,
  sqrt2: $foreign.sqrt2
};
},{"./foreign.js":"../output/Math/foreign.js"}],"../output/Data.Int/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_DivisionRing = require("../Data.DivisionRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Global = require("../Global/index.js");

var $$Math = require("../Math/index.js");

var Radix = function Radix(x) {
  return x;
};

var Even = function () {
  function Even() {}

  ;
  Even.value = new Even();
  return Even;
}();

var Odd = function () {
  function Odd() {}

  ;
  Odd.value = new Odd();
  return Odd;
}();

var showParity = new Data_Show.Show(function (v) {
  if (v instanceof Even) {
    return "Even";
  }

  ;

  if (v instanceof Odd) {
    return "Odd";
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 114, column 19): " + [v.constructor.name]);
});

var radix = function radix(n) {
  if (n >= 2 && n <= 36) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [n.constructor.name]);
};

var odd = function odd(x) {
  return (x & 1) !== 0;
};

var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var unsafeClamp = function unsafeClamp(x) {
  if (x === Global.infinity) {
    return 0;
  }

  ;

  if (x === -Global.infinity) {
    return 0;
  }

  ;

  if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
    return Data_Bounded.top(Data_Bounded.boundedInt);
  }

  ;

  if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
    return Data_Bounded.bottom(Data_Bounded.boundedInt);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.fromMaybe(0)(fromNumber(x));
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [x.constructor.name]);
};

var round = function round($23) {
  return unsafeClamp($$Math.round($23));
};

var floor = function floor($24) {
  return unsafeClamp($$Math.floor($24));
};

var even = function even(x) {
  return (x & 1) === 0;
};

var parity = function parity(n) {
  var $14 = even(n);

  if ($14) {
    return Even.value;
  }

  ;
  return Odd.value;
};

var eqParity = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Even && y instanceof Even) {
      return true;
    }

    ;

    if (x instanceof Odd && y instanceof Odd) {
      return true;
    }

    ;
    return false;
  };
});
var ordParity = new Data_Ord.Ord(function () {
  return eqParity;
}, function (x) {
  return function (y) {
    if (x instanceof Even && y instanceof Even) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Even) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Even) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Odd && y instanceof Odd) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Data.Int (line 110, column 1 - line 110, column 40): " + [x.constructor.name, y.constructor.name]);
  };
});
var semiringParity = new Data_Semiring.Semiring(function (x) {
  return function (y) {
    var $19 = Data_Eq.eq(eqParity)(x)(y);

    if ($19) {
      return Even.value;
    }

    ;
    return Odd.value;
  };
}, function (v) {
  return function (v1) {
    if (v instanceof Odd && v1 instanceof Odd) {
      return Odd.value;
    }

    ;
    return Even.value;
  };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function () {
  return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
  return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
  return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
  return commutativeRingParity;
}, function (v) {
  if (v instanceof Even) {
    return 0;
  }

  ;

  if (v instanceof Odd) {
    return 1;
  }

  ;
  throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 136, column 17): " + [v.constructor.name]);
}, function (x) {
  return function (v) {
    return x;
  };
}, function (v) {
  return function (v1) {
    return Even.value;
  };
});

var ceil = function ceil($25) {
  return unsafeClamp($$Math.ceil($25));
};

var boundedParity = new Data_Bounded.Bounded(function () {
  return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
  fromNumber: fromNumber,
  ceil: ceil,
  floor: floor,
  round: round,
  fromString: fromString,
  radix: radix,
  binary: binary,
  octal: octal,
  decimal: decimal,
  hexadecimal: hexadecimal,
  base36: base36,
  fromStringAs: fromStringAs,
  Even: Even,
  Odd: Odd,
  parity: parity,
  even: even,
  odd: odd,
  eqParity: eqParity,
  ordParity: ordParity,
  showParity: showParity,
  boundedParity: boundedParity,
  semiringParity: semiringParity,
  ringParity: ringParity,
  commutativeRingParity: commutativeRingParity,
  euclideanRingParity: euclideanRingParity,
  divisionRingParity: divisionRingParity,
  toNumber: $foreign.toNumber,
  toStringAs: $foreign.toStringAs,
  quot: $foreign.quot,
  rem: $foreign.rem,
  pow: $foreign.pow
};
},{"./foreign.js":"../output/Data.Int/foreign.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.DivisionRing/index.js":"../output/Data.DivisionRing/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Global/index.js":"../output/Global/index.js","../Math/index.js":"../output/Math/index.js"}],"../output/Graphics.CanvasAction/foreign.js":[function(require,module,exports) {
exports.styleIsString = function (style) {
  return typeof style == "string";
};

exports.styleIsGradient = function (style) {
  return style instanceof CanvasGradient;
};

exports.styleIsPattern = function (style) {
  return style instanceof CanvasGradient;
};

exports.getCanvasEffect = function (ctx) {
  return function () {
    return ctx.canvas;
  };
};

exports.setFillStyleImpl = function (ctx) {
  return function (style) {
    return function () {
      return void (ctx.fillStyle = style);
    };
  };
};

exports.setStrokeStyleImpl = function (ctx) {
  return function (style) {
    return function () {
      return void (ctx.strokeStyle = style);
    };
  };
};

exports.getFillStyleImpl = function (ctx) {
  return function () {
    return ctx.fillStyle;
  };
};

exports.getStrokeStyleImpl = function (ctx) {
  return function () {
    return ctx.strokeStyle;
  };
};

exports.setImageSmoothingImpl = function (ctx) {
  return function (bool) {
    return function () {
      return void (ctx.imageSmoothingEnabled = bool);
    };
  };
};

exports.getImageSmoothingImpl = function (ctx) {
  return function () {
    return ctx.imageSmoothingEnabled;
  };
};

exports.getTransformImpl = function (ctx) {
  return function () {
    var t = ctx.getTransform();
    return {
      a: t.a,
      b: t.b,
      c: t.c,
      d: t.d,
      e: t.e,
      f: t.f
    };
  };
};

exports.getTextBaselineImpl = function (ctx) {
  return function () {
    return ctx.textBaseline;
  };
};

exports.setTextBaselineImpl = function (ctx) {
  return function (baseline) {
    return function () {
      return void (ctx.textBaseline = baseline);
    };
  };
};
},{}],"../output/Data.Array.NonEmpty.Internal/foreign.js":[function(require,module,exports) {
"use strict";

exports.fold1Impl = function (f) {
  return function (xs) {
    var acc = xs[0];
    var len = xs.length;

    for (var i = 1; i < len; i++) {
      acc = f(acc)(xs[i]);
    }

    return acc;
  };
};

exports.traverse1Impl = function () {
  function Cont(fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function ConsCell(head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function finalCell(head) {
    return new ConsCell(head, emptyList);
  }

  function consList(x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray(list) {
    var arr = [];
    var xs = list;

    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }

    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (f) {
        var buildFrom = function buildFrom(x, ys) {
          return apply(map(consList)(f(x)))(ys);
        };

        var go = function go(acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last = xs[currentLen - 1];
            return new Cont(function () {
              var built = go(buildFrom(last, acc), currentLen - 1, xs);
              return built;
            });
          }
        };

        return function (array) {
          var acc = map(finalCell)(f(array[array.length - 1]));
          var result = go(acc, array.length - 1, array);

          while (result instanceof Cont) {
            result = result.fn();
          }

          return map(listToArray)(result);
        };
      };
    };
  };
}();
},{}],"../output/Data.Array.NonEmpty.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Alt = require("../Control.Alt/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var NonEmptyArray = function NonEmptyArray(x) {
  return x;
};

var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableNonEmptyArray = Data_Traversable.traversableArray;

var showNonEmptyArray = function showNonEmptyArray(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
  });
};

var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;

var ordNonEmptyArray = function ordNonEmptyArray(dictOrd) {
  return Data_Ord.ordArray(dictOrd);
};

var ord1NonEmptyArray = Data_Ord.ord1Array;
var monadNonEmptyArray = Control_Monad.monadArray;
var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
var functorNonEmptyArray = Data_Functor.functorArray;
var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableNonEmptyArray = Data_Foldable.foldableArray;
var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableNonEmptyArray;
}, function (dictSemigroup) {
  return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
}, function (dictSemigroup) {
  return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
});
var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1NonEmptyArray;
}, function () {
  return traversableNonEmptyArray;
}, function (dictApply) {
  return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
}, function (dictApply) {
  return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
});

var eqNonEmptyArray = function eqNonEmptyArray(dictEq) {
  return Data_Eq.eqArray(dictEq);
};

var eq1NonEmptyArray = Data_Eq.eq1Array;
var bindNonEmptyArray = Control_Bind.bindArray;
var applyNonEmptyArray = Control_Apply.applyArray;
var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
var altNonEmptyArray = Control_Alt.altArray;
module.exports = {
  showNonEmptyArray: showNonEmptyArray,
  eqNonEmptyArray: eqNonEmptyArray,
  eq1NonEmptyArray: eq1NonEmptyArray,
  ordNonEmptyArray: ordNonEmptyArray,
  ord1NonEmptyArray: ord1NonEmptyArray,
  semigroupNonEmptyArray: semigroupNonEmptyArray,
  functorNonEmptyArray: functorNonEmptyArray,
  functorWithIndexNonEmptyArray: functorWithIndexNonEmptyArray,
  foldableNonEmptyArray: foldableNonEmptyArray,
  foldableWithIndexNonEmptyArray: foldableWithIndexNonEmptyArray,
  foldable1NonEmptyArray: foldable1NonEmptyArray,
  unfoldable1NonEmptyArray: unfoldable1NonEmptyArray,
  traversableNonEmptyArray: traversableNonEmptyArray,
  traversableWithIndexNonEmptyArray: traversableWithIndexNonEmptyArray,
  traversable1NonEmptyArray: traversable1NonEmptyArray,
  applyNonEmptyArray: applyNonEmptyArray,
  applicativeNonEmptyArray: applicativeNonEmptyArray,
  bindNonEmptyArray: bindNonEmptyArray,
  monadNonEmptyArray: monadNonEmptyArray,
  altNonEmptyArray: altNonEmptyArray
};
},{"./foreign.js":"../output/Data.Array.NonEmpty.Internal/foreign.js","../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.FoldableWithIndex/index.js":"../output/Data.FoldableWithIndex/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.FunctorWithIndex/index.js":"../output/Data.FunctorWithIndex/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.TraversableWithIndex/index.js":"../output/Data.TraversableWithIndex/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Data.Array.NonEmpty/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Bind = require("../Control.Bind/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");

var Data_Bifunctor = require("../Data.Bifunctor/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_NonEmpty = require("../Data.NonEmpty/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
var toArray = Unsafe_Coerce.unsafeCoerce;

var unionBy$prime = function unionBy$prime(eq) {
  return function (xs) {
    var $39 = Data_Array.unionBy(eq)(toArray(xs));
    return function ($40) {
      return unsafeFromArray($39($40));
    };
  };
};

var union$prime = function union$prime(dictEq) {
  return unionBy$prime(Data_Eq.eq(dictEq));
};

var unionBy = function unionBy(eq) {
  return function (xs) {
    var $41 = unionBy$prime(eq)(xs);
    return function ($42) {
      return $41(toArray($42));
    };
  };
};

var union = function union(dictEq) {
  return unionBy(Data_Eq.eq(dictEq));
};

var unzip = function () {
  var $43 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
  return function ($44) {
    return $43(Data_Array.unzip(toArray($44)));
  };
}();

var updateAt = function updateAt(i) {
  return function (x) {
    var $45 = Data_Array.updateAt(i)(x);
    return function ($46) {
      return unsafeFromArrayF($45(toArray($46)));
    };
  };
};

var zip = function zip(xs) {
  return function (ys) {
    return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
  };
};

var zipWith = function zipWith(f) {
  return function (xs) {
    return function (ys) {
      return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
    };
  };
};

var zipWithA = function zipWithA(dictApplicative) {
  return function (f) {
    return function (xs) {
      return function (ys) {
        return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
      };
    };
  };
};

var some = function some(dictAlternative) {
  return function (dictLazy) {
    var $47 = Data_Array.some(dictAlternative)(dictLazy);
    return function ($48) {
      return unsafeFromArrayF($47($48));
    };
  };
};

var snoc$prime = function snoc$prime(xs) {
  return function (x) {
    return unsafeFromArray(Data_Array.snoc(xs)(x));
  };
};

var snoc = function snoc(xs) {
  return function (x) {
    return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
  };
};

var singleton = function singleton($49) {
  return unsafeFromArray(Data_Array.singleton($49));
};

var replicate = function replicate(i) {
  return function (x) {
    return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
  };
};

var range = function range(x) {
  return function (y) {
    return unsafeFromArray(Data_Array.range(x)(y));
  };
};

var modifyAt = function modifyAt(i) {
  return function (f) {
    var $50 = Data_Array.modifyAt(i)(f);
    return function ($51) {
      return unsafeFromArrayF($50(toArray($51)));
    };
  };
};

var intersectBy$prime = function intersectBy$prime(eq) {
  return function (xs) {
    return Data_Array.intersectBy(eq)(toArray(xs));
  };
};

var intersectBy = function intersectBy(eq) {
  return function (xs) {
    var $52 = intersectBy$prime(eq)(xs);
    return function ($53) {
      return $52(toArray($53));
    };
  };
};

var intersect$prime = function intersect$prime(dictEq) {
  return intersectBy$prime(Data_Eq.eq(dictEq));
};

var intersect = function intersect(dictEq) {
  return intersectBy(Data_Eq.eq(dictEq));
};

var insertAt = function insertAt(i) {
  return function (x) {
    var $54 = Data_Array.insertAt(i)(x);
    return function ($55) {
      return unsafeFromArrayF($54(toArray($55)));
    };
  };
};

var fromFoldable1 = function fromFoldable1(dictFoldable1) {
  var $56 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
  return function ($57) {
    return unsafeFromArray($56($57));
  };
};

var fromArray = function fromArray(xs) {
  if (Data_Array.length(xs) > 0) {
    return new Data_Maybe.Just(unsafeFromArray(xs));
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [xs.constructor.name]);
};

var fromFoldable = function fromFoldable(dictFoldable) {
  var $58 = Data_Array.fromFoldable(dictFoldable);
  return function ($59) {
    return fromArray($58($59));
  };
};

var difference$prime = function difference$prime(dictEq) {
  return function (xs) {
    return Data_Array.difference(dictEq)(toArray(xs));
  };
};

var cons$prime = function cons$prime(x) {
  return function (xs) {
    return unsafeFromArray(Data_Array.cons(x)(xs));
  };
};

var fromNonEmpty = function fromNonEmpty(v) {
  return cons$prime(v.value0)(v.value1);
};

var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));

var concat = function () {
  var $60 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
  return function ($61) {
    return unsafeFromArray(Data_Array.concat(toArray($60($61))));
  };
}();

var appendArray = function appendArray(xs) {
  return function (ys) {
    return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
  };
};

var alterAt = function alterAt(i) {
  return function (f) {
    var $62 = Data_Array.alterAt(i)(f);
    return function ($63) {
      return $62(toArray($63));
    };
  };
};

var adaptMaybe = function adaptMaybe(f) {
  var $64 = Data_Maybe.fromJust();
  return function ($65) {
    return $64(f(toArray($65)));
  };
};

var head = adaptMaybe(Data_Array.head);
var init = adaptMaybe(Data_Array.init);
var last = adaptMaybe(Data_Array.last);
var tail = adaptMaybe(Data_Array.tail);
var uncons = adaptMaybe(Data_Array.uncons);

var toNonEmpty = function toNonEmpty($66) {
  return function (v) {
    return new Data_NonEmpty.NonEmpty(v.head, v.tail);
  }(uncons($66));
};

var unsnoc = adaptMaybe(Data_Array.unsnoc);

var adaptAny = function adaptAny(f) {
  return function ($67) {
    return f(toArray($67));
  };
};

var catMaybes = adaptAny(Data_Array.catMaybes);

var $$delete = function $$delete(dictEq) {
  return function (x) {
    return adaptAny(Data_Array["delete"](dictEq)(x));
  };
};

var deleteAt = function deleteAt(i) {
  return adaptAny(Data_Array.deleteAt(i));
};

var deleteBy = function deleteBy(f) {
  return function (x) {
    return adaptAny(Data_Array.deleteBy(f)(x));
  };
};

var difference = function difference(dictEq) {
  return function (xs) {
    return adaptAny(difference$prime(dictEq)(xs));
  };
};

var drop = function drop(i) {
  return adaptAny(Data_Array.drop(i));
};

var dropEnd = function dropEnd(i) {
  return adaptAny(Data_Array.dropEnd(i));
};

var dropWhile = function dropWhile(f) {
  return adaptAny(Data_Array.dropWhile(f));
};

var elemIndex = function elemIndex(dictEq) {
  return function (x) {
    return adaptAny(Data_Array.elemIndex(dictEq)(x));
  };
};

var elemLastIndex = function elemLastIndex(dictEq) {
  return function (x) {
    return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
  };
};

var filter = function filter(f) {
  return adaptAny(Data_Array.filter(f));
};

var filterA = function filterA(dictApplicative) {
  return function (f) {
    return adaptAny(Data_Array.filterA(dictApplicative)(f));
  };
};

var findIndex = function findIndex(x) {
  return adaptAny(Data_Array.findIndex(x));
};

var findLastIndex = function findLastIndex(x) {
  return adaptAny(Data_Array.findLastIndex(x));
};

var foldM = function foldM(dictMonad) {
  return function (f) {
    return function (acc) {
      return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
    };
  };
};

var foldRecM = function foldRecM(dictMonadRec) {
  return function (f) {
    return function (acc) {
      return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
    };
  };
};

var index = adaptAny(Data_Array.index);
var length = adaptAny(Data_Array.length);

var mapMaybe = function mapMaybe(f) {
  return adaptAny(Data_Array.mapMaybe(f));
};

var partition = function partition(f) {
  return adaptAny(Data_Array.partition(f));
};

var slice = function slice(start) {
  return function (end) {
    return adaptAny(Data_Array.slice(start)(end));
  };
};

var span = function span(f) {
  return adaptAny(Data_Array.span(f));
};

var take = function take(i) {
  return adaptAny(Data_Array.take(i));
};

var takeEnd = function takeEnd(i) {
  return adaptAny(Data_Array.takeEnd(i));
};

var takeWhile = function takeWhile(f) {
  return adaptAny(Data_Array.takeWhile(f));
};

var toUnfoldable = function toUnfoldable(dictUnfoldable) {
  return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
};

var unsafeAdapt = function unsafeAdapt(f) {
  var $68 = adaptAny(f);
  return function ($69) {
    return unsafeFromArray($68($69));
  };
};

var cons = function cons(x) {
  return unsafeAdapt(Data_Array.cons(x));
};

var insert = function insert(dictOrd) {
  return function (x) {
    return unsafeAdapt(Data_Array.insert(dictOrd)(x));
  };
};

var insertBy = function insertBy(f) {
  return function (x) {
    return unsafeAdapt(Data_Array.insertBy(f)(x));
  };
};

var modifyAtIndices = function modifyAtIndices(dictFoldable) {
  return function (is) {
    return function (f) {
      return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
    };
  };
};

var nub = function nub(dictOrd) {
  return unsafeAdapt(Data_Array.nub(dictOrd));
};

var nubBy = function nubBy(f) {
  return unsafeAdapt(Data_Array.nubBy(f));
};

var nubByEq = function nubByEq(f) {
  return unsafeAdapt(Data_Array.nubByEq(f));
};

var nubEq = function nubEq(dictEq) {
  return unsafeAdapt(Data_Array.nubEq(dictEq));
};

var reverse = unsafeAdapt(Data_Array.reverse);

var sort = function sort(dictOrd) {
  return unsafeAdapt(Data_Array.sort(dictOrd));
};

var sortBy = function sortBy(f) {
  return unsafeAdapt(Data_Array.sortBy(f));
};

var sortWith = function sortWith(dictOrd) {
  return function (f) {
    return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
  };
};

var updateAtIndices = function updateAtIndices(dictFoldable) {
  return function (pairs) {
    return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
  };
};

var unsafeIndex = function unsafeIndex(dictPartial) {
  return adaptAny(Data_Array.unsafeIndex());
};

var toUnfoldable1 = function toUnfoldable1(dictUnfoldable1) {
  return function (xs) {
    var len = length(xs);

    var f = function f(i) {
      return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))(function () {
        var $38 = i < (len - 1 | 0);

        if ($38) {
          return new Data_Maybe.Just(i + 1 | 0);
        }

        ;
        return Data_Maybe.Nothing.value;
      }());
    };

    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
  };
};

module.exports = {
  fromArray: fromArray,
  fromNonEmpty: fromNonEmpty,
  toArray: toArray,
  toNonEmpty: toNonEmpty,
  fromFoldable: fromFoldable,
  fromFoldable1: fromFoldable1,
  toUnfoldable: toUnfoldable,
  toUnfoldable1: toUnfoldable1,
  singleton: singleton,
  range: range,
  replicate: replicate,
  some: some,
  length: length,
  cons: cons,
  "cons'": cons$prime,
  snoc: snoc,
  "snoc'": snoc$prime,
  appendArray: appendArray,
  insert: insert,
  insertBy: insertBy,
  head: head,
  last: last,
  tail: tail,
  init: init,
  uncons: uncons,
  unsnoc: unsnoc,
  index: index,
  elemIndex: elemIndex,
  elemLastIndex: elemLastIndex,
  findIndex: findIndex,
  findLastIndex: findLastIndex,
  insertAt: insertAt,
  deleteAt: deleteAt,
  updateAt: updateAt,
  updateAtIndices: updateAtIndices,
  modifyAt: modifyAt,
  modifyAtIndices: modifyAtIndices,
  alterAt: alterAt,
  reverse: reverse,
  concat: concat,
  concatMap: concatMap,
  filter: filter,
  partition: partition,
  filterA: filterA,
  mapMaybe: mapMaybe,
  catMaybes: catMaybes,
  sort: sort,
  sortBy: sortBy,
  sortWith: sortWith,
  slice: slice,
  take: take,
  takeEnd: takeEnd,
  takeWhile: takeWhile,
  drop: drop,
  dropEnd: dropEnd,
  dropWhile: dropWhile,
  span: span,
  nub: nub,
  nubBy: nubBy,
  nubEq: nubEq,
  nubByEq: nubByEq,
  union: union,
  "union'": union$prime,
  unionBy: unionBy,
  "unionBy'": unionBy$prime,
  "delete": $$delete,
  deleteBy: deleteBy,
  difference: difference,
  "difference'": difference$prime,
  intersect: intersect,
  "intersect'": intersect$prime,
  intersectBy: intersectBy,
  "intersectBy'": intersectBy$prime,
  zipWith: zipWith,
  zipWithA: zipWithA,
  zip: zip,
  unzip: unzip,
  foldM: foldM,
  foldRecM: foldRecM,
  unsafeIndex: unsafeIndex
};
},{"../Control.Bind/index.js":"../output/Control.Bind/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Array.NonEmpty.Internal/index.js":"../output/Data.Array.NonEmpty.Internal/index.js","../Data.Bifunctor/index.js":"../output/Data.Bifunctor/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.NonEmpty/index.js":"../output/Data.NonEmpty/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Data.String.CodePoints/foreign.js":[function(require,module,exports) {
"use strict";
/* global Symbol */

var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";

exports._unsafeCodePointAt0 = function (fallback) {
  return hasCodePointAt ? function (str) {
    return str.codePointAt(0);
  } : fallback;
};

exports._codePointAt = function (fallback) {
  return function (Just) {
    return function (Nothing) {
      return function (unsafeCodePointAt0) {
        return function (index) {
          return function (str) {
            var length = str.length;
            if (index < 0 || index >= length) return Nothing;

            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();

              for (var i = index;; --i) {
                var o = iter.next();
                if (o.done) return Nothing;
                if (i === 0) return Just(unsafeCodePointAt0(o.value));
              }
            }

            return fallback(index)(str);
          };
        };
      };
    };
  };
};

exports._countPrefix = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasStringIterator) {
      return function (pred) {
        return function (str) {
          var iter = str[Symbol.iterator]();

          for (var cpCount = 0;; ++cpCount) {
            var o = iter.next();
            if (o.done) return cpCount;
            var cp = unsafeCodePointAt0(o.value);
            if (!pred(cp)) return cpCount;
          }
        };
      };
    }

    return fallback;
  };
};

exports._fromCodePointArray = function (singleton) {
  return hasFromCodePoint ? function (cps) {
    // Function.prototype.apply will fail for very large second parameters,
    // so we don't use it for arrays with 10,000 or more entries.
    if (cps.length < 10e3) {
      return String.fromCodePoint.apply(String, cps);
    }

    return cps.map(singleton).join("");
  } : function (cps) {
    return cps.map(singleton).join("");
  };
};

exports._singleton = function (fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};

exports._take = function (fallback) {
  return function (n) {
    if (hasStringIterator) {
      return function (str) {
        var accum = "";
        var iter = str[Symbol.iterator]();

        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }

        return accum;
      };
    }

    return fallback(n);
  };
};

exports._toCodePointArray = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasArrayFrom) {
      return function (str) {
        return Array.from(str, unsafeCodePointAt0);
      };
    }

    return fallback;
  };
};
},{}],"../output/Data.String.CodeUnits/foreign.js":[function(require,module,exports) {
"use strict";

exports.fromCharArray = function (a) {
  return a.join("");
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.singleton = function (c) {
  return c;
};

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports.countPrefix = function (p) {
  return function (s) {
    var i = 0;

    while (i < s.length && p(s.charAt(i))) {
      i++;
    }

    return i;
  };
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._indexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports._lastIndexOfStartingAt = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports._slice = function (b) {
  return function (e) {
    return function (s) {
      return s.slice(b, e);
    };
  };
};

exports.splitAt = function (i) {
  return function (s) {
    return {
      before: s.substring(0, i),
      after: s.substring(i)
    };
  };
};
},{}],"../output/Data.String.Unsafe/foreign.js":[function(require,module,exports) {
"use strict";

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};
},{}],"../output/Data.String.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

module.exports = {
  "char": $foreign["char"],
  charAt: $foreign.charAt
};
},{"./foreign.js":"../output/Data.String.Unsafe/foreign.js"}],"../output/Data.String.CodeUnits/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");

var uncons = function uncons(v) {
  if (v === "") {
    return Data_Maybe.Nothing.value;
  }

  ;
  return new Data_Maybe.Just({
    head: Data_String_Unsafe.charAt(0)(v),
    tail: $foreign.drop(1)(v)
  });
};

var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var takeWhile = function takeWhile(p) {
  return function (s) {
    return $foreign.take($foreign.countPrefix(p)(s))(s);
  };
};

var takeRight = function takeRight(i) {
  return function (s) {
    return $foreign.drop($foreign.length(s) - i | 0)(s);
  };
};

var stripSuffix = function stripSuffix(v) {
  return function (str) {
    var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
    var $9 = v1.after === v;

    if ($9) {
      return new Data_Maybe.Just(v1.before);
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var stripPrefix = function stripPrefix(v) {
  return function (str) {
    var v1 = $foreign.splitAt($foreign.length(v))(str);
    var $15 = v1.before === v;

    if ($15) {
      return new Data_Maybe.Just(v1.after);
    }

    ;
    return Data_Maybe.Nothing.value;
  };
};

var slice = function slice(b) {
  return function (e) {
    return function (s) {
      var l = $foreign.length(s);

      var norm = function norm(x) {
        if (x < 0) {
          return l + x | 0;
        }

        ;

        if (Data_Boolean.otherwise) {
          return x;
        }

        ;
        throw new Error("Failed pattern match at Data.String.CodeUnits (line 312, column 5 - line 313, column 27): " + [x.constructor.name]);
      };

      var e$prime = norm(e);
      var b$prime = norm(b);
      var $19 = b$prime < 0 || b$prime >= l || e$prime < 0 || e$prime > l || b$prime > e$prime;

      if ($19) {
        return Data_Maybe.Nothing.value;
      }

      ;
      return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
    };
  };
};

var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var dropWhile = function dropWhile(p) {
  return function (s) {
    return $foreign.drop($foreign.countPrefix(p)(s))(s);
  };
};

var dropRight = function dropRight(i) {
  return function (s) {
    return $foreign.take($foreign.length(s) - i | 0)(s);
  };
};

var contains = function contains(pat) {
  var $20 = indexOf(pat);
  return function ($21) {
    return Data_Maybe.isJust($20($21));
  };
};

var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
  stripPrefix: stripPrefix,
  stripSuffix: stripSuffix,
  contains: contains,
  charAt: charAt,
  toChar: toChar,
  uncons: uncons,
  indexOf: indexOf,
  "indexOf'": indexOf$prime,
  lastIndexOf: lastIndexOf,
  "lastIndexOf'": lastIndexOf$prime,
  takeRight: takeRight,
  takeWhile: takeWhile,
  dropRight: dropRight,
  dropWhile: dropWhile,
  slice: slice,
  singleton: $foreign.singleton,
  fromCharArray: $foreign.fromCharArray,
  toCharArray: $foreign.toCharArray,
  length: $foreign.length,
  countPrefix: $foreign.countPrefix,
  take: $foreign.take,
  drop: $foreign.drop,
  splitAt: $foreign.splitAt
};
},{"./foreign.js":"../output/Data.String.CodeUnits/foreign.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.String.Unsafe/index.js":"../output/Data.String.Unsafe/index.js"}],"../output/Data.String.Common/foreign.js":[function(require,module,exports) {
"use strict";

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
    };
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};
},{}],"../output/Data.String.Common/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var $$null = function $$null(s) {
  return s === "";
};

var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
  "null": $$null,
  localeCompare: localeCompare,
  replace: $foreign.replace,
  replaceAll: $foreign.replaceAll,
  split: $foreign.split,
  toLower: $foreign.toLower,
  toUpper: $foreign.toUpper,
  trim: $foreign.trim,
  joinWith: $foreign.joinWith
};
},{"./foreign.js":"../output/Data.String.Common/foreign.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js"}],"../output/Data.String.CodePoints/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_Enum = require("../Data.Enum/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var CodePoint = function CodePoint(x) {
  return x;
};

var unsurrogate = function unsurrogate(lead) {
  return function (trail) {
    return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
  };
};

var showCodePoint = new Data_Show.Show(function (v) {
  return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});

var isTrail = function isTrail(cu) {
  return 56320 <= cu && cu <= 57343;
};

var isLead = function isLead(cu) {
  return 55296 <= cu && cu <= 56319;
};

var uncons = function uncons(s) {
  var v = Data_String_CodeUnits.length(s);

  if (v === 0) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v === 1) {
    return new Data_Maybe.Just({
      head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
      tail: ""
    });
  }

  ;
  var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
  var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
  var $21 = isLead(cu0) && isTrail(cu1);

  if ($21) {
    return new Data_Maybe.Just({
      head: unsurrogate(cu0)(cu1),
      tail: Data_String_CodeUnits.drop(2)(s)
    });
  }

  ;
  return new Data_Maybe.Just({
    head: cu0,
    tail: Data_String_CodeUnits.drop(1)(s)
  });
};

var unconsButWithTuple = function unconsButWithTuple(s) {
  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
    return new Data_Tuple.Tuple(v.head, v.tail);
  })(uncons(s));
};

var toCodePointArrayFallback = function toCodePointArrayFallback(s) {
  return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};

var unsafeCodePointAt0Fallback = function unsafeCodePointAt0Fallback(s) {
  var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
  var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;

  if ($25) {
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var $26 = isTrail(cu1);

    if ($26) {
      return unsurrogate(cu0)(cu1);
    }

    ;
    return cu0;
  }

  ;
  return cu0;
};

var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);

var length = function length($52) {
  return Data_Array.length(toCodePointArray($52));
};

var lastIndexOf = function lastIndexOf(p) {
  return function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
      return length(Data_String_CodeUnits.take(i)(s));
    })(Data_String_CodeUnits.lastIndexOf(p)(s));
  };
};

var indexOf = function indexOf(p) {
  return function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
      return length(Data_String_CodeUnits.take(i)(s));
    })(Data_String_CodeUnits.indexOf(p)(s));
  };
};

var fromCharCode = function () {
  var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
  return function ($54) {
    return Data_String_CodeUnits.singleton($53($54));
  };
}();

var singletonFallback = function singletonFallback(v) {
  if (v <= 65535) {
    return fromCharCode(v);
  }

  ;
  var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
  var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
  return fromCharCode(lead) + fromCharCode(trail);
};

var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);

var takeFallback = function takeFallback(n) {
  return function (v) {
    if (n < 1) {
      return "";
    }

    ;
    var v1 = uncons(v);

    if (v1 instanceof Data_Maybe.Just) {
      return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
    }

    ;
    return v;
  };
};

var take = $foreign["_take"](takeFallback);

var lastIndexOf$prime = function lastIndexOf$prime(p) {
  return function (i) {
    return function (s) {
      var i$prime = Data_String_CodeUnits.length(take(i)(s));
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
        return length(Data_String_CodeUnits.take(k)(s));
      })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
    };
  };
};

var splitAt = function splitAt(i) {
  return function (s) {
    var before = take(i)(s);
    return {
      before: before,
      after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
    };
  };
};

var eqCodePoint = new Data_Eq.Eq(function (x) {
  return function (y) {
    return x === y;
  };
});
var ordCodePoint = new Data_Ord.Ord(function () {
  return eqCodePoint;
}, function (x) {
  return function (y) {
    return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
  };
});

var drop = function drop(n) {
  return function (s) {
    return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
  };
};

var indexOf$prime = function indexOf$prime(p) {
  return function (i) {
    return function (s) {
      var s$prime = drop(i)(s);
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
        return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
      })(Data_String_CodeUnits.indexOf(p)(s$prime));
    };
  };
};

var countTail = function countTail($copy_p) {
  return function ($copy_s) {
    return function ($copy_accum) {
      var $tco_var_p = $copy_p;
      var $tco_var_s = $copy_s;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(p, s, accum) {
        var v = uncons(s);

        if (v instanceof Data_Maybe.Just) {
          var $39 = p(v.value0.head);

          if ($39) {
            $tco_var_p = p;
            $tco_var_s = v.value0.tail;
            $copy_accum = accum + 1 | 0;
            return;
          }

          ;
          $tco_done = true;
          return accum;
        }

        ;
        $tco_done = true;
        return accum;
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
      }

      ;
      return $tco_result;
    };
  };
};

var countFallback = function countFallback(p) {
  return function (s) {
    return countTail(p)(s)(0);
  };
};

var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);

var dropWhile = function dropWhile(p) {
  return function (s) {
    return drop(countPrefix(p)(s))(s);
  };
};

var takeWhile = function takeWhile(p) {
  return function (s) {
    return take(countPrefix(p)(s))(s);
  };
};

var codePointFromChar = function () {
  var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  return function ($56) {
    return CodePoint($55($56));
  };
}();

var codePointAtFallback = function codePointAtFallback($copy_n) {
  return function ($copy_s) {
    var $tco_var_n = $copy_n;
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(n, s) {
      var v = uncons(s);

      if (v instanceof Data_Maybe.Just) {
        var $44 = n === 0;

        if ($44) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0.head);
        }

        ;
        $tco_var_n = n - 1 | 0;
        $copy_s = v.value0.tail;
        return;
      }

      ;
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_n, $copy_s);
    }

    ;
    return $tco_result;
  };
};

var codePointAt = function codePointAt(v) {
  return function (v1) {
    if (v < 0) {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v === 0 && v1 === "") {
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v === 0) {
      return new Data_Maybe.Just(unsafeCodePointAt0(v1));
    }

    ;
    return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
  };
};

var boundedCodePoint = new Data_Bounded.Bounded(function () {
  return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
  return boundedCodePoint;
}, function () {
  return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
  return v;
}, function (n) {
  if (n >= 0 && n <= 1114111) {
    return new Data_Maybe.Just(n);
  }

  ;

  if (Data_Boolean.otherwise) {
    return Data_Maybe.Nothing.value;
  }

  ;
  throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [n.constructor.name]);
});
var enumCodePoint = new Data_Enum.Enum(function () {
  return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
  codePointFromChar: codePointFromChar,
  singleton: singleton,
  fromCodePointArray: fromCodePointArray,
  toCodePointArray: toCodePointArray,
  codePointAt: codePointAt,
  uncons: uncons,
  length: length,
  countPrefix: countPrefix,
  indexOf: indexOf,
  "indexOf'": indexOf$prime,
  lastIndexOf: lastIndexOf,
  "lastIndexOf'": lastIndexOf$prime,
  take: take,
  takeWhile: takeWhile,
  drop: drop,
  dropWhile: dropWhile,
  splitAt: splitAt,
  eqCodePoint: eqCodePoint,
  ordCodePoint: ordCodePoint,
  showCodePoint: showCodePoint,
  boundedCodePoint: boundedCodePoint,
  enumCodePoint: enumCodePoint,
  boundedEnumCodePoint: boundedEnumCodePoint
};
},{"./foreign.js":"../output/Data.String.CodePoints/foreign.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.Enum/index.js":"../output/Data.Enum/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Int/index.js":"../output/Data.Int/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.String.CodeUnits/index.js":"../output/Data.String.CodeUnits/index.js","../Data.String.Common/index.js":"../output/Data.String.Common/index.js","../Data.String.Unsafe/index.js":"../output/Data.String.Unsafe/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js"}],"../output/Data.String.Regex/foreign.js":[function(require,module,exports) {
"use strict";

exports.showRegexImpl = function (r) {
  return "" + r;
};

exports.regexImpl = function (left) {
  return function (right) {
    return function (s1) {
      return function (s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};

exports.source = function (r) {
  return r.source;
};

exports.flagsImpl = function (r) {
  return {
    multiline: r.multiline,
    ignoreCase: r.ignoreCase,
    global: r.global,
    sticky: !!r.sticky,
    unicode: !!r.unicode
  };
};

exports.test = function (r) {
  return function (s) {
    var lastIndex = r.lastIndex;
    var result = r.test(s);
    r.lastIndex = lastIndex;
    return result;
  };
};

exports._match = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var m = s.match(r);

        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i = 0; i < m.length; i++) {
            m[i] = m[i] == null ? nothing : just(m[i]);
          }

          return just(m);
        }
      };
    };
  };
};

exports.replace = function (r) {
  return function (s1) {
    return function (s2) {
      return s2.replace(r, s1);
    };
  };
};

exports.replaceBy = function (r) {
  return function (f) {
    return function (s2) {
      return s2.replace(r, function (match) {
        return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
      });
    };
  };
};

exports._search = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

exports.split = function (r) {
  return function (s) {
    return s.split(r);
  };
};
},{}],"../output/Data.String.Regex.Flags/index.js":[function(require,module,exports) {

// Generated by purs version 0.13.8
"use strict";

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_Common = require("../Data.String.Common/index.js");

var RegexFlags = function () {
  function RegexFlags(value0) {
    this.value0 = value0;
  }

  ;

  RegexFlags.create = function (value0) {
    return new RegexFlags(value0);
  };

  return RegexFlags;
}();

var unicode = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: true
});
var sticky = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: true,
  unicode: false
});
var showRegexFlags = new Data_Show.Show(function (v) {
  var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
  var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([]);

  if ($6) {
    return "noFlags";
  }

  ;
  return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
});
var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return new RegexFlags({
      global: v.value0.global || v1.value0.global,
      ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
      multiline: v.value0.multiline || v1.value0.multiline,
      sticky: v.value0.sticky || v1.value0.sticky,
      unicode: v.value0.unicode || v1.value0.unicode
    });
  };
});
var noFlags = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: false
});
var multiline = new RegexFlags({
  global: false,
  ignoreCase: false,
  multiline: true,
  sticky: false,
  unicode: false
});
var monoidRegexFlags = new Data_Monoid.Monoid(function () {
  return semigroupRegexFlags;
}, noFlags);
var ignoreCase = new RegexFlags({
  global: false,
  ignoreCase: true,
  multiline: false,
  sticky: false,
  unicode: false
});
var global = new RegexFlags({
  global: true,
  ignoreCase: false,
  multiline: false,
  sticky: false,
  unicode: false
});
var eqRegexFlags = new Data_Eq.Eq(function (v) {
  return function (v1) {
    return v.value0.global === v1.value0.global && v.value0.ignoreCase === v1.value0.ignoreCase && v.value0.multiline === v1.value0.multiline && v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode;
  };
});
module.exports = {
  RegexFlags: RegexFlags,
  noFlags: noFlags,
  global: global,
  ignoreCase: ignoreCase,
  multiline: multiline,
  sticky: sticky,
  unicode: unicode,
  semigroupRegexFlags: semigroupRegexFlags,
  monoidRegexFlags: monoidRegexFlags,
  eqRegexFlags: eqRegexFlags,
  showRegexFlags: showRegexFlags
};
},{"../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.String.Common/index.js":"../output/Data.String.Common/index.js"}],"../output/Data.String.Regex/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");

var showRegex = new Data_Show.Show($foreign.showRegexImpl);
var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var replace$prime = $foreign.replaceBy;

var renderFlags = function renderFlags(v) {
  return function () {
    if (v.value0.global) {
      return "g";
    }

    ;
    return "";
  }() + (function () {
    if (v.value0.ignoreCase) {
      return "i";
    }

    ;
    return "";
  }() + (function () {
    if (v.value0.multiline) {
      return "m";
    }

    ;
    return "";
  }() + (function () {
    if (v.value0.sticky) {
      return "y";
    }

    ;
    return "";
  }() + function () {
    if (v.value0.unicode) {
      return "u";
    }

    ;
    return "";
  }())));
};

var regex = function regex(s) {
  return function (f) {
    return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
  };
};

var parseFlags = function parseFlags(s) {
  return new Data_String_Regex_Flags.RegexFlags({
    global: Data_String_CodeUnits.contains("g")(s),
    ignoreCase: Data_String_CodeUnits.contains("i")(s),
    multiline: Data_String_CodeUnits.contains("m")(s),
    sticky: Data_String_CodeUnits.contains("y")(s),
    unicode: Data_String_CodeUnits.contains("u")(s)
  });
};

var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

var flags = function flags($8) {
  return Data_String_Regex_Flags.RegexFlags.create($foreign.flagsImpl($8));
};

module.exports = {
  regex: regex,
  flags: flags,
  renderFlags: renderFlags,
  parseFlags: parseFlags,
  match: match,
  "replace'": replace$prime,
  search: search,
  showRegex: showRegex,
  source: $foreign.source,
  test: $foreign.test,
  replace: $foreign.replace,
  split: $foreign.split
};
},{"./foreign.js":"../output/Data.String.Regex/foreign.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.String.CodeUnits/index.js":"../output/Data.String.CodeUnits/index.js","../Data.String.Regex.Flags/index.js":"../output/Data.String.Regex.Flags/index.js"}],"../output/Color/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");

var Data_String_Regex = require("../Data.String.Regex/index.js");

var $$Math = require("../Math/index.js");

var UnclippedHue = function UnclippedHue(x) {
  return x;
};

var RGB = function () {
  function RGB() {}

  ;
  RGB.value = new RGB();
  return RGB;
}();

var HSL = function () {
  function HSL() {}

  ;
  HSL.value = new HSL();
  return HSL;
}();

var LCh = function () {
  function LCh() {}

  ;
  LCh.value = new LCh();
  return LCh;
}();

var Lab = function () {
  function Lab() {}

  ;
  Lab.value = new Lab();
  return Lab;
}();

var HSLA = function () {
  function HSLA(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  ;

  HSLA.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return function (value3) {
          return new HSLA(value0, value1, value2, value3);
        };
      };
    };
  };

  return HSLA;
}();

var modPos = function modPos(x) {
  return function (y) {
    return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
  };
};

var rgba = function rgba(red$prime) {
  return function (green$prime) {
    return function (blue$prime) {
      return function (alpha) {
        var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
        var r = Data_Int.toNumber(red) / 255.0;
        var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
        var g = Data_Int.toNumber(green) / 255.0;
        var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
        var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
        var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
        var chroma = maxChroma - minChroma | 0;
        var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
        var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);

        var saturation = function () {
          if (chroma === 0) {
            return 0.0;
          }

          ;

          if (Data_Boolean.otherwise) {
            return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
          }

          ;
          throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + []);
        }();

        var b = Data_Int.toNumber(blue) / 255.0;

        var hue$prime = function hue$prime(v) {
          if (v === 0) {
            return 0.0;
          }

          ;

          if (maxChroma === red) {
            return modPos((g - b) / chroma$prime)(6.0);
          }

          ;

          if (maxChroma === green) {
            return (b - r) / chroma$prime + 2.0;
          }

          ;

          if (Data_Boolean.otherwise) {
            return (r - g) / chroma$prime + 4.0;
          }

          ;
          throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [v.constructor.name]);
        };

        var hue = 60.0 * hue$prime(chroma);
        return new HSLA(hue, saturation, lightness, alpha);
      };
    };
  };
};

var rgb = function rgb(r) {
  return function (g) {
    return function (b) {
      return rgba(r)(g)(b)(1.0);
    };
  };
};

var rgba$prime = function rgba$prime(r) {
  return function (g) {
    return function (b) {
      return function (a) {
        return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
      };
    };
  };
};

var rgb$prime = function rgb$prime(r) {
  return function (g) {
    return function (b) {
      return rgba$prime(r)(g)(b)(1.0);
    };
  };
};

var xyz = function xyz(x) {
  return function (y) {
    return function (z) {
      var f = function f(c) {
        if (c <= 3.1308e-3) {
          return 12.92 * c;
        }

        ;

        if (Data_Boolean.otherwise) {
          return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.5e-2;
        }

        ;
        throw new Error("Failed pattern match at Color (line 224, column 5 - line 225, column 65): " + [c.constructor.name]);
      };

      var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
      var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
      var b = f(5.57e-2 * x - 0.204 * y + 1.057 * z);
      return rgb$prime(r)(g)(b);
    };
  };
};

var interpolate = function interpolate(fraction) {
  return function (a) {
    return function (b) {
      return a + fraction * (b - a);
    };
  };
};

var interpolateAngle = function interpolateAngle(fraction) {
  return function (a) {
    return function (b) {
      var paths = [{
        from: a,
        to: b
      }, {
        from: a,
        to: b + 360.0
      }, {
        from: a + 360.0,
        to: b
      }];

      var dist = function dist(v) {
        return $$Math.abs(v.to - v.from);
      };

      var shortest = Data_Maybe.fromJust()(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(dist))(paths));
      return interpolate(fraction)(shortest.from)(shortest.to);
    };
  };
};

var mixCubehelix = function mixCubehelix(gamma) {
  return function (v) {
    return function (v1) {
      var radians = $$Math.pi / 180.0;
      var bs = v1.value1 - v.value1;
      var bl = v1.value2 - v.value2;
      var ah = (v.value0 + 120.0) * radians;
      var bh = (v1.value0 + 120.0) * radians - ah;
      return function (t) {
        var fract = $$Math.pow(v.value2 + bl * t)(gamma);
        var angle = ah + bh * t;
        var amp = (v.value1 + bs * t) * fract * (1.0 - fract);
        var b = fract + amp * (1.97294 * $$Math.cos(angle));
        var g = fract + amp * (-0.29227 * $$Math.cos(angle) - 0.90649 * $$Math.sin(angle));
        var r = fract + amp * (-0.14861 * $$Math.cos(angle) + 1.78277 * $$Math.sin(angle));
        var a = interpolate(t)(v.value3)(v1.value3);
        return rgba$prime(r)(g)(b)(a);
      };
    };
  };
};

var hsla = function hsla(h) {
  return function (s) {
    return function (l) {
      return function (a) {
        var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
        var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
        var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
        return new HSLA(h, s$prime, l$prime, a$prime);
      };
    };
  };
};

var hsva = function hsva(h) {
  return function (v) {
    return function (v1) {
      return function (a) {
        var s = v;

        if (v1 === 0.0) {
          return hsla(h)(s / (2.0 - s))(0.0)(a);
        }

        ;

        if (v === 0.0 && v1 === 1.0) {
          return hsla(h)(0.0)(1.0)(a);
        }

        ;
        var tmp = (2.0 - v) * v1;

        var s = v * v1 / function () {
          var $36 = tmp < 1.0;

          if ($36) {
            return tmp;
          }

          ;
          return 2.0 - tmp;
        }();

        var l = tmp / 2.0;
        return hsla(h)(s)(l)(a);
      };
    };
  };
};

var hsv = function hsv(h) {
  return function (s) {
    return function (v) {
      return hsva(h)(s)(v)(1.0);
    };
  };
};

var lighten = function lighten(f) {
  return function (v) {
    return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
  };
};

var rotateHue = function rotateHue(angle) {
  return function (v) {
    return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
  };
};

var saturate = function saturate(f) {
  return function (v) {
    return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
  };
};

var hsl = function hsl(h) {
  return function (s) {
    return function (l) {
      return hsla(h)(s)(l)(1.0);
    };
  };
};

var white = hsl(0.0)(0.0)(1.0);

var graytone = function graytone(l) {
  return hsl(0.0)(0.0)(l);
};

var fromInt = function fromInt(m) {
  var n = Data_Ord.clamp(Data_Ord.ordInt)(0)(16777215)(m);
  var r = n >> 16 & 255;
  var g = n >> 8 & 255;
  var b = n & 255;
  return rgb(r)(g)(b);
};

var fromHexString = function fromHexString(str) {
  var parseHex = function () {
    var $101 = Data_Maybe.fromMaybe(0);
    var $102 = Data_Int.fromStringAs(Data_Int.hexadecimal);
    return function ($103) {
      return $101($102($103));
    };
  }();

  var isShort = Data_String_CodePoints.length(str) === 4;
  var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
  var single = "(" + ("[0-9a-f]" + ")");

  var variant = function () {
    if (isShort) {
      return single + (single + single);
    }

    ;
    return pair + (pair + pair);
  }();

  var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
  return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (pattern) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(pattern)(str))(function (groups) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(groups)(1))))(function (r) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(groups)(2))))(function (g) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(groups)(3))))(function (b) {
            if (isShort) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * r | 0) + r | 0)((16 * g | 0) + g | 0)((16 * b | 0) + b | 0));
            }

            ;
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(r)(g)(b));
          });
        });
      });
    });
  });
};

var desaturate = function desaturate(f) {
  return saturate(-f);
};

var darken = function darken(f) {
  return lighten(-f);
};

var d65 = {
  xn: 0.95047,
  yn: 1.0,
  zn: 1.08883
};

var lab = function lab(l) {
  return function (a) {
    return function (b) {
      var l$prime = (l + 16.0) / 116.0;
      var delta = 6.0 / 29.0;

      var finv = function finv(t) {
        if (t > delta) {
          return $$Math.pow(t)(3.0);
        }

        ;

        if (Data_Boolean.otherwise) {
          return 3.0 * delta * delta * (t - 4.0 / 29.0);
        }

        ;
        throw new Error("Failed pattern match at Color (line 249, column 5 - line 250, column 64): " + [t.constructor.name]);
      };

      var x = d65.xn * finv(l$prime + a / 500.0);
      var y = d65.yn * finv(l$prime);
      var z = d65.zn * finv(l$prime - b / 200.0);
      return xyz(x)(y)(z);
    };
  };
};

var lch = function lch(l) {
  return function (c) {
    return function (h) {
      var deg2rad = $$Math.pi / 180.0;
      var b = c * $$Math.sin(h * deg2rad);
      var a = c * $$Math.cos(h * deg2rad);
      return lab(l)(a)(b);
    };
  };
};

var cssStringHSLA = function cssStringHSLA(v) {
  var toString = function toString(n) {
    return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
  };

  var saturation = toString(v.value1 * 100.0) + "%";
  var lightness = toString(v.value2 * 100.0) + "%";
  var hue = toString(v.value0);
  var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
  var $59 = v.value3 === 1.0;

  if ($59) {
    return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
  }

  ;
  return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
};

var complementary = rotateHue(180.0);

var clipHue = function clipHue(v) {
  var $65 = 360.0 === v;

  if ($65) {
    return v;
  }

  ;
  return modPos(v)(360.0);
};

var toHSLA = function toHSLA(v) {
  return {
    h: clipHue(v.value0),
    s: v.value1,
    l: v.value2,
    a: v.value3
  };
};

var toHSVA = function toHSVA(v) {
  var s = v.value1;

  if (v.value2 === 0.0) {
    return {
      h: clipHue(v.value0),
      s: 2.0 * s / (1.0 + s),
      v: 0.0,
      a: v.value3
    };
  }

  ;

  if (v.value1 === 0.0 && v.value2 === 1.0) {
    return {
      h: clipHue(v.value0),
      s: 0.0,
      v: 1.0,
      a: v.value3
    };
  }

  ;

  var tmp = v.value1 * function () {
    var $80 = v.value2 < 0.5;

    if ($80) {
      return v.value2;
    }

    ;
    return 1.0 - v.value2;
  }();

  var v1 = v.value2 + tmp;
  var s = 2.0 * tmp / (v.value2 + tmp);
  return {
    h: clipHue(v.value0),
    s: s,
    v: v1,
    a: v.value3
  };
};

var toRGBA$prime = function toRGBA$prime(v) {
  var h$prime = clipHue(v.value0) / 60.0;
  var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
  var m = v.value2 - chr / 2.0;
  var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));

  var col = function () {
    if (h$prime < 1.0) {
      return {
        r: chr,
        g: x,
        b: 0.0
      };
    }

    ;

    if (1.0 <= h$prime && h$prime < 2.0) {
      return {
        r: x,
        g: chr,
        b: 0.0
      };
    }

    ;

    if (2.0 <= h$prime && h$prime < 3.0) {
      return {
        r: 0.0,
        g: chr,
        b: x
      };
    }

    ;

    if (3.0 <= h$prime && h$prime < 4.0) {
      return {
        r: 0.0,
        g: x,
        b: chr
      };
    }

    ;

    if (4.0 <= h$prime && h$prime < 5.0) {
      return {
        r: x,
        g: 0.0,
        b: chr
      };
    }

    ;

    if (Data_Boolean.otherwise) {
      return {
        r: chr,
        g: 0.0,
        b: x
      };
    }

    ;
    throw new Error("Failed pattern match at Color (line 342, column 5 - line 347, column 61): " + []);
  }();

  return {
    r: col.r + m,
    g: col.g + m,
    b: col.b + m,
    a: v.value3
  };
};

var luminance = function luminance(col) {
  var val = toRGBA$prime(col);

  var f = function f(c) {
    if (c <= 3.928e-2) {
      return c / 12.92;
    }

    ;

    if (Data_Boolean.otherwise) {
      return $$Math.pow((c + 5.5e-2) / 1.055)(2.4);
    }

    ;
    throw new Error("Failed pattern match at Color (line 604, column 9 - line 605, column 61): " + [c.constructor.name]);
  };

  var g = f(val.g);
  var r = f(val.r);
  var b = f(val.b);
  return 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
};

var contrast = function contrast(c1) {
  return function (c2) {
    var l2 = luminance(c2);
    var l1 = luminance(c1);
    var $91 = l1 > l2;

    if ($91) {
      return (l1 + 5.0e-2) / (l2 + 5.0e-2);
    }

    ;
    return (l2 + 5.0e-2) / (l1 + 5.0e-2);
  };
};

var isReadable = function isReadable(c1) {
  return function (c2) {
    return contrast(c1)(c2) > 4.5;
  };
};

var toRGBA = function toRGBA(col) {
  var c = toRGBA$prime(col);
  var g = Data_Int.round(255.0 * c.g);
  var r = Data_Int.round(255.0 * c.r);
  var b = Data_Int.round(255.0 * c.b);
  return {
    r: r,
    g: g,
    b: b,
    a: c.a
  };
};

var cssStringRGBA = function cssStringRGBA(col) {
  var c = toRGBA(col);
  var green = Data_Show.show(Data_Show.showInt)(c.g);
  var red = Data_Show.show(Data_Show.showInt)(c.r);
  var blue = Data_Show.show(Data_Show.showInt)(c.b);
  var alpha = Data_Show.show(Data_Show.showNumber)(c.a);
  var $92 = c.a === 1.0;

  if ($92) {
    return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
  }

  ;
  return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
};

var eqColor = new Data_Eq.Eq(function (c1) {
  return function (c2) {
    var rgb2 = toRGBA(c2);
    var rgb1 = toRGBA(c1);
    return rgb1.r === rgb2.r && rgb1.g === rgb2.g && rgb1.b === rgb2.b && rgb1.a === rgb2.a;
  };
});
var showColor = new Data_Show.Show(function (c) {
  var col = toRGBA(c);
  return "rgba " + (Data_Show.show(Data_Show.showInt)(col.r) + (" " + (Data_Show.show(Data_Show.showInt)(col.g) + (" " + (Data_Show.show(Data_Show.showInt)(col.b) + (" " + Data_Show.show(Data_Show.showNumber)(col.a)))))));
});

var toHexString = function toHexString(color) {
  var toHex = function toHex(num) {
    var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
    var $93 = Data_String_CodePoints.length(repr) === 1;

    if ($93) {
      return "0" + repr;
    }

    ;
    return repr;
  };

  var c = toRGBA(color);
  return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
};

var toXYZ = function toXYZ(c) {
  var rec = toRGBA$prime(c);

  var finv = function finv(c$prime) {
    if (c$prime <= 4.045e-2) {
      return c$prime / 12.92;
    }

    ;

    if (Data_Boolean.otherwise) {
      return $$Math.pow((c$prime + 5.5e-2) / 1.055)(2.4);
    }

    ;
    throw new Error("Failed pattern match at Color (line 366, column 5 - line 367, column 63): " + [c$prime.constructor.name]);
  };

  var g = finv(rec.g);
  var r = finv(rec.r);
  var b = finv(rec.b);
  var x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
  var y = 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
  var z = 1.93e-2 * r + 0.1192 * g + 0.9505 * b;
  return {
    x: x,
    y: y,
    z: z
  };
};

var toLab = function toLab(col) {
  var rec = toXYZ(col);
  var cut = $$Math.pow(6.0 / 29.0)(3.0);

  var f = function f(t) {
    if (t > cut) {
      return $$Math.pow(t)(1.0 / 3.0);
    }

    ;

    if (Data_Boolean.otherwise) {
      return 1.0 / 3.0 * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
    }

    ;
    throw new Error("Failed pattern match at Color (line 384, column 5 - line 385, column 76): " + [t.constructor.name]);
  };

  var fy = f(rec.y / d65.yn);
  var l = 116.0 * fy - 16.0;
  var b = 200.0 * (fy - f(rec.z / d65.zn));
  var a = 500.0 * (f(rec.x / d65.xn) - fy);
  return {
    l: l,
    a: a,
    b: b
  };
};

var distance = function distance(col1) {
  return function (col2) {
    var sq = function sq(x) {
      return $$Math.pow(x)(2.0);
    };

    var c2 = toLab(col2);
    var c1 = toLab(col1);
    return $$Math.sqrt(sq(c1.l - c2.l) + sq(c1.a - c2.a) + sq(c1.b - c2.b));
  };
};

var toLCh = function toLCh(col) {
  var rec = toLab(col);
  var rad2deg = 180.0 / $$Math.pi;
  var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
  var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
  return {
    l: rec.l,
    c: c,
    h: h
  };
};

var mix = function mix(v) {
  return function (c1) {
    return function (c2) {
      return function (frac) {
        if (v instanceof HSL) {
          var t = toHSLA(c2);
          var f = toHSLA(c1);
          return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
        }

        ;

        if (v instanceof RGB) {
          var t = toRGBA$prime(c2);
          var f = toRGBA$prime(c1);
          return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
        }

        ;

        if (v instanceof LCh) {
          var t = toLCh(c2);
          var f = toLCh(c1);
          return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
        }

        ;

        if (v instanceof Lab) {
          var t = toLab(c2);
          var f = toLab(c1);
          return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
        }

        ;
        throw new Error("Failed pattern match at Color (line 520, column 1 - line 520, column 34): " + [v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name]);
      };
    };
  };
};

var toGray = function toGray(col) {
  var res = toLCh(col);
  return desaturate(1.0)(lch(res.l)(0.0)(0.0));
};

var brightness = function brightness(col) {
  var c = toRGBA$prime(col);
  return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
};

var isLight = function isLight(c) {
  return brightness(c) > 0.5;
};

var black = hsl(0.0)(0.0)(0.0);

var textColor = function textColor(c) {
  if (isLight(c)) {
    return black;
  }

  ;

  if (Data_Boolean.otherwise) {
    return white;
  }

  ;
  throw new Error("Failed pattern match at Color (line 643, column 1 - line 643, column 28): " + [c.constructor.name]);
};

module.exports = {
  RGB: RGB,
  HSL: HSL,
  LCh: LCh,
  Lab: Lab,
  rgba: rgba,
  rgb: rgb,
  "rgba'": rgba$prime,
  "rgb'": rgb$prime,
  hsla: hsla,
  hsl: hsl,
  hsva: hsva,
  hsv: hsv,
  xyz: xyz,
  lab: lab,
  lch: lch,
  fromHexString: fromHexString,
  fromInt: fromInt,
  toHSLA: toHSLA,
  toHSVA: toHSVA,
  toRGBA: toRGBA,
  "toRGBA'": toRGBA$prime,
  toXYZ: toXYZ,
  toLab: toLab,
  toLCh: toLCh,
  toHexString: toHexString,
  cssStringHSLA: cssStringHSLA,
  cssStringRGBA: cssStringRGBA,
  black: black,
  white: white,
  graytone: graytone,
  rotateHue: rotateHue,
  complementary: complementary,
  lighten: lighten,
  darken: darken,
  saturate: saturate,
  desaturate: desaturate,
  toGray: toGray,
  mix: mix,
  mixCubehelix: mixCubehelix,
  brightness: brightness,
  luminance: luminance,
  contrast: contrast,
  isLight: isLight,
  isReadable: isReadable,
  textColor: textColor,
  distance: distance,
  showColor: showColor,
  eqColor: eqColor
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Data.Array.NonEmpty/index.js":"../output/Data.Array.NonEmpty/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Int/index.js":"../output/Data.Int/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.String.CodePoints/index.js":"../output/Data.String.CodePoints/index.js","../Data.String.Regex/index.js":"../output/Data.String.Regex/index.js","../Math/index.js":"../output/Math/index.js"}],"../output/Data.Vector.Polymorphic.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Distributive = require("../Data.Distributive/index.js");

var Data_DivisionRing = require("../Data.DivisionRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");

var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Vector2 = function () {
  function Vector2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Vector2.create = function (value0) {
    return function (value1) {
      return new Vector2(value0, value1);
    };
  };

  return Vector2;
}();

var Rect = function () {
  function Rect(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Rect.create = function (value0) {
    return function (value1) {
      return new Rect(value0, value1);
    };
  };

  return Rect;
}();

var showVector2 = function showVector2(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(" + (Data_Show.show(dictShow)(v.value0) + (" >< " + (Data_Show.show(dictShow)(v.value1) + ")")));
  });
};

var showRect = function showRect(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(Rect " + (Data_Show.show(showVector2(dictShow))(v.value0) + (" " + (Data_Show.show(showVector2(dictShow))(v.value1) + ")")));
  });
};

var semigroupVector2 = function semigroupVector2(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return new Vector2(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup)(v.value1)(v1.value1));
    };
  });
};

var semigroupRect = function semigroupRect(dictSemigroup) {
  return new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
      return new Rect(Data_Semigroup.append(semigroupVector2(dictSemigroup))(v.value0)(v1.value0), Data_Semigroup.append(semigroupVector2(dictSemigroup))(v.value1)(v1.value1));
    };
  });
};

var monoidVector2 = function monoidVector2(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupVector2(dictMonoid.Semigroup0());
  }, new Vector2(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid)));
};

var monoidRect = function monoidRect(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupRect(dictMonoid.Semigroup0());
  }, new Rect(Data_Monoid.mempty(monoidVector2(dictMonoid)), Data_Monoid.mempty(monoidVector2(dictMonoid))));
};

var makeRect = function makeRect(x) {
  return function (y) {
    return function (w) {
      return function (h) {
        return new Rect(new Vector2(x, y), new Vector2(w, h));
      };
    };
  };
};

var getY = function getY(v) {
  return v.value1;
};

var getX = function getX(v) {
  return v.value0;
};

var getSize = function getSize(v) {
  return v.value1;
};

var getPos = function getPos(v) {
  return v.value0;
};

var functorVector2 = new Data_Functor.Functor(function (f) {
  return function (v) {
    return new Vector2(f(v.value0), f(v.value1));
  };
});
var functorRect = new Data_Functor.Functor(function (f) {
  return function (v) {
    return new Rect(Data_Functor.map(functorVector2)(f)(v.value0), Data_Functor.map(functorVector2)(f)(v.value1));
  };
});
var foldableVector2 = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Semigroup_Foldable.foldMap1(foldable1Vector2)(dictMonoid.Semigroup0());
}, function (f) {
  return function (z) {
    return function (v) {
      return f(f(z)(v.value0))(v.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v.value0)(f(v.value1)(z));
    };
  };
});
var foldable1Vector2 = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableVector2;
}, function (dictSemigroup) {
  return function (v) {
    return Data_Semigroup.append(dictSemigroup)(v.value0)(v.value1);
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return Data_Semigroup.append(dictSemigroup)(f(v.value0))(f(v.value1));
    };
  };
});
var traversableVector2 = new Data_Traversable.Traversable(function () {
  return foldableVector2;
}, function () {
  return functorVector2;
}, function (dictApplicative) {
  return Data_Semigroup_Traversable.sequence1(traversable1Vector2)(dictApplicative.Apply0());
}, function (dictApplicative) {
  return Data_Semigroup_Traversable.traverse1(traversable1Vector2)(dictApplicative.Apply0());
});
var traversable1Vector2 = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Vector2;
}, function () {
  return traversableVector2;
}, function (dictApply) {
  return function (v) {
    return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Vector2.create)(v.value0))(v.value1);
  };
}, function (dictApply) {
  return Data_Semigroup_Traversable.traverse1Default(traversable1Vector2)(dictApply);
});
var foldableRect = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Semigroup_Foldable.foldMap1(foldable1Rect)(dictMonoid.Semigroup0());
}, function (f) {
  return function (z) {
    return function (v) {
      return f(f(f(f(z)(v.value0.value0))(v.value0.value1))(v.value1.value0))(v.value1.value1);
    };
  };
}, function (f) {
  return function (z) {
    return function (v) {
      return f(v.value0.value0)(f(v.value0.value1)(f(v.value1.value0)(f(v.value1.value1)(z))));
    };
  };
});
var foldable1Rect = new Data_Semigroup_Foldable.Foldable1(function () {
  return foldableRect;
}, function (dictSemigroup) {
  return function (v) {
    return Data_Semigroup.append(dictSemigroup)(v.value0.value0)(Data_Semigroup.append(dictSemigroup)(v.value0.value1)(Data_Semigroup.append(dictSemigroup)(v.value1.value0)(v.value1.value1)));
  };
}, function (dictSemigroup) {
  return function (f) {
    return function (v) {
      return Data_Semigroup.append(dictSemigroup)(f(v.value0.value0))(Data_Semigroup.append(dictSemigroup)(f(v.value0.value1))(Data_Semigroup.append(dictSemigroup)(f(v.value1.value0))(f(v.value1.value1))));
    };
  };
});
var traversableRect = new Data_Traversable.Traversable(function () {
  return foldableRect;
}, function () {
  return functorRect;
}, function (dictApplicative) {
  return Data_Semigroup_Traversable.sequence1(traversable1Rect)(dictApplicative.Apply0());
}, function (dictApplicative) {
  return Data_Semigroup_Traversable.traverse1(traversable1Rect)(dictApplicative.Apply0());
});
var traversable1Rect = new Data_Semigroup_Traversable.Traversable1(function () {
  return foldable1Rect;
}, function () {
  return traversableRect;
}, function (dictApply) {
  return function (v) {
    return Control_Apply.apply(dictApply)(Control_Apply.apply(dictApply)(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(makeRect)(v.value0.value0))(v.value0.value1))(v.value1.value0))(v.value1.value1);
  };
}, function (dictApply) {
  return Data_Semigroup_Traversable.traverse1Default(traversable1Rect)(dictApply);
});

var eqVector2 = function eqVector2(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
    };
  });
};

var ordVector2 = function ordVector2(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqVector2(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
    };
  });
};

var eqRect = function eqRect(dictEq) {
  return new Data_Eq.Eq(function (x) {
    return function (y) {
      return Data_Eq.eq(eqVector2(dictEq))(x.value0)(y.value0) && Data_Eq.eq(eqVector2(dictEq))(x.value1)(y.value1);
    };
  });
};

var ordRect = function ordRect(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqRect(dictOrd.Eq0());
  }, function (x) {
    return function (y) {
      var v = Data_Ord.compare(ordVector2(dictOrd))(x.value0)(y.value0);

      if (v instanceof Data_Ordering.LT) {
        return Data_Ordering.LT.value;
      }

      ;

      if (v instanceof Data_Ordering.GT) {
        return Data_Ordering.GT.value;
      }

      ;
      return Data_Ord.compare(ordVector2(dictOrd))(x.value1)(y.value1);
    };
  });
};

var distributiveVector2 = new Data_Distributive.Distributive(function () {
  return functorVector2;
}, function (dictFunctor) {
  return Data_Distributive.collectDefault(distributiveVector2)(dictFunctor);
}, function (dictFunctor) {
  return function (fvec) {
    return new Vector2(Data_Functor.map(dictFunctor)(getX)(fvec), Data_Functor.map(dictFunctor)(getY)(fvec));
  };
});
var distributiveRect = new Data_Distributive.Distributive(function () {
  return functorRect;
}, function (dictFunctor) {
  return Data_Distributive.collectDefault(distributiveRect)(dictFunctor);
}, function (dictFunctor) {
  return function (fRect) {
    return makeRect(Data_Functor.map(dictFunctor)(function ($225) {
      return getX(getPos($225));
    })(fRect))(Data_Functor.map(dictFunctor)(function ($226) {
      return getY(getPos($226));
    })(fRect))(Data_Functor.map(dictFunctor)(function ($227) {
      return getX(getSize($227));
    })(fRect))(Data_Functor.map(dictFunctor)(function ($228) {
      return getY(getSize($228));
    })(fRect));
  };
});
var applyVector2 = new Control_Apply.Apply(function () {
  return functorVector2;
}, function (v) {
  return function (v1) {
    return new Vector2(v.value0(v1.value0), v.value1(v1.value1));
  };
});
var bindVector2 = new Control_Bind.Bind(function () {
  return applyVector2;
}, function (vec) {
  return function (f) {
    return Control_Apply.apply(applyVector2)(Data_Distributive.distribute(distributiveVector2)(Data_Functor.functorFn)(f))(vec);
  };
});
var applyRect = new Control_Apply.Apply(function () {
  return functorRect;
}, function (v) {
  return function (v1) {
    return new Rect(Control_Apply.apply(applyVector2)(v.value0)(v1.value0), Control_Apply.apply(applyVector2)(v.value1)(v1.value1));
  };
});
var bindRect = new Control_Bind.Bind(function () {
  return applyRect;
}, function (rect) {
  return function (f) {
    return Control_Apply.apply(applyRect)(Data_Distributive.distribute(distributiveRect)(Data_Functor.functorFn)(f))(rect);
  };
});
var applicativeVector2 = new Control_Applicative.Applicative(function () {
  return applyVector2;
}, function (x) {
  return new Vector2(x, x);
});
var monadVector2 = new Control_Monad.Monad(function () {
  return applicativeVector2;
}, function () {
  return bindVector2;
});

var semiringVector2 = function semiringVector2(dictSemiring) {
  return new Data_Semiring.Semiring(Control_Apply.lift2(applyVector2)(Data_Semiring.add(dictSemiring)), Control_Apply.lift2(applyVector2)(Data_Semiring.mul(dictSemiring)), Control_Applicative.pure(applicativeVector2)(Data_Semiring.one(dictSemiring)), Control_Applicative.pure(applicativeVector2)(Data_Semiring.zero(dictSemiring)));
};

var ringVector2 = function ringVector2(dictRing) {
  return new Data_Ring.Ring(function () {
    return semiringVector2(dictRing.Semiring0());
  }, Control_Apply.lift2(applyVector2)(Data_Ring.sub(dictRing)));
};

var commutativeRingVector2 = function commutativeRingVector2(dictCommutativeRing) {
  return new Data_CommutativeRing.CommutativeRing(function () {
    return ringVector2(dictCommutativeRing.Ring0());
  });
};

var euclideanRingVector2 = function euclideanRingVector2(dictEuclideanRing) {
  return new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingVector2(dictEuclideanRing.CommutativeRing0());
  }, function (v) {
    return 1;
  }, Control_Apply.lift2(applyVector2)(Data_EuclideanRing.div(dictEuclideanRing)), Control_Apply.lift2(applyVector2)(Data_EuclideanRing.mod(dictEuclideanRing)));
};

var divisionRingVector2 = function divisionRingVector2(dictDivisionRing) {
  return new Data_DivisionRing.DivisionRing(function () {
    return ringVector2(dictDivisionRing.Ring0());
  }, Data_Functor.map(functorVector2)(Data_DivisionRing.recip(dictDivisionRing)));
};

var applicativeRect = new Control_Applicative.Applicative(function () {
  return applyRect;
}, function (x) {
  return new Rect(Control_Applicative.pure(applicativeVector2)(x), Control_Applicative.pure(applicativeVector2)(x));
});
var monadRect = new Control_Monad.Monad(function () {
  return applicativeRect;
}, function () {
  return bindRect;
});

var semiringRect = function semiringRect(dictSemiring) {
  return new Data_Semiring.Semiring(Control_Apply.lift2(applyRect)(Data_Semiring.add(dictSemiring)), Control_Apply.lift2(applyRect)(Data_Semiring.mul(dictSemiring)), Control_Applicative.pure(applicativeRect)(Data_Semiring.one(dictSemiring)), Control_Applicative.pure(applicativeRect)(Data_Semiring.zero(dictSemiring)));
};

module.exports = {
  Vector2: Vector2,
  getX: getX,
  getY: getY,
  Rect: Rect,
  getPos: getPos,
  getSize: getSize,
  makeRect: makeRect,
  eqVector2: eqVector2,
  ordVector2: ordVector2,
  showVector2: showVector2,
  functorVector2: functorVector2,
  applyVector2: applyVector2,
  applicativeVector2: applicativeVector2,
  bindVector2: bindVector2,
  monadVector2: monadVector2,
  semigroupVector2: semigroupVector2,
  monoidVector2: monoidVector2,
  semiringVector2: semiringVector2,
  ringVector2: ringVector2,
  divisionRingVector2: divisionRingVector2,
  commutativeRingVector2: commutativeRingVector2,
  euclideanRingVector2: euclideanRingVector2,
  foldable1Vector2: foldable1Vector2,
  foldableVector2: foldableVector2,
  traversable1Vector2: traversable1Vector2,
  traversableVector2: traversableVector2,
  distributiveVector2: distributiveVector2,
  eqRect: eqRect,
  ordRect: ordRect,
  showRect: showRect,
  functorRect: functorRect,
  applyRect: applyRect,
  applicativeRect: applicativeRect,
  bindRect: bindRect,
  monadRect: monadRect,
  semigroupRect: semigroupRect,
  monoidRect: monoidRect,
  semiringRect: semiringRect,
  foldable1Rect: foldable1Rect,
  foldableRect: foldableRect,
  traversable1Rect: traversable1Rect,
  traversableRect: traversableRect,
  distributiveRect: distributiveRect
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.Distributive/index.js":"../output/Data.Distributive/index.js","../Data.DivisionRing/index.js":"../output/Data.DivisionRing/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semigroup.Foldable/index.js":"../output/Data.Semigroup.Foldable/index.js","../Data.Semigroup.Traversable/index.js":"../output/Data.Semigroup.Traversable/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js"}],"../output/Data.Vector.Polymorphic.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Vector_Polymorphic_Types = require("../Data.Vector.Polymorphic.Types/index.js");

var ToSize = function ToSize(toSize) {
  this.toSize = toSize;
};

var ToRegion = function ToRegion(toRegion) {
  this.toRegion = toRegion;
};

var ToPos = function ToPos(toPos) {
  this.toPos = toPos;
};

var FromSize = function FromSize(fromSize) {
  this.fromSize = fromSize;
};

var FromRegion = function FromRegion(fromRegion) {
  this.fromRegion = fromRegion;
};

var FromPos = function FromPos(fromPos) {
  this.fromPos = fromPos;
};

var AsSizeEndo = function AsSizeEndo(asSizeEndo) {
  this.asSizeEndo = asSizeEndo;
};

var AsSize = function AsSize(asSize) {
  this.asSize = asSize;
};

var AsRegionEndo = function AsRegionEndo(asRegionEndo) {
  this.asRegionEndo = asRegionEndo;
};

var AsRegion = function AsRegion(asRegion) {
  this.asRegion = asRegion;
};

var AsPosEndo = function AsPosEndo(asPosEndo) {
  this.asPosEndo = asPosEndo;
};

var AsPos = function AsPos(asPos) {
  this.asPos = asPos;
};

var toSizeVector2 = new ToSize(Control_Category.identity(Control_Category.categoryFn));
var toSizeRect = new ToSize(function (v) {
  return v.value1;
});

var toSize = function toSize(dict) {
  return dict.toSize;
};

var toRegionVector2 = function toRegionVector2(dictSemiring) {
  return new ToRegion(function (size) {
    return new Data_Vector_Polymorphic_Types.Rect(Data_Semiring.zero(Data_Vector_Polymorphic_Types.semiringVector2(dictSemiring)), size);
  });
};

var toRegionRect = new ToRegion(Control_Category.identity(Control_Category.categoryFn));

var toRegion = function toRegion(dict) {
  return dict.toRegion;
};

var toPosVector2 = new ToPos(Control_Category.identity(Control_Category.categoryFn));
var toPosRect = new ToPos(function (v) {
  return v.value0;
});

var toPos = function toPos(dict) {
  return dict.toPos;
};

var fromSizeVector2 = new FromSize(Control_Category.identity(Control_Category.categoryFn));

var fromSizeRect = function fromSizeRect(dictSemiring) {
  return new FromSize(function (size) {
    return new Data_Vector_Polymorphic_Types.Rect(Data_Semiring.zero(Data_Vector_Polymorphic_Types.semiringVector2(dictSemiring)), size);
  });
};

var fromSize = function fromSize(dict) {
  return dict.fromSize;
};

var fromRegionVector2 = new FromRegion(function (v) {
  return v.value1;
});
var fromRegionRect = new FromRegion(Control_Category.identity(Control_Category.categoryFn));

var fromRegion = function fromRegion(dict) {
  return dict.fromRegion;
};

var fromPosVector2 = new FromPos(Control_Category.identity(Control_Category.categoryFn));

var fromPosRect = function fromPosRect(dictSemiring) {
  return new FromPos(function (pos) {
    return new Data_Vector_Polymorphic_Types.Rect(pos, Data_Semiring.zero(Data_Vector_Polymorphic_Types.semiringVector2(dictSemiring)));
  });
};

var fromPos = function fromPos(dict) {
  return dict.fromPos;
};

var asSizeVector2 = new AsSize(Control_Category.identity(Control_Category.categoryFn));
var asSizeEndoVector2 = new AsSizeEndo(Control_Category.identity(Control_Category.categoryFn));
var asSizeEndoRect = new AsSizeEndo(function (f) {
  return function (v) {
    return new Data_Vector_Polymorphic_Types.Rect(v.value0, f(v.value1));
  };
});

var asSizeEndo = function asSizeEndo(dict) {
  return dict.asSizeEndo;
};

var asSize = function asSize(dict) {
  return dict.asSize;
};

var asRegionVector2 = function asRegionVector2(dictSemiring) {
  return new AsRegion(function (f) {
    var $27 = fromRegion(fromRegionVector2);
    var $28 = toRegion(toRegionVector2(dictSemiring));
    return function ($29) {
      return $27(f($28($29)));
    };
  });
};

var asRegionRect = new AsRegion(Control_Category.identity(Control_Category.categoryFn));

var asRegionEndoVector2 = function asRegionEndoVector2(dictSemiring) {
  return new AsRegionEndo(function (f) {
    var $30 = fromRegion(fromRegionVector2);
    var $31 = toRegion(toRegionVector2(dictSemiring));
    return function ($32) {
      return $30(f($31($32)));
    };
  });
};

var asRegionEndoRect = new AsRegionEndo(Control_Category.identity(Control_Category.categoryFn));

var asRegionEndo = function asRegionEndo(dict) {
  return dict.asRegionEndo;
};

var asRegion = function asRegion(dict) {
  return dict.asRegion;
};

var asPosVector2 = new AsPos(Control_Category.identity(Control_Category.categoryFn));
var asPosEndoVector2 = new AsPosEndo(Control_Category.identity(Control_Category.categoryFn));
var asPosEndoRect = new AsPosEndo(function (f) {
  return function (v) {
    return new Data_Vector_Polymorphic_Types.Rect(f(v.value0), v.value1);
  };
});

var asPosEndo = function asPosEndo(dict) {
  return dict.asPosEndo;
};

var asPos = function asPos(dict) {
  return dict.asPos;
};

module.exports = {
  asPos: asPos,
  asPosEndo: asPosEndo,
  asRegion: asRegion,
  asRegionEndo: asRegionEndo,
  asSize: asSize,
  asSizeEndo: asSizeEndo,
  fromPos: fromPos,
  fromRegion: fromRegion,
  fromSize: fromSize,
  toPos: toPos,
  toRegion: toRegion,
  toSize: toSize,
  ToPos: ToPos,
  FromPos: FromPos,
  AsPosEndo: AsPosEndo,
  AsPos: AsPos,
  ToSize: ToSize,
  FromSize: FromSize,
  AsSizeEndo: AsSizeEndo,
  AsSize: AsSize,
  ToRegion: ToRegion,
  FromRegion: FromRegion,
  AsRegionEndo: AsRegionEndo,
  AsRegion: AsRegion,
  toPosVector2: toPosVector2,
  toPosRect: toPosRect,
  fromPosVector2: fromPosVector2,
  fromPosRect: fromPosRect,
  asPosEndoVector2: asPosEndoVector2,
  asPosEndoRect: asPosEndoRect,
  asPosVector2: asPosVector2,
  toSizeVector2: toSizeVector2,
  toSizeRect: toSizeRect,
  fromSizeVector2: fromSizeVector2,
  fromSizeRect: fromSizeRect,
  asSizeEndoVector2: asSizeEndoVector2,
  asSizeEndoRect: asSizeEndoRect,
  asSizeVector2: asSizeVector2,
  toRegionVector2: toRegionVector2,
  toRegionRect: toRegionRect,
  fromRegionVector2: fromRegionVector2,
  fromRegionRect: fromRegionRect,
  asRegionEndoVector2: asRegionEndoVector2,
  asRegionEndoRect: asRegionEndoRect,
  asRegionVector2: asRegionVector2,
  asRegionRect: asRegionRect
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Vector.Polymorphic.Types/index.js":"../output/Data.Vector.Polymorphic.Types/index.js"}],"../output/Data.Vector.Polymorphic/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Apply = require("../Control.Apply/index.js");

var Control_Category = require("../Control.Category/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Vector_Polymorphic_Class = require("../Data.Vector.Polymorphic.Class/index.js");

var Data_Vector_Polymorphic_Types = require("../Data.Vector.Polymorphic.Types/index.js");

var $$Math = require("../Math/index.js");

var toRectangleWith = function toRectangleWith(dictToRegion) {
  return function (dictSemiring) {
    return function (f) {
      var $103 = Data_Functor.map(Data_Vector_Polymorphic_Types.functorRect)(f);
      var $104 = Data_Vector_Polymorphic_Class.toRegion(dictToRegion);
      return function ($105) {
        return function (v) {
          return {
            x: v.value0.value0,
            y: v.value0.value1,
            width: v.value1.value0,
            height: v.value1.value1
          };
        }($103($104($105)));
      };
    };
  };
};

var toRectangle = function toRectangle(dictToRegion) {
  return toRectangleWith(dictToRegion)(Data_Semiring.semiringNumber)(Control_Category.identity(Control_Category.categoryFn));
};

var ratio = function ratio(dictToSize) {
  return function (dictEuclideanRing) {
    var $106 = Data_Vector_Polymorphic_Class.toSize(dictToSize);
    return function ($107) {
      return function (v) {
        return Data_EuclideanRing.div(dictEuclideanRing)(v.value0)(v.value1);
      }($106($107));
    };
  };
};

var putInsideMod = function putInsideMod(dictToRegion) {
  return function (dictAsPosEndo) {
    return function (dictEuclideanRing) {
      return function (inputRect) {
        var v = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(inputRect);
        return Data_Vector_Polymorphic_Class.asPosEndo(dictAsPosEndo)(function (inputPos) {
          return Control_Apply.apply(Data_Vector_Polymorphic_Types.applyVector2)(Control_Apply.apply(Data_Vector_Polymorphic_Types.applyVector2)(Data_Functor.map(Data_Vector_Polymorphic_Types.functorVector2)(function (v1) {
            return function (v2) {
              return function (v3) {
                return Data_Semiring.add(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(Data_EuclideanRing.mod(dictEuclideanRing)(Data_Ring.sub(dictEuclideanRing.CommutativeRing0().Ring0())(v3)(v1))(v2))(v1);
              };
            };
          })(v.value0))(v.value1))(inputPos);
        });
      };
    };
  };
};

var perimeter = function perimeter(dictToSize) {
  return function (dictSemiring) {
    var $108 = Data_Vector_Polymorphic_Class.toSize(dictToSize);
    return function ($109) {
      return function (v) {
        return Data_Semiring.add(dictSemiring)(Data_Semiring.add(dictSemiring)(Data_Semiring.add(dictSemiring)(v.value0)(v.value0))(v.value1))(v.value1);
      }($108($109));
    };
  };
};

var parallel = function parallel(dictToPos) {
  return function (dictEuclideanRing) {
    return function (dictEq) {
      return function (p1) {
        return function (p2) {
          var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(p2);
          var v1 = Data_Vector_Polymorphic_Class.toPos(dictToPos)(p1);

          if (Data_Eq.eq(dictEq)(v1.value1)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(v.value1)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()))) {
            return Data_Eq.eq(dictEq)(v1.value1)(v.value1);
          }

          ;

          if (Data_Boolean.otherwise) {
            return Data_Eq.eq(dictEq)(Data_EuclideanRing.div(dictEuclideanRing)(v1.value0)(v1.value1))(Data_EuclideanRing.div(dictEuclideanRing)(v.value0)(v.value1));
          }

          ;
          throw new Error("Failed pattern match at Data.Vector.Polymorphic (line 96, column 18 - line 99, column 52): " + [v1.constructor.name, v.constructor.name]);
        };
      };
    };
  };
};

var midPos = function midPos(dictToRegion) {
  return function (dictFromPos) {
    return function (dictEuclideanRing) {
      return function (region) {
        var v = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(region);

        var half = function half(n) {
          return Data_EuclideanRing.div(dictEuclideanRing)(n)(Data_Semiring.add(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(Data_Semiring.one(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()))(Data_Semiring.one(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())));
        };

        return Data_Vector_Polymorphic_Class.fromPos(dictFromPos)(Control_Apply.apply(Data_Vector_Polymorphic_Types.applyVector2)(Data_Functor.map(Data_Vector_Polymorphic_Types.functorVector2)(function (p) {
          return function (s) {
            return Data_Semiring.add(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(p)(half(s));
          };
        })(v.value0))(v.value1));
      };
    };
  };
};

var length = function length(dictToPos) {
  var $110 = Data_Vector_Polymorphic_Class.toPos(dictToPos);
  return function ($111) {
    return function (v) {
      return $$Math.sqrt(v.value0 * v.value0 + v.value1 * v.value1);
    }($110($111));
  };
};

var inside = function inside(dictToRegion) {
  return function (dictToPos) {
    return function (dictOrd) {
      return function (dictSemiring) {
        return function (region) {
          return function (pos) {
            var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
            var v1 = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(region);

            if (Data_Ord.lessThan(dictOrd)(v.value0)(v1.value0.value0)) {
              return false;
            }

            ;

            if (Data_Ord.greaterThanOrEq(dictOrd)(v.value0)(Data_Semiring.add(dictSemiring)(v1.value0.value0)(v1.value1.value0))) {
              return false;
            }

            ;

            if (Data_Ord.lessThan(dictOrd)(v.value1)(v1.value0.value1)) {
              return false;
            }

            ;

            if (Data_Ord.greaterThanOrEq(dictOrd)(v.value1)(Data_Semiring.add(dictSemiring)(v1.value0.value1)(v1.value1.value1))) {
              return false;
            }

            ;

            if (Data_Boolean.otherwise) {
              return true;
            }

            ;
            throw new Error("Failed pattern match at Data.Vector.Polymorphic (line 41, column 21 - line 47, column 26): " + [v1.constructor.name, v.constructor.name]);
          };
        };
      };
    };
  };
};

var outside = function outside(dictToRegion) {
  return function (dictToPos) {
    return function (dictOrd) {
      return function (dictSemiring) {
        return Data_Functor.map(Data_Functor.functorFn)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(inside(dictToRegion)(dictToPos)(dictOrd)(dictSemiring));
      };
    };
  };
};

var dot = function dot(dictToPos) {
  return function (dictSemiring) {
    return function (p1) {
      return function (p2) {
        var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(p1);
        var v1 = Data_Vector_Polymorphic_Class.toPos(dictToPos)(p2);
        return Data_Semiring.add(dictSemiring)(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0))(Data_Semiring.mul(dictSemiring)(v.value1)(v1.value1));
      };
    };
  };
};

var perpendicular = function perpendicular(dictToPos) {
  return function (dictSemiring) {
    return function (dictEq) {
      return function (p1) {
        return function (p2) {
          return Data_Eq.eq(dictEq)(dot(dictToPos)(dictSemiring)(p1)(p2))(Data_Semiring.zero(dictSemiring));
        };
      };
    };
  };
};

var diagonal = function diagonal(dictToSize) {
  var $112 = Data_Vector_Polymorphic_Class.toSize(dictToSize);
  return function ($113) {
    return function (v) {
      return $$Math.sqrt(v.value0 * v.value0 + v.value1 * v.value1);
    }($112($113));
  };
};

var area = function area(dictToSize) {
  return function (dictSemiring) {
    var $114 = Data_Vector_Polymorphic_Class.toSize(dictToSize);
    return function ($115) {
      return function (v) {
        return Data_Semiring.mul(dictSemiring)(v.value0)(v.value1);
      }($114($115));
    };
  };
};

module.exports = {
  length: length,
  diagonal: diagonal,
  inside: inside,
  outside: outside,
  putInsideMod: putInsideMod,
  area: area,
  perimeter: perimeter,
  ratio: ratio,
  midPos: midPos,
  dot: dot,
  perpendicular: perpendicular,
  parallel: parallel,
  toRectangleWith: toRectangleWith,
  toRectangle: toRectangle
};
},{"../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Vector.Polymorphic.Class/index.js":"../output/Data.Vector.Polymorphic.Class/index.js","../Data.Vector.Polymorphic.Types/index.js":"../output/Data.Vector.Polymorphic.Types/index.js","../Math/index.js":"../output/Math/index.js"}],"../output/Effect.Exception.Unsafe/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Unsafe = require("../Effect.Unsafe/index.js");

var unsafeThrowException = function unsafeThrowException($0) {
  return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
};

var unsafeThrow = function unsafeThrow($1) {
  return unsafeThrowException(Effect_Exception.error($1));
};

module.exports = {
  unsafeThrowException: unsafeThrowException,
  unsafeThrow: unsafeThrow
};
},{"../Effect.Exception/index.js":"../output/Effect.Exception/index.js","../Effect.Unsafe/index.js":"../output/Effect.Unsafe/index.js"}],"../output/Graphics.Canvas/foreign.js":[function(require,module,exports) {
/* global exports */
"use strict";

exports.canvasElementToImageSource = function (e) {
  return e;
};

exports.tryLoadImageImpl = function (src) {
  return function (e) {
    return function (f) {
      return function () {
        var img = new Image();
        img.src = src;
        img.addEventListener("load", function () {
          f(img)();
        }, false);
        img.addEventListener("error", function (error) {
          e();
        }, false);
      };
    };
  };
};

exports.getCanvasElementByIdImpl = function (id, Just, Nothing) {
  return function () {
    var el = document.getElementById(id);

    if (el && el instanceof HTMLCanvasElement) {
      return Just(el);
    } else {
      return Nothing;
    }
  };
};

exports.getContext2D = function (c) {
  return function () {
    return c.getContext('2d');
  };
};

exports.getCanvasWidth = function (canvas) {
  return function () {
    return canvas.width;
  };
};

exports.getCanvasHeight = function (canvas) {
  return function () {
    return canvas.height;
  };
};

exports.setCanvasWidth = function (canvas) {
  return function (width) {
    return function () {
      canvas.width = width;
    };
  };
};

exports.setCanvasHeight = function (canvas) {
  return function (height) {
    return function () {
      canvas.height = height;
    };
  };
};

exports.canvasToDataURL = function (canvas) {
  return function () {
    return canvas.toDataURL();
  };
};

exports.setLineWidth = function (ctx) {
  return function (width) {
    return function () {
      ctx.lineWidth = width;
    };
  };
};

exports.setLineDash = function (ctx) {
  return function (dash) {
    return function () {
      ctx.setLineDash(dash);
    };
  };
};

exports.setFillStyle = function (ctx) {
  return function (style) {
    return function () {
      ctx.fillStyle = style;
    };
  };
};

exports.setStrokeStyle = function (ctx) {
  return function (style) {
    return function () {
      ctx.strokeStyle = style;
    };
  };
};

exports.setShadowColor = function (ctx) {
  return function (color) {
    return function () {
      ctx.shadowColor = color;
    };
  };
};

exports.setShadowBlur = function (ctx) {
  return function (blur) {
    return function () {
      ctx.shadowBlur = blur;
    };
  };
};

exports.setShadowOffsetX = function (ctx) {
  return function (offsetX) {
    return function () {
      ctx.shadowOffsetX = offsetX;
    };
  };
};

exports.setShadowOffsetY = function (ctx) {
  return function (offsetY) {
    return function () {
      ctx.shadowOffsetY = offsetY;
    };
  };
};

exports.setMiterLimit = function (ctx) {
  return function (limit) {
    return function () {
      ctx.miterLimit = limit;
    };
  };
};

exports.setLineCapImpl = function (ctx) {
  return function (cap) {
    return function () {
      ctx.lineCap = cap;
    };
  };
};

exports.setLineJoinImpl = function (ctx) {
  return function (join) {
    return function () {
      ctx.lineJoin = join;
    };
  };
};

exports.setGlobalCompositeOperationImpl = function (ctx) {
  return function (op) {
    return function () {
      ctx.globalCompositeOperation = op;
    };
  };
};

exports.setGlobalAlpha = function (ctx) {
  return function (alpha) {
    return function () {
      ctx.globalAlpha = alpha;
    };
  };
};

exports.beginPath = function (ctx) {
  return function () {
    ctx.beginPath();
  };
};

exports.stroke = function (ctx) {
  return function () {
    ctx.stroke();
  };
};

exports.fill = function (ctx) {
  return function () {
    ctx.fill();
  };
};

exports.clip = function (ctx) {
  return function () {
    ctx.clip();
  };
};

exports.lineTo = function (ctx) {
  return function (x) {
    return function (y) {
      return function () {
        ctx.lineTo(x, y);
      };
    };
  };
};

exports.moveTo = function (ctx) {
  return function (x) {
    return function (y) {
      return function () {
        ctx.moveTo(x, y);
      };
    };
  };
};

exports.closePath = function (ctx) {
  return function () {
    ctx.closePath();
  };
};

exports.arc = function (ctx) {
  return function (a) {
    return function () {
      ctx.arc(a.x, a.y, a.radius, a.start, a.end);
    };
  };
};

exports.rect = function (ctx) {
  return function (r) {
    return function () {
      ctx.rect(r.x, r.y, r.width, r.height);
    };
  };
};

exports.fillRect = function (ctx) {
  return function (r) {
    return function () {
      ctx.fillRect(r.x, r.y, r.width, r.height);
    };
  };
};

exports.strokeRect = function (ctx) {
  return function (r) {
    return function () {
      ctx.strokeRect(r.x, r.y, r.width, r.height);
    };
  };
};

exports.clearRect = function (ctx) {
  return function (r) {
    return function () {
      ctx.clearRect(r.x, r.y, r.width, r.height);
    };
  };
};

exports.scale = function (ctx) {
  return function (t) {
    return function () {
      ctx.scale(t.scaleX, t.scaleY);
    };
  };
};

exports.rotate = function (ctx) {
  return function (angle) {
    return function () {
      ctx.rotate(angle);
    };
  };
};

exports.translate = function (ctx) {
  return function (t) {
    return function () {
      ctx.translate(t.translateX, t.translateY);
    };
  };
};

exports.transform = function (ctx) {
  return function (t) {
    return function () {
      ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
    };
  };
};

exports.setTransform = function (ctx) {
  return function (t) {
    return function () {
      ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
    };
  };
};

exports.textAlignImpl = function (ctx) {
  return function () {
    return ctx.textAlign;
  };
};

exports.setTextAlignImpl = function (ctx) {
  return function (textAlign) {
    return function () {
      ctx.textAlign = textAlign;
    };
  };
};

exports.font = function (ctx) {
  return function () {
    return ctx.font;
  };
};

exports.setFont = function (ctx) {
  return function (fontspec) {
    return function () {
      ctx.font = fontspec;
    };
  };
};

exports.fillText = function (ctx) {
  return function (text) {
    return function (x) {
      return function (y) {
        return function () {
          ctx.fillText(text, x, y);
        };
      };
    };
  };
};

exports.strokeText = function (ctx) {
  return function (text) {
    return function (x) {
      return function (y) {
        return function () {
          ctx.strokeText(text, x, y);
        };
      };
    };
  };
};

exports.measureText = function (ctx) {
  return function (text) {
    return function () {
      return ctx.measureText(text);
    };
  };
};

exports.save = function (ctx) {
  return function () {
    ctx.save();
  };
};

exports.restore = function (ctx) {
  return function () {
    ctx.restore();
  };
};

exports.imageDataWidth = function (image) {
  return image.width;
};

exports.imageDataHeight = function (image) {
  return image.height;
};

exports.imageDataBuffer = function (image) {
  return image.data;
};

exports.getImageData = function (ctx) {
  return function (x) {
    return function (y) {
      return function (w) {
        return function (h) {
          return function () {
            return ctx.getImageData(x, y, w, h);
          };
        };
      };
    };
  };
};

exports.putImageDataFull = function (ctx) {
  return function (image_data) {
    return function (x) {
      return function (y) {
        return function (dx) {
          return function (dy) {
            return function (dw) {
              return function (dh) {
                return function () {
                  ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.putImageData = function (ctx) {
  return function (image_data) {
    return function (x) {
      return function (y) {
        return function () {
          ctx.putImageData(image_data, x, y);
        };
      };
    };
  };
};

exports.createImageData = function (ctx) {
  return function (sw) {
    return function (sh) {
      return function () {
        return ctx.createImageData(sw, sh);
      };
    };
  };
};

exports.createImageDataCopy = function (ctx) {
  return function (image_data) {
    return function () {
      return ctx.createImageData(image_data);
    };
  };
};

exports.drawImage = function (ctx) {
  return function (image_source) {
    return function (dx) {
      return function (dy) {
        return function () {
          ctx.drawImage(image_source, dx, dy);
        };
      };
    };
  };
};

exports.drawImageScale = function (ctx) {
  return function (image_source) {
    return function (dx) {
      return function (dy) {
        return function (dWidth) {
          return function (dHeight) {
            return function () {
              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
            };
          };
        };
      };
    };
  };
};

exports.drawImageFull = function (ctx) {
  return function (image_source) {
    return function (sx) {
      return function (sy) {
        return function (sWidth) {
          return function (sHeight) {
            return function (dx) {
              return function (dy) {
                return function (dWidth) {
                  return function (dHeight) {
                    return function () {
                      ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.createPatternImpl = function (ctx) {
  return function (img) {
    return function (repeat) {
      return function () {
        return ctx.createPattern(img, repeat);
      };
    };
  };
};

exports.setPatternFillStyle = function (ctx) {
  return function (pattern) {
    return function () {
      ctx.fillStyle = pattern;
    };
  };
};

exports.createLinearGradient = function (ctx) {
  return function (linearGradient) {
    return function () {
      return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
    };
  };
};

exports.createRadialGradient = function (ctx) {
  return function (radialGradient) {
    return function () {
      return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
    };
  };
};

exports.addColorStop = function (gradient) {
  return function (stop) {
    return function (color) {
      return function () {
        gradient.addColorStop(stop, color);
      };
    };
  };
};

exports.setGradientFillStyle = function (ctx) {
  return function (gradient) {
    return function () {
      ctx.fillStyle = gradient;
    };
  };
};

exports.quadraticCurveTo = function (ctx) {
  return function (qCurve) {
    return function () {
      ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
    };
  };
};

exports.bezierCurveTo = function (ctx) {
  return function (bCurve) {
    return function () {
      ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
    };
  };
};
},{}],"../output/Graphics.Canvas/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Control_Apply = require("../Control.Apply/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Show = require("../Data.Show/index.js");

var Effect = require("../Effect/index.js");

var Effect_Exception_Unsafe = require("../Effect.Exception.Unsafe/index.js");

var AlignLeft = function () {
  function AlignLeft() {}

  ;
  AlignLeft.value = new AlignLeft();
  return AlignLeft;
}();

var AlignRight = function () {
  function AlignRight() {}

  ;
  AlignRight.value = new AlignRight();
  return AlignRight;
}();

var AlignCenter = function () {
  function AlignCenter() {}

  ;
  AlignCenter.value = new AlignCenter();
  return AlignCenter;
}();

var AlignStart = function () {
  function AlignStart() {}

  ;
  AlignStart.value = new AlignStart();
  return AlignStart;
}();

var AlignEnd = function () {
  function AlignEnd() {}

  ;
  AlignEnd.value = new AlignEnd();
  return AlignEnd;
}();

var Repeat = function () {
  function Repeat() {}

  ;
  Repeat.value = new Repeat();
  return Repeat;
}();

var RepeatX = function () {
  function RepeatX() {}

  ;
  RepeatX.value = new RepeatX();
  return RepeatX;
}();

var RepeatY = function () {
  function RepeatY() {}

  ;
  RepeatY.value = new RepeatY();
  return RepeatY;
}();

var NoRepeat = function () {
  function NoRepeat() {}

  ;
  NoRepeat.value = new NoRepeat();
  return NoRepeat;
}();

var BevelJoin = function () {
  function BevelJoin() {}

  ;
  BevelJoin.value = new BevelJoin();
  return BevelJoin;
}();

var RoundJoin = function () {
  function RoundJoin() {}

  ;
  RoundJoin.value = new RoundJoin();
  return RoundJoin;
}();

var MiterJoin = function () {
  function MiterJoin() {}

  ;
  MiterJoin.value = new MiterJoin();
  return MiterJoin;
}();

var Round = function () {
  function Round() {}

  ;
  Round.value = new Round();
  return Round;
}();

var Square = function () {
  function Square() {}

  ;
  Square.value = new Square();
  return Square;
}();

var Butt = function () {
  function Butt() {}

  ;
  Butt.value = new Butt();
  return Butt;
}();

var SourceOver = function () {
  function SourceOver() {}

  ;
  SourceOver.value = new SourceOver();
  return SourceOver;
}();

var SourceIn = function () {
  function SourceIn() {}

  ;
  SourceIn.value = new SourceIn();
  return SourceIn;
}();

var SourceOut = function () {
  function SourceOut() {}

  ;
  SourceOut.value = new SourceOut();
  return SourceOut;
}();

var SourceAtop = function () {
  function SourceAtop() {}

  ;
  SourceAtop.value = new SourceAtop();
  return SourceAtop;
}();

var DestinationOver = function () {
  function DestinationOver() {}

  ;
  DestinationOver.value = new DestinationOver();
  return DestinationOver;
}();

var DestinationIn = function () {
  function DestinationIn() {}

  ;
  DestinationIn.value = new DestinationIn();
  return DestinationIn;
}();

var DestinationOut = function () {
  function DestinationOut() {}

  ;
  DestinationOut.value = new DestinationOut();
  return DestinationOut;
}();

var DestinationAtop = function () {
  function DestinationAtop() {}

  ;
  DestinationAtop.value = new DestinationAtop();
  return DestinationAtop;
}();

var Lighter = function () {
  function Lighter() {}

  ;
  Lighter.value = new Lighter();
  return Lighter;
}();

var Copy = function () {
  function Copy() {}

  ;
  Copy.value = new Copy();
  return Copy;
}();

var Xor = function () {
  function Xor() {}

  ;
  Xor.value = new Xor();
  return Xor;
}();

var Multiply = function () {
  function Multiply() {}

  ;
  Multiply.value = new Multiply();
  return Multiply;
}();

var Screen = function () {
  function Screen() {}

  ;
  Screen.value = new Screen();
  return Screen;
}();

var Overlay = function () {
  function Overlay() {}

  ;
  Overlay.value = new Overlay();
  return Overlay;
}();

var Darken = function () {
  function Darken() {}

  ;
  Darken.value = new Darken();
  return Darken;
}();

var Lighten = function () {
  function Lighten() {}

  ;
  Lighten.value = new Lighten();
  return Lighten;
}();

var ColorDodge = function () {
  function ColorDodge() {}

  ;
  ColorDodge.value = new ColorDodge();
  return ColorDodge;
}();

var ColorBurn = function () {
  function ColorBurn() {}

  ;
  ColorBurn.value = new ColorBurn();
  return ColorBurn;
}();

var HardLight = function () {
  function HardLight() {}

  ;
  HardLight.value = new HardLight();
  return HardLight;
}();

var SoftLight = function () {
  function SoftLight() {}

  ;
  SoftLight.value = new SoftLight();
  return SoftLight;
}();

var Difference = function () {
  function Difference() {}

  ;
  Difference.value = new Difference();
  return Difference;
}();

var Exclusion = function () {
  function Exclusion() {}

  ;
  Exclusion.value = new Exclusion();
  return Exclusion;
}();

var Hue = function () {
  function Hue() {}

  ;
  Hue.value = new Hue();
  return Hue;
}();

var Saturation = function () {
  function Saturation() {}

  ;
  Saturation.value = new Saturation();
  return Saturation;
}();

var Color = function () {
  function Color() {}

  ;
  Color.value = new Color();
  return Color;
}();

var Luminosity = function () {
  function Luminosity() {}

  ;
  Luminosity.value = new Luminosity();
  return Luminosity;
}();

var withContext = function withContext(ctx) {
  return function (action) {
    return function __do() {
      $foreign.save(ctx)();
      var a = action();
      $foreign.restore(ctx)();
      return a;
    };
  };
};

var tryLoadImage = function tryLoadImage(path) {
  return function (k) {
    return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($24) {
      return k(Data_Maybe.Just.create($24));
    });
  };
};

var textAlign = function textAlign(ctx) {
  var unsafeParseTextAlign = function unsafeParseTextAlign(v) {
    if (v === "left") {
      return AlignLeft.value;
    }

    ;

    if (v === "right") {
      return AlignRight.value;
    }

    ;

    if (v === "center") {
      return AlignCenter.value;
    }

    ;

    if (v === "start") {
      return AlignStart.value;
    }

    ;

    if (v === "end") {
      return AlignEnd.value;
    }

    ;
    return Effect_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
  };

  return Data_Functor.map(Effect.functorEffect)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
};

var strokePath = function strokePath(ctx) {
  return function (path) {
    return function __do() {
      $foreign.beginPath(ctx)();
      var a = path();
      $foreign.stroke(ctx)();
      return a;
    };
  };
};

var showTextAlign = new Data_Show.Show(function (v) {
  if (v instanceof AlignLeft) {
    return "AlignLeft";
  }

  ;

  if (v instanceof AlignRight) {
    return "AlignRight";
  }

  ;

  if (v instanceof AlignCenter) {
    return "AlignCenter";
  }

  ;

  if (v instanceof AlignStart) {
    return "AlignStart";
  }

  ;

  if (v instanceof AlignEnd) {
    return "AlignEnd";
  }

  ;
  throw new Error("Failed pattern match at Graphics.Canvas (line 489, column 1 - line 494, column 29): " + [v.constructor.name]);
});
var showPatternRepeat = new Data_Show.Show(function (v) {
  if (v instanceof Repeat) {
    return "Repeat";
  }

  ;

  if (v instanceof RepeatX) {
    return "RepeatX";
  }

  ;

  if (v instanceof RepeatY) {
    return "RepeatY";
  }

  ;

  if (v instanceof NoRepeat) {
    return "NoRepeat";
  }

  ;
  throw new Error("Failed pattern match at Graphics.Canvas (line 599, column 1 - line 603, column 29): " + [v.constructor.name]);
});
var showComposite = new Data_Show.Show(function (v) {
  if (v instanceof SourceOver) {
    return "SourceOver";
  }

  ;

  if (v instanceof SourceIn) {
    return "SourceIn";
  }

  ;

  if (v instanceof SourceOut) {
    return "SourceOut";
  }

  ;

  if (v instanceof SourceAtop) {
    return "SourceAtop";
  }

  ;

  if (v instanceof DestinationOver) {
    return "DestinationOver";
  }

  ;

  if (v instanceof DestinationIn) {
    return "DestinationIn";
  }

  ;

  if (v instanceof DestinationOut) {
    return "DestinationOut";
  }

  ;

  if (v instanceof DestinationAtop) {
    return "DestinationAtop";
  }

  ;

  if (v instanceof Lighter) {
    return "Lighter";
  }

  ;

  if (v instanceof Copy) {
    return "Copy";
  }

  ;

  if (v instanceof Xor) {
    return "Xor";
  }

  ;

  if (v instanceof Multiply) {
    return "Multiply";
  }

  ;

  if (v instanceof Screen) {
    return "Screen";
  }

  ;

  if (v instanceof Overlay) {
    return "Overlay";
  }

  ;

  if (v instanceof Darken) {
    return "Darken";
  }

  ;

  if (v instanceof Lighten) {
    return "Lighten";
  }

  ;

  if (v instanceof ColorDodge) {
    return "ColorDodge";
  }

  ;

  if (v instanceof ColorBurn) {
    return "ColorBurn";
  }

  ;

  if (v instanceof HardLight) {
    return "HardLight";
  }

  ;

  if (v instanceof SoftLight) {
    return "SoftLight";
  }

  ;

  if (v instanceof Difference) {
    return "Difference";
  }

  ;

  if (v instanceof Exclusion) {
    return "Exclusion";
  }

  ;

  if (v instanceof Hue) {
    return "Hue";
  }

  ;

  if (v instanceof Saturation) {
    return "Saturation";
  }

  ;

  if (v instanceof Color) {
    return "Color";
  }

  ;

  if (v instanceof Luminosity) {
    return "Luminosity";
  }

  ;
  throw new Error("Failed pattern match at Graphics.Canvas (line 284, column 1 - line 310, column 38): " + [v.constructor.name]);
});

var setTextAlign = function setTextAlign(ctx) {
  return function (textalign) {
    var toString = function toString(v) {
      if (v instanceof AlignLeft) {
        return "left";
      }

      ;

      if (v instanceof AlignRight) {
        return "right";
      }

      ;

      if (v instanceof AlignCenter) {
        return "center";
      }

      ;

      if (v instanceof AlignStart) {
        return "start";
      }

      ;

      if (v instanceof AlignEnd) {
        return "end";
      }

      ;
      throw new Error("Failed pattern match at Graphics.Canvas (line 518, column 5 - line 518, column 32): " + [v.constructor.name]);
    };

    return $foreign.setTextAlignImpl(ctx)(toString(textalign));
  };
};

var setLineJoin = function setLineJoin(context) {
  return function (v) {
    if (v instanceof BevelJoin) {
      return $foreign.setLineJoinImpl(context)("bevel");
    }

    ;

    if (v instanceof RoundJoin) {
      return $foreign.setLineJoinImpl(context)("round");
    }

    ;

    if (v instanceof MiterJoin) {
      return $foreign.setLineJoinImpl(context)("miter");
    }

    ;
    throw new Error("Failed pattern match at Graphics.Canvas (line 247, column 1 - line 247, column 52): " + [context.constructor.name, v.constructor.name]);
  };
};

var setLineCap = function setLineCap(context) {
  return function (v) {
    if (v instanceof Round) {
      return $foreign.setLineCapImpl(context)("round");
    }

    ;

    if (v instanceof Square) {
      return $foreign.setLineCapImpl(context)("square");
    }

    ;

    if (v instanceof Butt) {
      return $foreign.setLineCapImpl(context)("butt");
    }

    ;
    throw new Error("Failed pattern match at Graphics.Canvas (line 234, column 1 - line 234, column 50): " + [context.constructor.name, v.constructor.name]);
  };
};

var setGlobalCompositeOperation = function setGlobalCompositeOperation(ctx) {
  return function (composite) {
    var toString = function toString(v) {
      if (v instanceof SourceOver) {
        return "source-over";
      }

      ;

      if (v instanceof SourceIn) {
        return "source-in";
      }

      ;

      if (v instanceof SourceOut) {
        return "source-out";
      }

      ;

      if (v instanceof SourceAtop) {
        return "source-atop";
      }

      ;

      if (v instanceof DestinationOver) {
        return "destination-over";
      }

      ;

      if (v instanceof DestinationIn) {
        return "destination-in";
      }

      ;

      if (v instanceof DestinationOut) {
        return "destination-out";
      }

      ;

      if (v instanceof DestinationAtop) {
        return "destination-atop";
      }

      ;

      if (v instanceof Lighter) {
        return "lighter";
      }

      ;

      if (v instanceof Copy) {
        return "copy";
      }

      ;

      if (v instanceof Xor) {
        return "xor";
      }

      ;

      if (v instanceof Multiply) {
        return "multiply";
      }

      ;

      if (v instanceof Screen) {
        return "screen";
      }

      ;

      if (v instanceof Overlay) {
        return "overlay";
      }

      ;

      if (v instanceof Darken) {
        return "darken";
      }

      ;

      if (v instanceof Lighten) {
        return "lighten";
      }

      ;

      if (v instanceof ColorDodge) {
        return "color-dodge";
      }

      ;

      if (v instanceof ColorBurn) {
        return "color-burn";
      }

      ;

      if (v instanceof HardLight) {
        return "hard-light";
      }

      ;

      if (v instanceof SoftLight) {
        return "soft-light";
      }

      ;

      if (v instanceof Difference) {
        return "difference";
      }

      ;

      if (v instanceof Exclusion) {
        return "exclusion";
      }

      ;

      if (v instanceof Hue) {
        return "hue";
      }

      ;

      if (v instanceof Saturation) {
        return "saturation";
      }

      ;

      if (v instanceof Color) {
        return "color";
      }

      ;

      if (v instanceof Luminosity) {
        return "luminosity";
      }

      ;
      throw new Error("Failed pattern match at Graphics.Canvas (line 318, column 5 - line 318, column 45): " + [v.constructor.name]);
    };

    return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
  };
};

var setCanvasDimensions = function setCanvasDimensions(ce) {
  return function (d) {
    return Control_Apply.applySecond(Effect.applyEffect)($foreign.setCanvasHeight(ce)(d.height))($foreign.setCanvasWidth(ce)(d.width));
  };
};

var getCanvasElementById = function getCanvasElementById(elId) {
  return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
};

var getCanvasDimensions = function getCanvasDimensions(ce) {
  return function __do() {
    var w = $foreign.getCanvasWidth(ce)();
    var h = $foreign.getCanvasHeight(ce)();
    return {
      width: w,
      height: h
    };
  };
};

var fillPath = function fillPath(ctx) {
  return function (path) {
    return function __do() {
      $foreign.beginPath(ctx)();
      var a = path();
      $foreign.fill(ctx)();
      return a;
    };
  };
};

var eqLineCap = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Round && y instanceof Round) {
      return true;
    }

    ;

    if (x instanceof Square && y instanceof Square) {
      return true;
    }

    ;

    if (x instanceof Butt && y instanceof Butt) {
      return true;
    }

    ;
    return false;
  };
});

var createPattern = function createPattern(context) {
  return function (img) {
    return function (repeat) {
      var toString = function toString(v) {
        if (v instanceof Repeat) {
          return "repeat";
        }

        ;

        if (v instanceof RepeatX) {
          return "repeat-x";
        }

        ;

        if (v instanceof RepeatY) {
          return "repeat-y";
        }

        ;

        if (v instanceof NoRepeat) {
          return "no-repeat";
        }

        ;
        throw new Error("Failed pattern match at Graphics.Canvas (line 611, column 5 - line 611, column 31): " + [v.constructor.name]);
      };

      return $foreign.createPatternImpl(context)(img)(toString(repeat));
    };
  };
};

module.exports = {
  SourceOver: SourceOver,
  SourceIn: SourceIn,
  SourceOut: SourceOut,
  SourceAtop: SourceAtop,
  DestinationOver: DestinationOver,
  DestinationIn: DestinationIn,
  DestinationOut: DestinationOut,
  DestinationAtop: DestinationAtop,
  Lighter: Lighter,
  Copy: Copy,
  Xor: Xor,
  Multiply: Multiply,
  Screen: Screen,
  Overlay: Overlay,
  Darken: Darken,
  Lighten: Lighten,
  ColorDodge: ColorDodge,
  ColorBurn: ColorBurn,
  HardLight: HardLight,
  SoftLight: SoftLight,
  Difference: Difference,
  Exclusion: Exclusion,
  Hue: Hue,
  Saturation: Saturation,
  Color: Color,
  Luminosity: Luminosity,
  Round: Round,
  Square: Square,
  Butt: Butt,
  BevelJoin: BevelJoin,
  RoundJoin: RoundJoin,
  MiterJoin: MiterJoin,
  AlignLeft: AlignLeft,
  AlignRight: AlignRight,
  AlignCenter: AlignCenter,
  AlignStart: AlignStart,
  AlignEnd: AlignEnd,
  Repeat: Repeat,
  RepeatX: RepeatX,
  RepeatY: RepeatY,
  NoRepeat: NoRepeat,
  getCanvasElementById: getCanvasElementById,
  getCanvasDimensions: getCanvasDimensions,
  setCanvasDimensions: setCanvasDimensions,
  setLineCap: setLineCap,
  setLineJoin: setLineJoin,
  setGlobalCompositeOperation: setGlobalCompositeOperation,
  strokePath: strokePath,
  fillPath: fillPath,
  textAlign: textAlign,
  setTextAlign: setTextAlign,
  withContext: withContext,
  tryLoadImage: tryLoadImage,
  createPattern: createPattern,
  eqLineCap: eqLineCap,
  showComposite: showComposite,
  showTextAlign: showTextAlign,
  showPatternRepeat: showPatternRepeat,
  getContext2D: $foreign.getContext2D,
  getCanvasWidth: $foreign.getCanvasWidth,
  setCanvasWidth: $foreign.setCanvasWidth,
  getCanvasHeight: $foreign.getCanvasHeight,
  setCanvasHeight: $foreign.setCanvasHeight,
  canvasToDataURL: $foreign.canvasToDataURL,
  setLineWidth: $foreign.setLineWidth,
  setLineDash: $foreign.setLineDash,
  setFillStyle: $foreign.setFillStyle,
  setStrokeStyle: $foreign.setStrokeStyle,
  setShadowBlur: $foreign.setShadowBlur,
  setShadowOffsetX: $foreign.setShadowOffsetX,
  setShadowOffsetY: $foreign.setShadowOffsetY,
  setShadowColor: $foreign.setShadowColor,
  setMiterLimit: $foreign.setMiterLimit,
  setGlobalAlpha: $foreign.setGlobalAlpha,
  beginPath: $foreign.beginPath,
  stroke: $foreign.stroke,
  fill: $foreign.fill,
  clip: $foreign.clip,
  lineTo: $foreign.lineTo,
  moveTo: $foreign.moveTo,
  closePath: $foreign.closePath,
  arc: $foreign.arc,
  rect: $foreign.rect,
  fillRect: $foreign.fillRect,
  strokeRect: $foreign.strokeRect,
  clearRect: $foreign.clearRect,
  scale: $foreign.scale,
  rotate: $foreign.rotate,
  translate: $foreign.translate,
  transform: $foreign.transform,
  setTransform: $foreign.setTransform,
  font: $foreign.font,
  setFont: $foreign.setFont,
  fillText: $foreign.fillText,
  strokeText: $foreign.strokeText,
  measureText: $foreign.measureText,
  save: $foreign.save,
  restore: $foreign.restore,
  getImageData: $foreign.getImageData,
  putImageData: $foreign.putImageData,
  putImageDataFull: $foreign.putImageDataFull,
  createImageData: $foreign.createImageData,
  createImageDataCopy: $foreign.createImageDataCopy,
  imageDataWidth: $foreign.imageDataWidth,
  imageDataHeight: $foreign.imageDataHeight,
  imageDataBuffer: $foreign.imageDataBuffer,
  canvasElementToImageSource: $foreign.canvasElementToImageSource,
  drawImage: $foreign.drawImage,
  drawImageScale: $foreign.drawImageScale,
  drawImageFull: $foreign.drawImageFull,
  setPatternFillStyle: $foreign.setPatternFillStyle,
  createLinearGradient: $foreign.createLinearGradient,
  createRadialGradient: $foreign.createRadialGradient,
  addColorStop: $foreign.addColorStop,
  setGradientFillStyle: $foreign.setGradientFillStyle,
  quadraticCurveTo: $foreign.quadraticCurveTo,
  bezierCurveTo: $foreign.bezierCurveTo
};
},{"./foreign.js":"../output/Graphics.Canvas/foreign.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Exception.Unsafe/index.js":"../output/Effect.Exception.Unsafe/index.js"}],"../output/Control.Monad.List.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Lazy = require("../Data.Lazy/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Yield = function () {
  function Yield(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Yield.create = function (value0) {
    return function (value1) {
      return new Yield(value0, value1);
    };
  };

  return Yield;
}();

var Skip = function () {
  function Skip(value0) {
    this.value0 = value0;
  }

  ;

  Skip.create = function (value0) {
    return new Skip(value0);
  };

  return Skip;
}();

var Done = function () {
  function Done() {}

  ;
  Done.value = new Done();
  return Done;
}();

var ListT = function ListT(x) {
  return x;
};

var wrapLazy = function wrapLazy(dictApplicative) {
  return function (v) {
    return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
  };
};

var wrapEffect = function wrapEffect(dictFunctor) {
  return function (v) {
    return ListT(Data_Functor.map(dictFunctor)(function ($183) {
      return Skip.create(Data_Lazy.defer(Data_Function["const"]($183)));
    })(v));
  };
};

var unfold = function unfold(dictMonad) {
  return function (f) {
    return function (z) {
      var g = function g(v) {
        if (v instanceof Data_Maybe.Just) {
          return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
            return unfold(dictMonad)(f)(v.value0.value0);
          }));
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [v.constructor.name]);
      };

      return ListT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(g)(f(z)));
    };
  };
};

var uncons = function uncons(dictMonad) {
  return function (v) {
    var g = function g(v1) {
      if (v1 instanceof Yield) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
      }

      ;

      if (v1 instanceof Skip) {
        return uncons(dictMonad)(Data_Lazy.force(v1.value0));
      }

      ;

      if (v1 instanceof Done) {
        return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [v1.constructor.name]);
    };

    return Control_Bind.bind(dictMonad.Bind1())(v)(g);
  };
};

var tail = function tail(dictMonad) {
  return function (l) {
    return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
  };
};

var stepMap = function stepMap(dictFunctor) {
  return function (f) {
    return function (v) {
      return ListT(Data_Functor.map(dictFunctor)(f)(v));
    };
  };
};

var takeWhile = function takeWhile(dictApplicative) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var $99 = f(v.value0);

        if ($99) {
          return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
        }

        ;
        return Done.value;
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [v.constructor.name]);
    };

    return stepMap(dictApplicative.Apply0().Functor0())(g);
  };
};

var scanl = function scanl(dictMonad) {
  return function (f) {
    return function (b) {
      return function (l) {
        var g = function g(v) {
          var h = function h(v1) {
            if (v1 instanceof Yield) {
              var b$prime$prime = f(v.value0)(v1.value0);
              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
            }

            ;

            if (v1 instanceof Skip) {
              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
            }

            ;

            if (v1 instanceof Done) {
              return Data_Maybe.Nothing.value;
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [v1.constructor.name]);
          };

          return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(h)(v.value1);
        };

        return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
      };
    };
  };
};

var prepend$prime = function prepend$prime(dictApplicative) {
  return function (h) {
    return function (t) {
      return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
    };
  };
};

var prepend = function prepend(dictApplicative) {
  return function (h) {
    return function (t) {
      return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
    };
  };
};

var nil = function nil(dictApplicative) {
  return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
};

var singleton = function singleton(dictApplicative) {
  return function (a) {
    return prepend(dictApplicative)(a)(nil(dictApplicative));
  };
};

var take = function take(dictApplicative) {
  return function (v) {
    return function (fa) {
      if (v === 0) {
        return nil(dictApplicative);
      }

      ;

      var f = function f(v1) {
        if (v1 instanceof Yield) {
          return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
        }

        ;

        if (v1 instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
        }

        ;

        if (v1 instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [v1.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(fa);
    };
  };
};

var zipWith$prime = function zipWith$prime(dictMonad) {
  return function (f) {
    var g = function g(v) {
      return function (v1) {
        if (v1 instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
        }

        ;

        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
          return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
            return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
          })))(f(v.value0.value0)(v1.value0.value0));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [v.constructor.name, v1.constructor.name]);
      };
    };

    var loop = function loop(fa) {
      return function (fb) {
        return wrapEffect(dictMonad.Bind1().Apply0().Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (ua) {
          return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (ub) {
            return g(ua)(ub);
          });
        }));
      };
    };

    return loop;
  };
};

var zipWith = function zipWith(dictMonad) {
  return function (f) {
    var g = function g(a) {
      return function (b) {
        return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
      };
    };

    return zipWith$prime(dictMonad)(g);
  };
};

var newtypeListT = new Data_Newtype.Newtype(function (n) {
  return n;
}, ListT);

var mapMaybe = function mapMaybe(dictFunctor) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  };
};

var iterate = function iterate(dictMonad) {
  return function (f) {
    return function (a) {
      var g = function g(x) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
      };

      return unfold(dictMonad)(g)(a);
    };
  };
};

var repeat = function repeat(dictMonad) {
  return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};

var head = function head(dictMonad) {
  return function (l) {
    return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
  };
};

var functorListT = function functorListT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
      }

      ;

      if (v instanceof Skip) {
        return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  });
};

var fromEffect = function fromEffect(dictApplicative) {
  return function (fa) {
    return ListT(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
      return nil(dictApplicative);
    })))(fa));
  };
};

var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return fromEffect(dictMonad.Applicative0());
});

var foldlRec$prime = function foldlRec$prime(dictMonadRec) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(b));
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(b)(v.value0.value0))(function (b$prime) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                a: b$prime,
                b: v.value0.value1
              }));
            });
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
      };
    };

    return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
  };
};

var runListTRec = function runListTRec(dictMonadRec) {
  return foldlRec$prime(dictMonadRec)(function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(Data_Unit.unit);
    };
  })(Data_Unit.unit);
};

var foldlRec = function foldlRec(dictMonadRec) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(b));
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
              a: f(b)(v.value0.value0),
              b: v.value0.value1
            }));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
      };
    };

    return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
  };
};

var foldl$prime = function foldl$prime(dictMonad) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonad.Applicative0())(b);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
      };
    };

    return loop;
  };
};

var runListT = function runListT(dictMonad) {
  return foldl$prime(dictMonad)(function (v) {
    return function (v1) {
      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
    };
  })(Data_Unit.unit);
};

var foldl = function foldl(dictMonad) {
  return function (f) {
    var loop = function loop(b) {
      return function (l) {
        var g = function g(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonad.Applicative0())(b);
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            return loop(f(b)(v.value0.value0))(v.value0.value1);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [v.constructor.name]);
        };

        return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
      };
    };

    return loop;
  };
};

var filter = function filter(dictFunctor) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
        var $150 = f(v.value0);

        if ($150) {
          return new Yield(v.value0, s$prime);
        }

        ;
        return new Skip(s$prime);
      }

      ;

      if (v instanceof Skip) {
        var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
        return new Skip(s$prime);
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [v.constructor.name]);
    };

    return stepMap(dictFunctor)(g);
  };
};

var dropWhile = function dropWhile(dictApplicative) {
  return function (f) {
    var g = function g(v) {
      if (v instanceof Yield) {
        var $155 = f(v.value0);

        if ($155) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
        }

        ;
        return new Yield(v.value0, v.value1);
      }

      ;

      if (v instanceof Skip) {
        return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
      }

      ;

      if (v instanceof Done) {
        return Done.value;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [v.constructor.name]);
    };

    return stepMap(dictApplicative.Apply0().Functor0())(g);
  };
};

var drop = function drop(dictApplicative) {
  return function (v) {
    return function (fa) {
      if (v === 0) {
        return fa;
      }

      ;

      var f = function f(v1) {
        if (v1 instanceof Yield) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
        }

        ;

        if (v1 instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
        }

        ;

        if (v1 instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [v1.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(fa);
    };
  };
};

var cons = function cons(dictApplicative) {
  return function (lh) {
    return function (t) {
      return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
    };
  };
};

var unfoldable1ListT = function unfoldable1ListT(dictMonad) {
  return new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
      var go = function go(v) {
        if (v.value1 instanceof Data_Maybe.Nothing) {
          return singleton(dictMonad.Applicative0())(v.value0);
        }

        ;

        if (v.value1 instanceof Data_Maybe.Just) {
          return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
            return go(f(v.value1.value0));
          }));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [v.constructor.name]);
      };

      return go(f(b));
    };
  });
};

var unfoldableListT = function unfoldableListT(dictMonad) {
  return new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1ListT(dictMonad);
  }, function (f) {
    return function (b) {
      var go = function go(v) {
        if (v instanceof Data_Maybe.Nothing) {
          return nil(dictMonad.Applicative0());
        }

        ;

        if (v instanceof Data_Maybe.Just) {
          return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
            return go(f(v.value0.value1));
          }));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [v.constructor.name]);
      };

      return go(f(b));
    };
  });
};

var semigroupListT = function semigroupListT(dictApplicative) {
  return new Data_Semigroup.Semigroup(concat(dictApplicative));
};

var concat = function concat(dictApplicative) {
  return function (x) {
    return function (y) {
      var f = function f(v) {
        if (v instanceof Yield) {
          return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
          })(v.value1));
        }

        ;

        if (v instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
          })(v.value0));
        }

        ;

        if (v instanceof Done) {
          return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [v.constructor.name]);
      };

      return stepMap(dictApplicative.Apply0().Functor0())(f)(x);
    };
  };
};

var monoidListT = function monoidListT(dictApplicative) {
  return new Data_Monoid.Monoid(function () {
    return semigroupListT(dictApplicative);
  }, nil(dictApplicative));
};

var catMaybes = function catMaybes(dictFunctor) {
  return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};

var monadListT = function monadListT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeListT(dictMonad);
  }, function () {
    return bindListT(dictMonad);
  });
};

var bindListT = function bindListT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyListT(dictMonad);
  }, function (fa) {
    return function (f) {
      var g = function g(v) {
        if (v instanceof Yield) {
          var h = function h(s$prime) {
            return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
          };

          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
        }

        ;

        if (v instanceof Skip) {
          return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
            return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
          })(v.value0));
        }

        ;

        if (v instanceof Done) {
          return Done.value;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [v.constructor.name]);
      };

      return stepMap(dictMonad.Bind1().Apply0().Functor0())(g)(fa);
    };
  });
};

var applyListT = function applyListT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorListT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadListT(dictMonad)));
};

var applicativeListT = function applicativeListT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyListT(dictMonad);
  }, singleton(dictMonad.Applicative0()));
};

var monadEffectListT = function monadEffectListT(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadListT(dictMonadEffect.Monad0());
  }, function () {
    var $184 = Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0());
    var $185 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($186) {
      return $184($185($186));
    };
  }());
};

var altListT = function altListT(dictApplicative) {
  return new Control_Alt.Alt(function () {
    return functorListT(dictApplicative.Apply0().Functor0());
  }, concat(dictApplicative));
};

var plusListT = function plusListT(dictMonad) {
  return new Control_Plus.Plus(function () {
    return altListT(dictMonad.Applicative0());
  }, nil(dictMonad.Applicative0()));
};

var alternativeListT = function alternativeListT(dictMonad) {
  return new Control_Alternative.Alternative(function () {
    return applicativeListT(dictMonad);
  }, function () {
    return plusListT(dictMonad);
  });
};

var monadZeroListT = function monadZeroListT(dictMonad) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeListT(dictMonad);
  }, function () {
    return monadListT(dictMonad);
  });
};

var monadPlusListT = function monadPlusListT(dictMonad) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroListT(dictMonad);
  });
};

module.exports = {
  ListT: ListT,
  Yield: Yield,
  Skip: Skip,
  Done: Done,
  catMaybes: catMaybes,
  cons: cons,
  drop: drop,
  dropWhile: dropWhile,
  filter: filter,
  foldl: foldl,
  foldlRec: foldlRec,
  "foldl'": foldl$prime,
  "foldlRec'": foldlRec$prime,
  fromEffect: fromEffect,
  head: head,
  iterate: iterate,
  mapMaybe: mapMaybe,
  nil: nil,
  prepend: prepend,
  "prepend'": prepend$prime,
  repeat: repeat,
  runListT: runListT,
  runListTRec: runListTRec,
  scanl: scanl,
  singleton: singleton,
  tail: tail,
  take: take,
  takeWhile: takeWhile,
  uncons: uncons,
  unfold: unfold,
  wrapEffect: wrapEffect,
  wrapLazy: wrapLazy,
  zipWith: zipWith,
  "zipWith'": zipWith$prime,
  newtypeListT: newtypeListT,
  semigroupListT: semigroupListT,
  monoidListT: monoidListT,
  functorListT: functorListT,
  unfoldableListT: unfoldableListT,
  unfoldable1ListT: unfoldable1ListT,
  applyListT: applyListT,
  applicativeListT: applicativeListT,
  bindListT: bindListT,
  monadListT: monadListT,
  monadTransListT: monadTransListT,
  altListT: altListT,
  plusListT: plusListT,
  alternativeListT: alternativeListT,
  monadZeroListT: monadZeroListT,
  monadPlusListT: monadPlusListT,
  monadEffectListT: monadEffectListT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Lazy/index.js":"../output/Data.Lazy/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.RWS.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var RWSResult = function () {
  function RWSResult(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  ;

  RWSResult.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new RWSResult(value0, value1, value2);
      };
    };
  };

  return RWSResult;
}();

var RWST = function RWST(x) {
  return x;
};

var withRWST = function withRWST(f) {
  return function (m) {
    return function (r) {
      return function (s) {
        return Data_Tuple.uncurry(m)(f(r)(s));
      };
    };
  };
};

var runRWST = function runRWST(v) {
  return v;
};

var newtypeRWST = new Data_Newtype.Newtype(function (n) {
  return n;
}, RWST);

var monadTransRWST = function monadTransRWST(dictMonoid) {
  return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
      return function (v) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
          });
        };
      };
    };
  });
};

var mapRWST = function mapRWST(f) {
  return function (v) {
    return function (r) {
      return function (s) {
        return f(v(r)(s));
      };
    };
  };
};

var lazyRWST = new Control_Lazy.Lazy(function (f) {
  return function (r) {
    return function (s) {
      var v = f(Data_Unit.unit);
      return v(r)(s);
    };
  };
});

var functorRWST = function functorRWST(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (r) {
        return function (s) {
          return Data_Functor.map(dictFunctor)(function (v1) {
            return new RWSResult(v1.value0, f(v1.value1), v1.value2);
          })(v(r)(s));
        };
      };
    };
  });
};

var execRWST = function execRWST(dictMonad) {
  return function (v) {
    return function (r) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
        });
      };
    };
  };
};

var evalRWST = function evalRWST(dictMonad) {
  return function (v) {
    return function (r) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
        });
      };
    };
  };
};

var applyRWST = function applyRWST(dictBind) {
  return function (dictMonoid) {
    return new Control_Apply.Apply(function () {
      return functorRWST(dictBind.Apply0().Functor0());
    }, function (v) {
      return function (v1) {
        return function (r) {
          return function (s) {
            return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
              return Data_Functor.mapFlipped(dictBind.Apply0().Functor0())(v1(r)(v2.value0))(function (v3) {
                return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
              });
            });
          };
        };
      };
    });
  };
};

var bindRWST = function bindRWST(dictBind) {
  return function (dictMonoid) {
    return new Control_Bind.Bind(function () {
      return applyRWST(dictBind)(dictMonoid);
    }, function (v) {
      return function (f) {
        return function (r) {
          return function (s) {
            return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
              var v2 = f(v1.value1);
              return Data_Functor.mapFlipped(dictBind.Apply0().Functor0())(v2(r)(v1.value0))(function (v3) {
                return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
              });
            });
          };
        };
      };
    });
  };
};

var applicativeRWST = function applicativeRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
      return applyRWST(dictMonad.Bind1())(dictMonoid);
    }, function (a) {
      return function (v) {
        return function (s) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
        };
      };
    });
  };
};

var monadRWST = function monadRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad.Monad(function () {
      return applicativeRWST(dictMonad)(dictMonoid);
    }, function () {
      return bindRWST(dictMonad.Bind1())(dictMonoid);
    });
  };
};

var monadAskRWST = function monadAskRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (r) {
      return function (s) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
      };
    });
  };
};

var monadReaderRWST = function monadReaderRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
      return monadAskRWST(dictMonad)(dictMonoid);
    }, function (f) {
      return function (m) {
        return function (r) {
          return function (s) {
            return m(f(r))(s);
          };
        };
      };
    });
  };
};

var monadEffectRWS = function monadEffectRWS(dictMonoid) {
  return function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
      return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
    }, function () {
      var $155 = Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0());
      var $156 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($157) {
        return $155($156($157));
      };
    }());
  };
};

var monadRecRWST = function monadRecRWST(dictMonadRec) {
  return function (dictMonoid) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
      return monadRWST(dictMonadRec.Monad0())(dictMonoid);
    }, function (k) {
      return function (a) {
        var k$prime = function k$prime(r) {
          return function (v) {
            var v1 = k(v.value1);
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1(r)(v.value0))(function (v2) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
                if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                }

                ;

                if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                }

                ;
                throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 127, column 16 - line 129, column 68): " + [v2.value1.constructor.name]);
              }());
            });
          };
        };

        return function (r) {
          return function (s) {
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
          };
        };
      };
    });
  };
};

var monadStateRWST = function monadStateRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_State_Class.MonadState(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (f) {
      return function (v) {
        return function (s) {
          var v1 = f(s);
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
        };
      };
    });
  };
};

var monadTellRWST = function monadTellRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
      return monadRWST(dictMonad)(dictMonoid);
    }, function (w) {
      return function (v) {
        return function (s) {
          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
        };
      };
    });
  };
};

var monadWriterRWST = function monadWriterRWST(dictMonad) {
  return function (dictMonoid) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
      return monadTellRWST(dictMonad)(dictMonoid);
    }, function (m) {
      return function (r) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
          });
        };
      };
    }, function (m) {
      return function (r) {
        return function (s) {
          return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
          });
        };
      };
    });
  };
};

var monadThrowRWST = function monadThrowRWST(dictMonadThrow) {
  return function (dictMonoid) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
      return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
    }, function (e) {
      return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
  };
};

var monadErrorRWST = function monadErrorRWST(dictMonadError) {
  return function (dictMonoid) {
    return new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
    }, function (m) {
      return function (h) {
        return RWST(function (r) {
          return function (s) {
            return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
              var v = h(e);
              return v(r)(s);
            });
          };
        });
      };
    });
  };
};

var altRWST = function altRWST(dictAlt) {
  return new Control_Alt.Alt(function () {
    return functorRWST(dictAlt.Functor0());
  }, function (v) {
    return function (v1) {
      return RWST(function (r) {
        return function (s) {
          return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
        };
      });
    };
  });
};

var plusRWST = function plusRWST(dictPlus) {
  return new Control_Plus.Plus(function () {
    return altRWST(dictPlus.Alt0());
  }, function (v) {
    return function (v1) {
      return Control_Plus.empty(dictPlus);
    };
  });
};

var alternativeRWST = function alternativeRWST(dictMonoid) {
  return function (dictAlternative) {
    return function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
        return applicativeRWST(dictMonad)(dictMonoid);
      }, function () {
        return plusRWST(dictAlternative.Plus1());
      });
    };
  };
};

module.exports = {
  RWSResult: RWSResult,
  RWST: RWST,
  runRWST: runRWST,
  evalRWST: evalRWST,
  execRWST: execRWST,
  mapRWST: mapRWST,
  withRWST: withRWST,
  newtypeRWST: newtypeRWST,
  functorRWST: functorRWST,
  applyRWST: applyRWST,
  altRWST: altRWST,
  alternativeRWST: alternativeRWST,
  bindRWST: bindRWST,
  applicativeRWST: applicativeRWST,
  monadRWST: monadRWST,
  monadTransRWST: monadTransRWST,
  lazyRWST: lazyRWST,
  monadEffectRWS: monadEffectRWS,
  monadAskRWST: monadAskRWST,
  monadReaderRWST: monadReaderRWST,
  monadStateRWST: monadStateRWST,
  monadTellRWST: monadTellRWST,
  monadWriterRWST: monadWriterRWST,
  monadThrowRWST: monadThrowRWST,
  monadErrorRWST: monadErrorRWST,
  monadRecRWST: monadRecRWST,
  plusRWST: plusRWST
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Control.Monad.State.Trans/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Lazy = require("../Control.Lazy/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");

var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var StateT = function StateT(x) {
  return x;
};

var withStateT = function withStateT(f) {
  return function (v) {
    return function ($105) {
      return v(f($105));
    };
  };
};

var runStateT = function runStateT(v) {
  return v;
};

var newtypeStateT = new Data_Newtype.Newtype(function (n) {
  return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return function (m) {
    return function (s) {
      return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
      });
    };
  };
});

var mapStateT = function mapStateT(f) {
  return function (v) {
    return function ($106) {
      return f(v($106));
    };
  };
};

var lazyStateT = new Control_Lazy.Lazy(function (f) {
  return function (s) {
    var v = f(Data_Unit.unit);
    return v(s);
  };
});

var functorStateT = function functorStateT(dictFunctor) {
  return new Data_Functor.Functor(function (f) {
    return function (v) {
      return function (s) {
        return Data_Functor.map(dictFunctor)(function (v1) {
          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
        })(v(s));
      };
    };
  });
};

var execStateT = function execStateT(dictFunctor) {
  return function (v) {
    return function (s) {
      return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
    };
  };
};

var evalStateT = function evalStateT(dictFunctor) {
  return function (v) {
    return function (s) {
      return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
    };
  };
};

var monadStateT = function monadStateT(dictMonad) {
  return new Control_Monad.Monad(function () {
    return applicativeStateT(dictMonad);
  }, function () {
    return bindStateT(dictMonad);
  });
};

var bindStateT = function bindStateT(dictMonad) {
  return new Control_Bind.Bind(function () {
    return applyStateT(dictMonad);
  }, function (v) {
    return function (f) {
      return function (s) {
        return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
          var v3 = f(v1.value0);
          return v3(v1.value1);
        });
      };
    };
  });
};

var applyStateT = function applyStateT(dictMonad) {
  return new Control_Apply.Apply(function () {
    return functorStateT(dictMonad.Bind1().Apply0().Functor0());
  }, Control_Monad.ap(monadStateT(dictMonad)));
};

var applicativeStateT = function applicativeStateT(dictMonad) {
  return new Control_Applicative.Applicative(function () {
    return applyStateT(dictMonad);
  }, function (a) {
    return function (s) {
      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
    };
  });
};

var monadAskStateT = function monadAskStateT(dictMonadAsk) {
  return new Control_Monad_Reader_Class.MonadAsk(function () {
    return monadStateT(dictMonadAsk.Monad0());
  }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};

var monadReaderStateT = function monadReaderStateT(dictMonadReader) {
  return new Control_Monad_Reader_Class.MonadReader(function () {
    return monadAskStateT(dictMonadReader.MonadAsk0());
  }, function () {
    var $107 = Control_Monad_Reader_Class.local(dictMonadReader);
    return function ($108) {
      return mapStateT($107($108));
    };
  }());
};

var monadContStateT = function monadContStateT(dictMonadCont) {
  return new Control_Monad_Cont_Class.MonadCont(function () {
    return monadStateT(dictMonadCont.Monad0());
  }, function (f) {
    return function (s) {
      return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
        var v = f(function (a) {
          return function (s$prime) {
            return c(new Data_Tuple.Tuple(a, s$prime));
          };
        });
        return v(s);
      });
    };
  });
};

var monadEffectState = function monadEffectState(dictMonadEffect) {
  return new Effect_Class.MonadEffect(function () {
    return monadStateT(dictMonadEffect.Monad0());
  }, function () {
    var $109 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
    var $110 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($111) {
      return $109($110($111));
    };
  }());
};

var monadRecStateT = function monadRecStateT(dictMonadRec) {
  return new Control_Monad_Rec_Class.MonadRec(function () {
    return monadStateT(dictMonadRec.Monad0());
  }, function (f) {
    return function (a) {
      var f$prime = function f$prime(v) {
        var v1 = f(v.value0);
        return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1(v.value1))(function (v2) {
          return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function () {
            if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
            }

            ;

            if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [v2.value0.constructor.name]);
          }());
        });
      };

      return function (s) {
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
      };
    };
  });
};

var monadStateStateT = function monadStateStateT(dictMonad) {
  return new Control_Monad_State_Class.MonadState(function () {
    return monadStateT(dictMonad);
  }, function (f) {
    return StateT(function () {
      var $112 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($113) {
        return $112(f($113));
      };
    }());
  });
};

var monadTellStateT = function monadTellStateT(dictMonadTell) {
  return new Control_Monad_Writer_Class.MonadTell(function () {
    return monadStateT(dictMonadTell.Monad0());
  }, function () {
    var $114 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0());
    var $115 = Control_Monad_Writer_Class.tell(dictMonadTell);
    return function ($116) {
      return $114($115($116));
    };
  }());
};

var monadWriterStateT = function monadWriterStateT(dictMonadWriter) {
  return new Control_Monad_Writer_Class.MonadWriter(function () {
    return monadTellStateT(dictMonadWriter.MonadTell0());
  }, function (m) {
    return function (s) {
      return Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
      });
    };
  }, function (m) {
    return function (s) {
      return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell0().Monad0().Bind1())(m(s))(function (v) {
        return Control_Applicative.pure(dictMonadWriter.MonadTell0().Monad0().Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
      }));
    };
  });
};

var monadThrowStateT = function monadThrowStateT(dictMonadThrow) {
  return new Control_Monad_Error_Class.MonadThrow(function () {
    return monadStateT(dictMonadThrow.Monad0());
  }, function (e) {
    return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
  });
};

var monadErrorStateT = function monadErrorStateT(dictMonadError) {
  return new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowStateT(dictMonadError.MonadThrow0());
  }, function (v) {
    return function (h) {
      return function (s) {
        return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
          var v1 = h(e);
          return v1(s);
        });
      };
    };
  });
};

var altStateT = function altStateT(dictMonad) {
  return function (dictAlt) {
    return new Control_Alt.Alt(function () {
      return functorStateT(dictAlt.Functor0());
    }, function (v) {
      return function (v1) {
        return function (s) {
          return Control_Alt.alt(dictAlt)(v(s))(v1(s));
        };
      };
    });
  };
};

var plusStateT = function plusStateT(dictMonad) {
  return function (dictPlus) {
    return new Control_Plus.Plus(function () {
      return altStateT(dictMonad)(dictPlus.Alt0());
    }, function (v) {
      return Control_Plus.empty(dictPlus);
    });
  };
};

var alternativeStateT = function alternativeStateT(dictMonad) {
  return function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
      return applicativeStateT(dictMonad);
    }, function () {
      return plusStateT(dictMonad)(dictAlternative.Plus1());
    });
  };
};

var monadZeroStateT = function monadZeroStateT(dictMonadZero) {
  return new Control_MonadZero.MonadZero(function () {
    return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
  }, function () {
    return monadStateT(dictMonadZero.Monad0());
  });
};

var monadPlusStateT = function monadPlusStateT(dictMonadPlus) {
  return new Control_MonadPlus.MonadPlus(function () {
    return monadZeroStateT(dictMonadPlus.MonadZero0());
  });
};

module.exports = {
  StateT: StateT,
  runStateT: runStateT,
  evalStateT: evalStateT,
  execStateT: execStateT,
  mapStateT: mapStateT,
  withStateT: withStateT,
  newtypeStateT: newtypeStateT,
  functorStateT: functorStateT,
  applyStateT: applyStateT,
  applicativeStateT: applicativeStateT,
  altStateT: altStateT,
  plusStateT: plusStateT,
  alternativeStateT: alternativeStateT,
  bindStateT: bindStateT,
  monadStateT: monadStateT,
  monadRecStateT: monadRecStateT,
  monadZeroStateT: monadZeroStateT,
  monadPlusStateT: monadPlusStateT,
  monadTransStateT: monadTransStateT,
  lazyStateT: lazyStateT,
  monadEffectState: monadEffectState,
  monadContStateT: monadContStateT,
  monadThrowStateT: monadThrowStateT,
  monadErrorStateT: monadErrorStateT,
  monadAskStateT: monadAskStateT,
  monadReaderStateT: monadReaderStateT,
  monadStateStateT: monadStateStateT,
  monadTellStateT: monadTellStateT,
  monadWriterStateT: monadWriterStateT
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Lazy/index.js":"../output/Control.Lazy/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Cont.Class/index.js":"../output/Control.Monad.Cont.Class/index.js","../Control.Monad.Error.Class/index.js":"../output/Control.Monad.Error.Class/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.State.Class/index.js":"../output/Control.Monad.State.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Class/index.js":"../output/Control.Monad.Writer.Class/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Data.Variant.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var VariantRep = function VariantRep(x) {
  return x;
};

var FProxy = function () {
  function FProxy() {}

  ;
  FProxy.value = new FProxy();
  return FProxy;
}();

var VariantTags = function VariantTags(variantTags) {
  this.variantTags = variantTags;
};

var VariantMatchCases = {};
var VariantFMatchCases = {};

var Contractable = function Contractable(contractWith) {
  this.contractWith = contractWith;
};

var variantTagsNil = new VariantTags(function (v) {
  return Data_List_Types.Nil.value;
});

var variantTags = function variantTags(dict) {
  return dict.variantTags;
};

var variantTagsCons = function variantTagsCons(dictVariantTags) {
  return function (dictIsSymbol) {
    return new VariantTags(function (v) {
      return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value));
    });
  };
};

var variantMatchNil = VariantMatchCases;

var variantMatchCons = function variantMatchCons(dictVariantMatchCases) {
  return function (dictCons) {
    return function (dictTypeEquals) {
      return VariantMatchCases;
    };
  };
};

var variantFMatchNil = VariantFMatchCases;

var variantFMatchCons = function variantFMatchCons(dictVariantFMatchCases) {
  return function (dictCons) {
    return function (dictTypeEquals) {
      return VariantFMatchCases;
    };
  };
};

var lookupToEnum = function () {
  var go = function go($copy_ix) {
    return function ($copy_v) {
      return function ($copy_v1) {
        var $tco_var_ix = $copy_ix;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(ix, v, v1) {
          if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
            if (v1.value0.cardinality > ix) {
              var v2 = v1.value0.toEnum(ix);

              if (v2 instanceof Data_Maybe.Just) {
                $tco_done = true;
                return Data_Maybe.Just.create({
                  type: v.value0,
                  value: v2.value0
                });
              }

              ;
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }

            ;

            if (Data_Boolean.otherwise) {
              $tco_var_ix = ix - v1.value0.cardinality | 0;
              $tco_var_v = v.value1;
              $copy_v1 = v1.value1;
              return;
            }

            ;
          }

          ;
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ix, $tco_var_v, $copy_v1);
        }

        ;
        return $tco_result;
      };
    };
  };

  return go;
}();

var lookupTag = function lookupTag(tag) {
  var go = function go($copy_v) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(v) {
      if (v instanceof Data_List_Types.Cons) {
        if (v.value0 === tag) {
          $tco_done = true;
          return true;
        }

        ;

        if (Data_Boolean.otherwise) {
          $copy_v = v.value1;
          return;
        }

        ;
      }

      ;

      if (v instanceof Data_List_Types.Nil) {
        $tco_done = true;
        return false;
      }

      ;
      throw new Error("Failed pattern match at Data.Variant.Internal (line 94, column 8 - line 98, column 18): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }

    ;
    return $tco_result;
  };

  return go;
};

var lookupCardinality = function () {
  var go = function go($copy_acc) {
    return function ($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, v) {
        if (v instanceof Data_List_Types.Cons) {
          $tco_var_acc = acc + v.value0.cardinality | 0;
          $copy_v = v.value1;
          return;
        }

        ;

        if (v instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return acc;
        }

        ;
        throw new Error("Failed pattern match at Data.Variant.Internal (line 216, column 12 - line 218, column 16): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }

      ;
      return $tco_result;
    };
  };

  return go(0);
}();

var impossible = function impossible(str) {
  return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
};

var lookup = function lookup(name) {
  return function (tag) {
    var go = function go($copy_v) {
      return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(v, v1) {
          if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
            if (v.value0 === tag) {
              $tco_done = true;
              return v1.value0;
            }

            ;

            if (Data_Boolean.otherwise) {
              $tco_var_v = v.value1;
              $copy_v1 = v1.value1;
              return;
            }

            ;
          }

          ;
          $tco_done = true;
          return impossible(name);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }

        ;
        return $tco_result;
      };
    };

    return go;
  };
};

var lookupEq = function lookupEq(tags) {
  return function (eqs) {
    return function (v) {
      return function (v1) {
        if (v.type === v1.type) {
          return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
        }

        ;

        if (Data_Boolean.otherwise) {
          return false;
        }

        ;
        throw new Error("Failed pattern match at Data.Variant.Internal (line 100, column 1 - line 105, column 12): " + [tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name]);
      };
    };
  };
};

var lookupOrd = function lookupOrd(tags) {
  return function (ords) {
    return function (v) {
      return function (v1) {
        var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);

        if (v3 instanceof Data_Ordering.EQ) {
          return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
        }

        ;
        return v3;
      };
    };
  };
};

var lookupFirst = function lookupFirst(name) {
  return function (f) {
    var go = function go(v) {
      return function (v1) {
        if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
          return {
            type: v.value0,
            value: f(v1.value0)
          };
        }

        ;
        return impossible(name);
      };
    };

    return go;
  };
};

var lookupFromEnum = function lookupFromEnum(v) {
  var go = function go($copy_acc) {
    return function ($copy_v1) {
      return function ($copy_v2) {
        var $tco_var_acc = $copy_acc;
        var $tco_var_v1 = $copy_v1;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(acc, v1, v2) {
          if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
            if (v1.value0 === v.type) {
              $tco_done = true;
              return acc + v2.value0.fromEnum(v.value) | 0;
            }

            ;

            if (Data_Boolean.otherwise) {
              $tco_var_acc = acc + v2.value0.cardinality | 0;
              $tco_var_v1 = v1.value1;
              $copy_v2 = v2.value1;
              return;
            }

            ;
          }

          ;
          $tco_done = true;
          return impossible("fromEnum");
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $tco_var_v1, $copy_v2);
        }

        ;
        return $tco_result;
      };
    };
  };

  return go(0);
};

var lookupLast = function lookupLast(name) {
  return function (f) {
    var go = function go($copy_v) {
      return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(v, v1) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return {
              type: v.value0,
              value: f(v1.value0)
            };
          }

          ;

          if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
            $tco_var_v = v.value1;
            $copy_v1 = v1.value1;
            return;
          }

          ;
          $tco_done = true;
          return impossible(name);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }

        ;
        return $tco_result;
      };
    };

    return go;
  };
};

var lookupPred = function lookupPred(v) {
  var go2 = function go2($copy_t1) {
    return function ($copy_b1) {
      return function ($copy_d1) {
        return function ($copy_v1) {
          return function ($copy_v2) {
            return function ($copy_v3) {
              var $tco_var_t1 = $copy_t1;
              var $tco_var_b1 = $copy_b1;
              var $tco_var_d1 = $copy_d1;
              var $tco_var_v1 = $copy_v1;
              var $tco_var_v2 = $copy_v2;
              var $tco_done = false;
              var $tco_result;

              function $tco_loop(t1, b1, d1, v1, v2, v3) {
                if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons) {
                  if (v1.value0 === v.type) {
                    var v4 = v3.value0.pred(v.value);

                    if (v4 instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Just.create({
                        type: t1,
                        value: b1.top
                      });
                    }

                    ;

                    if (v4 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return Data_Maybe.Just.create({
                        type: v.type,
                        value: v4.value0
                      });
                    }

                    ;
                    throw new Error("Failed pattern match at Data.Variant.Internal (line 184, column 11 - line 186, column 69): " + [v4.constructor.name]);
                  }

                  ;

                  if (Data_Boolean.otherwise) {
                    $tco_var_t1 = v1.value0;
                    $tco_var_b1 = v2.value0;
                    $tco_var_d1 = v3.value0;
                    $tco_var_v1 = v1.value1;
                    $tco_var_v2 = v2.value1;
                    $copy_v3 = v3.value1;
                    return;
                  }

                  ;
                }

                ;
                $tco_done = true;
                return impossible("pred");
              }

              ;

              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_t1, $tco_var_b1, $tco_var_d1, $tco_var_v1, $tco_var_v2, $copy_v3);
              }

              ;
              return $tco_result;
            };
          };
        };
      };
    };
  };

  var go1 = function go1(v1) {
    return function (v2) {
      return function (v3) {
        if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons) {
          if (v1.value0 === v.type) {
            var v4 = v3.value0.pred(v.value);

            if (v4 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
            }

            ;

            if (v4 instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create({
                type: v.type,
                value: v4.value0
              });
            }

            ;
            throw new Error("Failed pattern match at Data.Variant.Internal (line 175, column 11 - line 177, column 69): " + [v4.constructor.name]);
          }

          ;

          if (Data_Boolean.otherwise) {
            return go2(v1.value0)(v2.value0)(v3.value0)(v1.value1)(v2.value1)(v3.value1);
          }

          ;
        }

        ;
        return impossible("pred");
      };
    };
  };

  return go1;
};

var lookupSucc = function lookupSucc(v) {
  var go = function go($copy_v1) {
    return function ($copy_v2) {
      return function ($copy_v3) {
        var $tco_var_v1 = $copy_v1;
        var $tco_var_v2 = $copy_v2;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(v1, v2, v3) {
          if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons) {
            if (v1.value0 === v.type) {
              var v4 = v3.value0.succ(v.value);

              if (v4 instanceof Data_Maybe.Just) {
                $tco_done = true;
                return Data_Maybe.Just.create({
                  type: v1.value0,
                  value: v4.value0
                });
              }

              ;

              if (v4 instanceof Data_Maybe.Nothing) {
                if (v1.value1 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Cons) {
                  $tco_done = true;
                  return Data_Maybe.Just.create({
                    type: v1.value1.value0,
                    value: v2.value1.value0.bottom
                  });
                }

                ;
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }

              ;
              throw new Error("Failed pattern match at Data.Variant.Internal (line 202, column 11 - line 206, column 29): " + [v4.constructor.name]);
            }

            ;

            if (Data_Boolean.otherwise) {
              $tco_var_v1 = v1.value1;
              $tco_var_v2 = v2.value1;
              $copy_v3 = v3.value1;
              return;
            }

            ;
          }

          ;
          $tco_done = true;
          return impossible("succ");
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
        }

        ;
        return $tco_result;
      };
    };
  };

  return go;
};

var contractWithInstance = function contractWithInstance(dictRowToList) {
  return function (dictUnion) {
    return function (dictVariantTags) {
      return new Contractable(function (dictAlternative) {
        return function (v) {
          return function (v1) {
            return function (tag) {
              return function (a) {
                if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value))) {
                  return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                }

                ;

                if (Data_Boolean.otherwise) {
                  return Control_Plus.empty(dictAlternative.Plus1());
                }

                ;
                throw new Error("Failed pattern match at Data.Variant.Internal (line 254, column 1 - line 263, column 24): " + [v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name]);
              };
            };
          };
        };
      });
    };
  };
};

var contractWith = function contractWith(dict) {
  return dict.contractWith;
};

module.exports = {
  FProxy: FProxy,
  VariantRep: VariantRep,
  VariantTags: VariantTags,
  variantTags: variantTags,
  Contractable: Contractable,
  contractWith: contractWith,
  VariantMatchCases: VariantMatchCases,
  VariantFMatchCases: VariantFMatchCases,
  lookup: lookup,
  lookupTag: lookupTag,
  lookupEq: lookupEq,
  lookupOrd: lookupOrd,
  lookupLast: lookupLast,
  lookupFirst: lookupFirst,
  lookupPred: lookupPred,
  lookupSucc: lookupSucc,
  lookupCardinality: lookupCardinality,
  lookupFromEnum: lookupFromEnum,
  lookupToEnum: lookupToEnum,
  impossible: impossible,
  variantMatchCons: variantMatchCons,
  variantMatchNil: variantMatchNil,
  variantFMatchCons: variantFMatchCons,
  variantFMatchNil: variantFMatchNil,
  variantTagsNil: variantTagsNil,
  variantTagsCons: variantTagsCons,
  contractWithInstance: contractWithInstance
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Partial.Unsafe/index.js":"../output/Partial.Unsafe/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js"}],"../output/Type.Proxy/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");

var Data_Bounded = require("../Data.Bounded/index.js");

var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Ring = require("../Data.Ring/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Proxy3 = function () {
  function Proxy3() {}

  ;
  Proxy3.value = new Proxy3();
  return Proxy3;
}();

var Proxy2 = function () {
  function Proxy2() {}

  ;
  Proxy2.value = new Proxy2();
  return Proxy2;
}();

var $$Proxy = function () {
  function $$Proxy() {}

  ;
  $$Proxy.value = new $$Proxy();
  return $$Proxy;
}();

var showProxy3 = new Data_Show.Show(function (v) {
  return "Proxy3";
});
var showProxy2 = new Data_Show.Show(function (v) {
  return "Proxy2";
});
var showProxy = new Data_Show.Show(function (v) {
  return "Proxy";
});
var semiringProxy3 = new Data_Semiring.Semiring(function (v) {
  return function (v1) {
    return Proxy3.value;
  };
}, function (v) {
  return function (v1) {
    return Proxy3.value;
  };
}, Proxy3.value, Proxy3.value);
var semiringProxy2 = new Data_Semiring.Semiring(function (v) {
  return function (v1) {
    return Proxy2.value;
  };
}, function (v) {
  return function (v1) {
    return Proxy2.value;
  };
}, Proxy2.value, Proxy2.value);
var semiringProxy = new Data_Semiring.Semiring(function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
}, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
}, $$Proxy.value, $$Proxy.value);
var semigroupProxy3 = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return Proxy3.value;
  };
});
var semigroupProxy2 = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return Proxy2.value;
  };
});
var semigroupProxy = new Data_Semigroup.Semigroup(function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
});
var ringProxy3 = new Data_Ring.Ring(function () {
  return semiringProxy3;
}, function (v) {
  return function (v1) {
    return Proxy3.value;
  };
});
var ringProxy2 = new Data_Ring.Ring(function () {
  return semiringProxy2;
}, function (v) {
  return function (v1) {
    return Proxy2.value;
  };
});
var ringProxy = new Data_Ring.Ring(function () {
  return semiringProxy;
}, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
});
var heytingAlgebraProxy3 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
  return function (v1) {
    return Proxy3.value;
  };
}, function (v) {
  return function (v1) {
    return Proxy3.value;
  };
}, Proxy3.value, function (v) {
  return function (v1) {
    return Proxy3.value;
  };
}, function (v) {
  return Proxy3.value;
}, Proxy3.value);
var heytingAlgebraProxy2 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
  return function (v1) {
    return Proxy2.value;
  };
}, function (v) {
  return function (v1) {
    return Proxy2.value;
  };
}, Proxy2.value, function (v) {
  return function (v1) {
    return Proxy2.value;
  };
}, function (v) {
  return Proxy2.value;
}, Proxy2.value);
var heytingAlgebraProxy = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
}, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
}, $$Proxy.value, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
}, function (v) {
  return $$Proxy.value;
}, $$Proxy.value);
var functorProxy = new Data_Functor.Functor(function (f) {
  return function (m) {
    return $$Proxy.value;
  };
});
var eqProxy3 = new Data_Eq.Eq(function (x) {
  return function (y) {
    return true;
  };
});
var ordProxy3 = new Data_Ord.Ord(function () {
  return eqProxy3;
}, function (x) {
  return function (y) {
    return Data_Ordering.EQ.value;
  };
});
var eqProxy2 = new Data_Eq.Eq(function (x) {
  return function (y) {
    return true;
  };
});
var ordProxy2 = new Data_Ord.Ord(function () {
  return eqProxy2;
}, function (x) {
  return function (y) {
    return Data_Ordering.EQ.value;
  };
});
var eqProxy = new Data_Eq.Eq(function (x) {
  return function (y) {
    return true;
  };
});
var ordProxy = new Data_Ord.Ord(function () {
  return eqProxy;
}, function (x) {
  return function (y) {
    return Data_Ordering.EQ.value;
  };
});
var discardProxy3 = new Control_Bind.Discard(function (dictBind) {
  return Control_Bind.bind(dictBind);
});
var discardProxy2 = new Control_Bind.Discard(function (dictBind) {
  return Control_Bind.bind(dictBind);
});
var discardProxy = new Control_Bind.Discard(function (dictBind) {
  return Control_Bind.bind(dictBind);
});
var commutativeRingProxy3 = new Data_CommutativeRing.CommutativeRing(function () {
  return ringProxy3;
});
var commutativeRingProxy2 = new Data_CommutativeRing.CommutativeRing(function () {
  return ringProxy2;
});
var commutativeRingProxy = new Data_CommutativeRing.CommutativeRing(function () {
  return ringProxy;
});
var boundedProxy3 = new Data_Bounded.Bounded(function () {
  return ordProxy3;
}, Proxy3.value, Proxy3.value);
var boundedProxy2 = new Data_Bounded.Bounded(function () {
  return ordProxy2;
}, Proxy2.value, Proxy2.value);
var boundedProxy = new Data_Bounded.Bounded(function () {
  return ordProxy;
}, $$Proxy.value, $$Proxy.value);
var booleanAlgebraProxy3 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
  return heytingAlgebraProxy3;
});
var booleanAlgebraProxy2 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
  return heytingAlgebraProxy2;
});
var booleanAlgebraProxy = new Data_BooleanAlgebra.BooleanAlgebra(function () {
  return heytingAlgebraProxy;
});
var applyProxy = new Control_Apply.Apply(function () {
  return functorProxy;
}, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
});
var bindProxy = new Control_Bind.Bind(function () {
  return applyProxy;
}, function (v) {
  return function (v1) {
    return $$Proxy.value;
  };
});
var applicativeProxy = new Control_Applicative.Applicative(function () {
  return applyProxy;
}, function (v) {
  return $$Proxy.value;
});
var monadProxy = new Control_Monad.Monad(function () {
  return applicativeProxy;
}, function () {
  return bindProxy;
});
module.exports = {
  "Proxy": $$Proxy,
  Proxy2: Proxy2,
  Proxy3: Proxy3,
  eqProxy: eqProxy,
  functorProxy: functorProxy,
  ordProxy: ordProxy,
  applicativeProxy: applicativeProxy,
  applyProxy: applyProxy,
  bindProxy: bindProxy,
  booleanAlgebraProxy: booleanAlgebraProxy,
  boundedProxy: boundedProxy,
  commutativeRingProxy: commutativeRingProxy,
  discardProxy: discardProxy,
  heytingAlgebraProxy: heytingAlgebraProxy,
  monadProxy: monadProxy,
  ringProxy: ringProxy,
  semigroupProxy: semigroupProxy,
  semiringProxy: semiringProxy,
  showProxy: showProxy,
  eqProxy2: eqProxy2,
  ordProxy2: ordProxy2,
  booleanAlgebraProxy2: booleanAlgebraProxy2,
  boundedProxy2: boundedProxy2,
  commutativeRingProxy2: commutativeRingProxy2,
  discardProxy2: discardProxy2,
  heytingAlgebraProxy2: heytingAlgebraProxy2,
  ringProxy2: ringProxy2,
  semigroupProxy2: semigroupProxy2,
  semiringProxy2: semiringProxy2,
  showProxy2: showProxy2,
  eqProxy3: eqProxy3,
  ordProxy3: ordProxy3,
  booleanAlgebraProxy3: booleanAlgebraProxy3,
  boundedProxy3: boundedProxy3,
  commutativeRingProxy3: commutativeRingProxy3,
  discardProxy3: discardProxy3,
  heytingAlgebraProxy3: heytingAlgebraProxy3,
  ringProxy3: ringProxy3,
  semigroupProxy3: semigroupProxy3,
  semiringProxy3: semiringProxy3,
  showProxy3: showProxy3
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Data.BooleanAlgebra/index.js":"../output/Data.BooleanAlgebra/index.js","../Data.Bounded/index.js":"../output/Data.Bounded/index.js","../Data.CommutativeRing/index.js":"../output/Data.CommutativeRing/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.HeytingAlgebra/index.js":"../output/Data.HeytingAlgebra/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Ring/index.js":"../output/Data.Ring/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Data.Functor.Variant/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var Record_Unsafe = require("../Record.Unsafe/index.js");

var Type_Data_Row = require("../Type.Data.Row/index.js");

var Type_Data_RowList = require("../Type.Data.RowList/index.js");

var Type_Proxy = require("../Type.Proxy/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var VariantFRep = function VariantFRep(x) {
  return x;
};

var UnvariantF = function UnvariantF(x) {
  return x;
};

var VariantFShows = function VariantFShows(variantFShows) {
  this.variantFShows = variantFShows;
};

var FoldableVFRL = function FoldableVFRL(foldMapVFRL, foldlVFRL, foldrVFRL) {
  this.foldMapVFRL = foldMapVFRL;
  this.foldlVFRL = foldlVFRL;
  this.foldrVFRL = foldrVFRL;
};

var TraversableVFRL = function TraversableVFRL(FoldableVFRL0, traverseVFRL) {
  this.FoldableVFRL0 = FoldableVFRL0;
  this.traverseVFRL = traverseVFRL;
};

var variantFShows = function variantFShows(dict) {
  return dict.variantFShows;
};

var unvariantF = function unvariantF(v) {
  return function (f) {
    return function (dictIsSymbol) {
      return function (dictCons) {
        return function (dictFunctor) {
          return f(dictIsSymbol)()(dictFunctor);
        };
      };
    }({
      reflectSymbol: Data_Function["const"](v.type)
    })({})({
      map: v.map
    })(Data_Symbol.SProxy.value)(v.value);
  };
};

var traverseVFRL = function traverseVFRL(dict) {
  return dict.traverseVFRL;
};

var showVariantFNil = new VariantFShows(function (v) {
  return function (v1) {
    return Data_List_Types.Nil.value;
  };
});

var showVariantFCons = function showVariantFCons(dictVariantFShows) {
  return function (dictTypeEquals) {
    return function (dictShow) {
      return function (dictShow1) {
        return new VariantFShows(function (v) {
          return function (p) {
            return new Data_List_Types.Cons(Data_Show.show(dictShow), variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(p));
          };
        });
      };
    };
  };
};

var showVariantF = function showVariantF(dictRowToList) {
  return function (dictVariantTags) {
    return function (dictVariantFShows) {
      return function (dictShow) {
        return new Data_Show.Show(function (v1) {
          var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
          var shows = variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(Type_Proxy["Proxy"].value);
          var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
          return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
        });
      };
    };
  };
};

var onMatch = function onMatch(dictRowToList) {
  return function (dictVariantFMatchCases) {
    return function (dictUnion) {
      return function (r) {
        return function (k) {
          return function (v) {
            if (Record_Unsafe.unsafeHas(v.type)(r)) {
              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
            }

            ;
            return k(v);
          };
        };
      };
    };
  };
};

var on = function on(dictCons) {
  return function (dictIsSymbol) {
    return function (p) {
      return function (f) {
        return function (g) {
          return function (r) {
            if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
              return f(r.value);
            }

            ;
            return g(r);
          };
        };
      };
    };
  };
};

var prj = function prj(dictCons) {
  return function (dictAlternative) {
    return function (dictIsSymbol) {
      return function (p) {
        return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
      };
    };
  };
};

var inj = function inj(dictCons) {
  return function (dictIsSymbol) {
    return function (dictFunctor) {
      return function (p) {
        return function (value) {
          return {
            type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
            value: value,
            map: Data_Functor.map(dictFunctor)
          };
        };
      };
    };
  };
};

var revariantF = function revariantF(v) {
  return v(function (dictIsSymbol) {
    return function (dictCons) {
      return function (dictFunctor) {
        return inj()(dictIsSymbol)(dictFunctor);
      };
    };
  });
};

var functorVariantF = new Data_Functor.Functor(function (f) {
  return function (a) {
    return {
      type: a.type,
      value: a.map(f)(a.value),
      map: a.map
    };
  };
});

var foldrVFRL = function foldrVFRL(dict) {
  return dict.foldrVFRL;
};

var foldlVFRL = function foldlVFRL(dict) {
  return dict.foldlVFRL;
};

var foldMapVFRL = function foldMapVFRL(dict) {
  return dict.foldMapVFRL;
};

var foldableCons = function foldableCons(dictIsSymbol) {
  return function (dictFoldable) {
    return function (dictFoldableVFRL) {
      return function (dictCons) {
        return new FoldableVFRL(function (dictMonoid) {
          return function (v) {
            return function (f) {
              return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value)(f));
            };
          };
        }, function (v) {
          return function (f) {
            return function (b) {
              return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldl(dictFoldable)(f)(b))(foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
            };
          };
        }, function (v) {
          return function (f) {
            return function (b) {
              return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldr(dictFoldable)(f)(b))(foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
            };
          };
        });
      };
    };
  };
};

var foldableVariantF = function foldableVariantF(dictRowToList) {
  return function (dictFoldableVFRL) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
      return foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value);
    }, foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value), foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value));
  };
};

var traversableVariantF = function traversableVariantF(dictRowToList) {
  return function (dictTraversableVFRL) {
    return new Data_Traversable.Traversable(function () {
      return foldableVariantF()(dictTraversableVFRL.FoldableVFRL0());
    }, function () {
      return functorVariantF;
    }, function (dictApplicative) {
      return Data_Traversable.sequenceDefault(traversableVariantF()(dictTraversableVFRL))(dictApplicative);
    }, function (dictApplicative) {
      return traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value);
    });
  };
};

var expand = function expand(dictUnion) {
  return Unsafe_Coerce.unsafeCoerce;
};

var traversableCons = function traversableCons(dictIsSymbol) {
  return function (dictTraversable) {
    return function (dictTraversableVFRL) {
      return function (dictCons) {
        return function (dictUnion) {
          return new TraversableVFRL(foldableCons(dictIsSymbol)(dictTraversable.Foldable1())(dictTraversableVFRL.FoldableVFRL0()), function (dictApplicative) {
            return function (v) {
              return function (f) {
                return on()(dictIsSymbol)(Data_Symbol.SProxy.value)(function () {
                  var $86 = Data_Functor.map(dictApplicative.Apply0().Functor0())(inj()(dictIsSymbol)(dictTraversable.Functor0())(Data_Symbol.SProxy.value));
                  var $87 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(f);
                  return function ($88) {
                    return $86($87($88));
                  };
                }())(function () {
                  var $89 = Data_Functor.map(dictApplicative.Apply0().Functor0())(expand());
                  var $90 = traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value)(f);
                  return function ($91) {
                    return $89($90($91));
                  };
                }());
              };
            };
          });
        };
      };
    };
  };
};

var $$default = function $$default(a) {
  return function (v) {
    return a;
  };
};

var contract = function contract(dictAlternative) {
  return function (dictContractable) {
    return function (v) {
      return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
    };
  };
};

var case_ = function case_(r) {
  return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
};

var foldableNil = new FoldableVFRL(function (dictMonoid) {
  return function (v) {
    return function (v1) {
      return case_;
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return case_;
    };
  };
}, function (v) {
  return function (v1) {
    return function (v2) {
      return case_;
    };
  };
});

var match = function match(dictRowToList) {
  return function (dictVariantFMatchCases) {
    return function (dictUnion) {
      return function (r) {
        return onMatch()()()(r)(case_);
      };
    };
  };
};

var traversableNil = new TraversableVFRL(function () {
  return foldableNil;
}, function (dictApplicative) {
  return function (v) {
    return function (f) {
      return case_;
    };
  };
});
module.exports = {
  inj: inj,
  prj: prj,
  on: on,
  onMatch: onMatch,
  case_: case_,
  match: match,
  "default": $$default,
  expand: expand,
  contract: contract,
  UnvariantF: UnvariantF,
  unvariantF: unvariantF,
  revariantF: revariantF,
  VariantFShows: VariantFShows,
  variantFShows: variantFShows,
  TraversableVFRL: TraversableVFRL,
  FoldableVFRL: FoldableVFRL,
  traverseVFRL: traverseVFRL,
  foldrVFRL: foldrVFRL,
  foldlVFRL: foldlVFRL,
  foldMapVFRL: foldMapVFRL,
  functorVariantF: functorVariantF,
  foldableNil: foldableNil,
  foldableCons: foldableCons,
  traversableNil: traversableNil,
  traversableCons: traversableCons,
  foldableVariantF: foldableVariantF,
  traversableVariantF: traversableVariantF,
  showVariantFNil: showVariantFNil,
  showVariantFCons: showVariantFCons,
  showVariantF: showVariantF
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Variant.Internal/index.js":"../output/Data.Variant.Internal/index.js","../Partial.Unsafe/index.js":"../output/Partial.Unsafe/index.js","../Record.Unsafe/index.js":"../output/Record.Unsafe/index.js","../Type.Data.Row/index.js":"../output/Type.Data.Row/index.js","../Type.Data.RowList/index.js":"../output/Type.Data.RowList/index.js","../Type.Proxy/index.js":"../output/Type.Proxy/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Graphics.CanvasAction.Types/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Effect_Class = require("../Effect.Class/index.js");

var runAction = function runAction(dictMonadEffect) {
  return function (ctx) {
    return function (v) {
      return Effect_Class.liftEffect(dictMonadEffect)(v(ctx));
    };
  };
};

module.exports = {
  runAction: runAction
};
},{"../Effect.Class/index.js":"../output/Effect.Class/index.js"}],"../output/Data.CatQueue/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List = require("../Data.List/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var CatQueue = function () {
  function CatQueue(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CatQueue.create = function (value0) {
    return function (value1) {
      return new CatQueue(value0, value1);
    };
  };

  return CatQueue;
}();

var unsnoc = function unsnoc($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v.value1 instanceof Data_List_Types.Cons) {
      $tco_done = true;
      return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
    }

    ;

    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v.value1 instanceof Data_List_Types.Nil) {
      $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
      return;
    }

    ;
    throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [v.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var uncons = function uncons($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
      $tco_done = true;
      return Data_Maybe.Nothing.value;
    }

    ;

    if (v.value0 instanceof Data_List_Types.Nil) {
      $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
      return;
    }

    ;

    if (v.value0 instanceof Data_List_Types.Cons) {
      $tco_done = true;
      return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
    }

    ;
    throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [v.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var snoc = function snoc(v) {
  return function (a) {
    return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
  };
};

var showCatQueue = function showCatQueue(dictShow) {
  return new Data_Show.Show(function (v) {
    return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
  });
};

var $$null = function $$null(v) {
  if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
    return true;
  }

  ;
  return false;
};

var length = function length(v) {
  return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
};

var functorCatQueue = new Data_Functor.Functor(function (f) {
  return function (v) {
    return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
  };
});
var foldableCatQueue = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
}, function (f) {
  var go = function go($copy_acc) {
    return function ($copy_q) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, q) {
        var v = uncons(q);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_acc = f(acc)(v.value0.value0);
          $copy_q = v.value0.value1;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return acc;
        }

        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_q);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return Data_Foldable.foldrDefault(foldableCatQueue)(f);
});
var semigroupCatQueue = new Data_Semigroup.Semigroup(Data_Foldable.foldl(foldableCatQueue)(snoc));
var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
var monoidCatQueue = new Data_Monoid.Monoid(function () {
  return semigroupCatQueue;
}, empty);
var singleton = snoc(empty);

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (f) {
    return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
  };
};

var traversableCatQueue = new Data_Traversable.Traversable(function () {
  return foldableCatQueue;
}, function () {
  return functorCatQueue;
}, function (dictApplicative) {
  return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
}, function (dictApplicative) {
  return function (f) {
    var $100 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty));
    var $101 = Data_Foldable.foldl(foldableCatQueue)(function (acc) {
      var $103 = Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc);
      return function ($104) {
        return $103(f($104));
      };
    })(Control_Applicative.pure(dictApplicative)(empty));
    return function ($102) {
      return $100($101($102));
    };
  };
});
var unfoldable1CatQueue = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return snoc(memo)(v.value0);
          }

          ;

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = snoc(memo)(v.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(empty);
  };
});
var unfoldableCatQueue = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1CatQueue;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return memo;
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = snoc(memo)(v.value0.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(empty);
  };
});

var cqEq = function cqEq(dictEq) {
  var elemEq = Data_Eq.eq(dictEq);

  var go = function go($copy_xs) {
    return function ($copy_ys) {
      var $tco_var_xs = $copy_xs;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(xs, ys) {
        var v = uncons(ys);
        var v1 = uncons(xs);

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0)) {
          $tco_var_xs = v1.value0.value1;
          $copy_ys = v.value0.value1;
          return;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return true;
        }

        ;
        $tco_done = true;
        return false;
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var eqCatQueue = function eqCatQueue(dictEq) {
  return new Data_Eq.Eq(cqEq(dictEq));
};

var cqCompare = function cqCompare(dictOrd) {
  var elemCompare = Data_Ord.compare(dictOrd);

  var go = function go($copy_xs) {
    return function ($copy_ys) {
      var $tco_var_xs = $copy_xs;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(xs, ys) {
        var v = uncons(ys);
        var v1 = uncons(xs);

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
          var v2 = elemCompare(v1.value0.value0)(v.value0.value0);

          if (v2 instanceof Data_Ordering.EQ) {
            $tco_var_xs = v1.value0.value1;
            $copy_ys = v.value0.value1;
            return;
          }

          ;
          $tco_done = true;
          return v2;
        }

        ;

        if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Ordering.GT.value;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
          $tco_done = true;
          return Data_Ordering.LT.value;
        }

        ;

        if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return Data_Ordering.EQ.value;
        }

        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [v1.constructor.name, v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
      }

      ;
      return $tco_result;
    };
  };

  return go;
};

var ordCatQueue = function ordCatQueue(dictOrd) {
  return new Data_Ord.Ord(function () {
    return eqCatQueue(dictOrd.Eq0());
  }, cqCompare(dictOrd));
};

var cons = function cons(a) {
  return function (v) {
    return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
  };
};

var monadCatQueue = new Control_Monad.Monad(function () {
  return applicativeCatQueue;
}, function () {
  return bindCatQueue;
});
var bindCatQueue = new Control_Bind.Bind(function () {
  return applyCatQueue;
}, Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)));
var applyCatQueue = new Control_Apply.Apply(function () {
  return functorCatQueue;
}, Control_Monad.ap(monadCatQueue));
var applicativeCatQueue = new Control_Applicative.Applicative(function () {
  return applyCatQueue;
}, singleton);
var altCatQueue = new Control_Alt.Alt(function () {
  return functorCatQueue;
}, Data_Semigroup.append(semigroupCatQueue));
var plusCatQueue = new Control_Plus.Plus(function () {
  return altCatQueue;
}, empty);
var alternativeCatQueue = new Control_Alternative.Alternative(function () {
  return applicativeCatQueue;
}, function () {
  return plusCatQueue;
});
var monadZeroCatQueue = new Control_MonadZero.MonadZero(function () {
  return alternativeCatQueue;
}, function () {
  return monadCatQueue;
});
var monadPlusCatQueue = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroCatQueue;
});
module.exports = {
  CatQueue: CatQueue,
  empty: empty,
  "null": $$null,
  singleton: singleton,
  length: length,
  cons: cons,
  snoc: snoc,
  uncons: uncons,
  unsnoc: unsnoc,
  fromFoldable: fromFoldable,
  eqCatQueue: eqCatQueue,
  ordCatQueue: ordCatQueue,
  semigroupCatQueue: semigroupCatQueue,
  monoidCatQueue: monoidCatQueue,
  showCatQueue: showCatQueue,
  foldableCatQueue: foldableCatQueue,
  unfoldable1CatQueue: unfoldable1CatQueue,
  unfoldableCatQueue: unfoldableCatQueue,
  traversableCatQueue: traversableCatQueue,
  functorCatQueue: functorCatQueue,
  applyCatQueue: applyCatQueue,
  applicativeCatQueue: applicativeCatQueue,
  bindCatQueue: bindCatQueue,
  monadCatQueue: monadCatQueue,
  altCatQueue: altCatQueue,
  plusCatQueue: plusCatQueue,
  alternativeCatQueue: alternativeCatQueue,
  monadZeroCatQueue: monadZeroCatQueue,
  monadPlusCatQueue: monadPlusCatQueue
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.List/index.js":"../output/Data.List/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Data.CatList/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_MonadPlus = require("../Control.MonadPlus/index.js");

var Control_MonadZero = require("../Control.MonadZero/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_CatQueue = require("../Data.CatQueue/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_List_Types = require("../Data.List.Types/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Data_Unfoldable = require("../Data.Unfoldable/index.js");

var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");

var CatNil = function () {
  function CatNil() {}

  ;
  CatNil.value = new CatNil();
  return CatNil;
}();

var CatCons = function () {
  function CatCons(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  CatCons.create = function (value0) {
    return function (value1) {
      return new CatCons(value0, value1);
    };
  };

  return CatCons;
}();

var showCatList = function showCatList(dictShow) {
  return new Data_Show.Show(function (v) {
    if (v instanceof CatNil) {
      return "CatNil";
    }

    ;

    if (v instanceof CatCons) {
      return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 150, column 71): " + [v.constructor.name]);
  });
};

var $$null = function $$null(v) {
  if (v instanceof CatNil) {
    return true;
  }

  ;
  return false;
};

var link = function link(v) {
  return function (v1) {
    if (v instanceof CatNil) {
      return v1;
    }

    ;

    if (v1 instanceof CatNil) {
      return v;
    }

    ;

    if (v instanceof CatCons) {
      return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [v.constructor.name, v1.constructor.name]);
  };
};

var foldr = function foldr(k) {
  return function (b) {
    return function (q) {
      var foldl = function foldl($copy_v) {
        return function ($copy_c) {
          return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_var_c = $copy_c;
            var $tco_done = false;
            var $tco_result;

            function $tco_loop(v, c, v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return c;
              }

              ;

              if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v;
                $tco_var_c = v(c)(v1.value0);
                $copy_v1 = v1.value1;
                return;
              }

              ;
              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [v.constructor.name, c.constructor.name, v1.constructor.name]);
            }

            ;

            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
            }

            ;
            return $tco_result;
          };
        };
      };

      var go = function go($copy_xs) {
        return function ($copy_ys) {
          var $tco_var_xs = $copy_xs;
          var $tco_done = false;
          var $tco_result;

          function $tco_loop(xs, ys) {
            var v = Data_CatQueue.uncons(xs);

            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return foldl(function (x) {
                return function (i) {
                  return i(x);
                };
              })(b)(ys);
            }

            ;

            if (v instanceof Data_Maybe.Just) {
              $tco_var_xs = v.value0.value1;
              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
              return;
            }

            ;
            throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [v.constructor.name]);
          }

          ;

          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_xs, $copy_ys);
          }

          ;
          return $tco_result;
        };
      };

      return go(q)(Data_List_Types.Nil.value);
    };
  };
};

var uncons = function uncons(v) {
  if (v instanceof CatNil) {
    return Data_Maybe.Nothing.value;
  }

  ;

  if (v instanceof CatCons) {
    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, function () {
      var $44 = Data_CatQueue["null"](v.value1);

      if ($44) {
        return CatNil.value;
      }

      ;
      return foldr(link)(CatNil.value)(v.value1);
    }()));
  }

  ;
  throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [v.constructor.name]);
};

var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
  return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
}, function (f) {
  var go = function go($copy_acc) {
    return function ($copy_q) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(acc, q) {
        var v = uncons(q);

        if (v instanceof Data_Maybe.Just) {
          $tco_var_acc = f(acc)(v.value0.value0);
          $copy_q = v.value0.value1;
          return;
        }

        ;

        if (v instanceof Data_Maybe.Nothing) {
          $tco_done = true;
          return acc;
        }

        ;
        throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_q);
      }

      ;
      return $tco_result;
    };
  };

  return go;
}, function (f) {
  return function (s) {
    return function (l) {
      return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
    };
  };
});
var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);

var foldMap = function foldMap(dictMonoid) {
  return function (f) {
    return function (v) {
      if (v instanceof CatNil) {
        return Data_Monoid.mempty(dictMonoid);
      }

      ;

      if (v instanceof CatCons) {
        var d = function () {
          var $53 = Data_CatQueue["null"](v.value1);

          if ($53) {
            return CatNil.value;
          }

          ;
          return foldr(link)(CatNil.value)(v.value1);
        }();

        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
      }

      ;
      throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [f.constructor.name, v.constructor.name]);
    };
  };
};

var empty = CatNil.value;
var append = link;

var cons = function cons(a) {
  return function (cat) {
    return append(new CatCons(a, Data_CatQueue.empty))(cat);
  };
};

var functorCatList = new Data_Functor.Functor(function (v) {
  return function (v1) {
    if (v1 instanceof CatNil) {
      return CatNil.value;
    }

    ;

    if (v1 instanceof CatCons) {
      var d = function () {
        var $58 = Data_CatQueue["null"](v1.value1);

        if ($58) {
          return CatNil.value;
        }

        ;
        return foldr(link)(CatNil.value)(v1.value1);
      }();

      return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 189, column 26): " + [v.constructor.name, v1.constructor.name]);
  };
});

var singleton = function singleton(a) {
  return cons(a)(CatNil.value);
};

var traversableCatList = new Data_Traversable.Traversable(function () {
  return foldableCatList;
}, function () {
  return functorCatList;
}, function (dictApplicative) {
  return function (v) {
    if (v instanceof CatNil) {
      return Control_Applicative.pure(dictApplicative)(CatNil.value);
    }

    ;

    if (v instanceof CatCons) {
      var d = function () {
        var $62 = Data_CatQueue["null"](v.value1);

        if ($62) {
          return CatNil.value;
        }

        ;
        return foldr(link)(CatNil.value)(v.value1);
      }();

      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
    }

    ;
    throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name]);
  };
}, function (dictApplicative) {
  return function (v) {
    return function (v1) {
      if (v1 instanceof CatNil) {
        return Control_Applicative.pure(dictApplicative)(CatNil.value);
      }

      ;

      if (v1 instanceof CatCons) {
        var d = function () {
          var $67 = Data_CatQueue["null"](v1.value1);

          if ($67) {
            return CatNil.value;
          }

          ;
          return foldr(link)(CatNil.value)(v1.value1);
        }();

        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
      }

      ;
      throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name, v1.constructor.name]);
    };
  };
});
var semigroupCatList = new Data_Semigroup.Semigroup(append);
var monoidCatList = new Data_Monoid.Monoid(function () {
  return semigroupCatList;
}, CatNil.value);
var monadCatList = new Control_Monad.Monad(function () {
  return applicativeCatList;
}, function () {
  return bindCatList;
});
var bindCatList = new Control_Bind.Bind(function () {
  return applyCatList;
}, Data_Function.flip(foldMap(monoidCatList)));
var applyCatList = new Control_Apply.Apply(function () {
  return functorCatList;
}, Control_Monad.ap(monadCatList));
var applicativeCatList = new Control_Applicative.Applicative(function () {
  return applyCatList;
}, singleton);

var fromFoldable = function fromFoldable(dictFoldable) {
  return function (f) {
    return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
  };
};

var snoc = function snoc(cat) {
  return function (a) {
    return append(cat)(new CatCons(a, Data_CatQueue.empty));
  };
};

var unfoldable1CatList = new Data_Unfoldable1.Unfoldable1(function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v.value1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return snoc(memo)(v.value0);
          }

          ;

          if (v.value1 instanceof Data_Maybe.Just) {
            $tco_var_source = v.value1.value0;
            $copy_memo = snoc(memo)(v.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(CatNil.value);
  };
});
var unfoldableCatList = new Data_Unfoldable.Unfoldable(function () {
  return unfoldable1CatList;
}, function (f) {
  return function (b) {
    var go = function go($copy_source) {
      return function ($copy_memo) {
        var $tco_var_source = $copy_source;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(source, memo) {
          var v = f(source);

          if (v instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return memo;
          }

          ;

          if (v instanceof Data_Maybe.Just) {
            $tco_var_source = v.value0.value1;
            $copy_memo = snoc(memo)(v.value0.value0);
            return;
          }

          ;
          throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_source, $copy_memo);
        }

        ;
        return $tco_result;
      };
    };

    return go(b)(CatNil.value);
  };
});
var altCatList = new Control_Alt.Alt(function () {
  return functorCatList;
}, append);
var plusCatList = new Control_Plus.Plus(function () {
  return altCatList;
}, empty);
var alternativeCatList = new Control_Alternative.Alternative(function () {
  return applicativeCatList;
}, function () {
  return plusCatList;
});
var monadZeroCatList = new Control_MonadZero.MonadZero(function () {
  return alternativeCatList;
}, function () {
  return monadCatList;
});
var monadPlusCatList = new Control_MonadPlus.MonadPlus(function () {
  return monadZeroCatList;
});
module.exports = {
  CatNil: CatNil,
  CatCons: CatCons,
  empty: empty,
  "null": $$null,
  singleton: singleton,
  length: length,
  append: append,
  cons: cons,
  snoc: snoc,
  uncons: uncons,
  fromFoldable: fromFoldable,
  semigroupCatList: semigroupCatList,
  monoidCatList: monoidCatList,
  showCatList: showCatList,
  foldableCatList: foldableCatList,
  unfoldableCatList: unfoldableCatList,
  unfoldable1CatList: unfoldable1CatList,
  traversableCatList: traversableCatList,
  functorCatList: functorCatList,
  applyCatList: applyCatList,
  applicativeCatList: applicativeCatList,
  bindCatList: bindCatList,
  monadCatList: monadCatList,
  altCatList: altCatList,
  plusCatList: plusCatList,
  alternativeCatList: alternativeCatList,
  monadZeroCatList: monadZeroCatList,
  monadPlusCatList: monadPlusCatList
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.MonadPlus/index.js":"../output/Control.MonadPlus/index.js","../Control.MonadZero/index.js":"../output/Control.MonadZero/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.CatQueue/index.js":"../output/Data.CatQueue/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.List.Types/index.js":"../output/Data.List.Types/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Data.Unfoldable/index.js":"../output/Data.Unfoldable/index.js","../Data.Unfoldable1/index.js":"../output/Data.Unfoldable1/index.js"}],"../output/Control.Monad.Free/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Data_CatList = require("../Data.CatList/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Monoid = require("../Data.Monoid/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Semigroup = require("../Data.Semigroup/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var ExpF = function ExpF(x) {
  return x;
};

var Free = function () {
  function Free(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Free.create = function (value0) {
    return function (value1) {
      return new Free(value0, value1);
    };
  };

  return Free;
}();

var Return = function () {
  function Return(value0) {
    this.value0 = value0;
  }

  ;

  Return.create = function (value0) {
    return new Return(value0);
  };

  return Return;
}();

var Bind = function () {
  function Bind(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }

  ;

  Bind.create = function (value0) {
    return function (value1) {
      return new Bind(value0, value1);
    };
  };

  return Bind;
}();

var toView = function toView($copy_v) {
  var $tco_done = false;
  var $tco_result;

  function $tco_loop(v) {
    var runExpF = function runExpF(v2) {
      return v2;
    };

    var concatF = function concatF(v2) {
      return function (r) {
        return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
      };
    };

    if (v.value0 instanceof Return) {
      var v2 = Data_CatList.uncons(v.value1);

      if (v2 instanceof Data_Maybe.Nothing) {
        $tco_done = true;
        return new Return(v.value0.value0);
      }

      ;

      if (v2 instanceof Data_Maybe.Just) {
        $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
        return;
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
    }

    ;

    if (v.value0 instanceof Bind) {
      $tco_done = true;
      return new Bind(v.value0.value0, function (a) {
        return concatF(v.value0.value1(a))(v.value1);
      });
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
  }

  ;

  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }

  ;
  return $tco_result;
};

var runFreeM = function runFreeM(dictFunctor) {
  return function (dictMonadRec) {
    return function (k) {
      var go = function go(f) {
        var v = toView(f);

        if (v instanceof Return) {
          return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
        }

        ;

        if (v instanceof Bind) {
          return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [v.constructor.name]);
      };

      return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
  };
};

var runFree = function runFree(dictFunctor) {
  return function (k) {
    var go = function go($copy_f) {
      var $tco_done = false;
      var $tco_result;

      function $tco_loop(f) {
        var v = toView(f);

        if (v instanceof Return) {
          $tco_done = true;
          return v.value0;
        }

        ;

        if (v instanceof Bind) {
          $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
          return;
        }

        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [v.constructor.name]);
      }

      ;

      while (!$tco_done) {
        $tco_result = $tco_loop($copy_f);
      }

      ;
      return $tco_result;
    };

    return go;
  };
};

var resume$prime = function resume$prime(k) {
  return function (j) {
    return function (f) {
      var v = toView(f);

      if (v instanceof Return) {
        return j(v.value0);
      }

      ;

      if (v instanceof Bind) {
        return k(v.value0)(v.value1);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [v.constructor.name]);
    };
  };
};

var resume = function resume(dictFunctor) {
  return resume$prime(function (g) {
    return function (i) {
      return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
    };
  })(Data_Either.Right.create);
};

var fromView = function fromView(f) {
  return new Free(f, Data_CatList.empty);
};

var wrap = function wrap(f) {
  return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
};

var suspendF = function suspendF(dictApplicative) {
  return function (f) {
    return wrap(Control_Applicative.pure(dictApplicative)(f));
  };
};

var freeMonad = new Control_Monad.Monad(function () {
  return freeApplicative;
}, function () {
  return freeBind;
});
var freeFunctor = new Data_Functor.Functor(function (k) {
  return function (f) {
    return Control_Bind.bindFlipped(freeBind)(function () {
      var $120 = Control_Applicative.pure(freeApplicative);
      return function ($121) {
        return $120(k($121));
      };
    }())(f);
  };
});
var freeBind = new Control_Bind.Bind(function () {
  return freeApply;
}, function (v) {
  return function (k) {
    return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
  };
});
var freeApply = new Control_Apply.Apply(function () {
  return freeFunctor;
}, Control_Monad.ap(freeMonad));
var freeApplicative = new Control_Applicative.Applicative(function () {
  return freeApply;
}, function ($122) {
  return fromView(Return.create($122));
});

var semigroupFree = function semigroupFree(dictSemigroup) {
  return new Data_Semigroup.Semigroup(Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup)));
};

var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
  return freeMonad;
}, function (k) {
  return function (a) {
    return Control_Bind.bind(freeBind)(k(a))(function (v) {
      if (v instanceof Control_Monad_Rec_Class.Loop) {
        return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
      }

      ;

      if (v instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(freeApplicative)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [v.constructor.name]);
    });
  };
});

var liftF = function liftF(f) {
  return fromView(new Bind(f, function () {
    var $123 = Control_Applicative.pure(freeApplicative);
    return function ($124) {
      return $123($124);
    };
  }()));
};

var freeMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
  return liftF;
});

var monoidFree = function monoidFree(dictMonoid) {
  return new Data_Monoid.Monoid(function () {
    return semigroupFree(dictMonoid.Semigroup0());
  }, Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)));
};

var substFree = function substFree(k) {
  var go = function go(f) {
    var v = toView(f);

    if (v instanceof Return) {
      return Control_Applicative.pure(freeApplicative)(v.value0);
    }

    ;

    if (v instanceof Bind) {
      return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
    }

    ;
    throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [v.constructor.name]);
  };

  return go;
};

var hoistFree = function hoistFree(k) {
  return substFree(function ($125) {
    return liftF(k($125));
  });
};

var foldableFree = function foldableFree(dictFunctor) {
  return function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
        var go = function () {
          var $126 = resume(dictFunctor);
          return function ($127) {
            return function (v) {
              if (v instanceof Data_Either.Left) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
              }

              ;

              if (v instanceof Data_Either.Right) {
                return f(v.value0);
              }

              ;
              throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [v.constructor.name]);
            }($126($127));
          };
        }();

        return go;
      };
    }, function (f) {
      var go = function go(r) {
        var $128 = resume(dictFunctor);
        return function ($129) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
            }

            ;

            if (v instanceof Data_Either.Right) {
              return f(r)(v.value0);
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [v.constructor.name]);
          }($128($129));
        };
      };

      return go;
    }, function (f) {
      var go = function go(r) {
        var $130 = resume(dictFunctor);
        return function ($131) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
            }

            ;

            if (v instanceof Data_Either.Right) {
              return f(v.value0)(r);
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [v.constructor.name]);
          }($130($131));
        };
      };

      return go;
    });
  };
};

var traversableFree = function traversableFree(dictTraversable) {
  return new Data_Traversable.Traversable(function () {
    return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
  }, function () {
    return freeFunctor;
  }, function (dictApplicative) {
    return function (tma) {
      return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
    };
  }, function (dictApplicative) {
    return function (f) {
      var go = function () {
        var $132 = resume(dictTraversable.Functor0());
        return function ($133) {
          return function (v) {
            if (v instanceof Data_Either.Left) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(function () {
                var $134 = Control_Bind.join(freeBind);
                return function ($135) {
                  return $134(liftF($135));
                };
              }())(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
            }

            ;

            if (v instanceof Data_Either.Right) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
            }

            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [v.constructor.name]);
          }($132($133));
        };
      }();

      return go;
    };
  });
};

var foldFree = function foldFree(dictMonadRec) {
  return function (k) {
    var go = function go(f) {
      var v = toView(f);

      if (v instanceof Return) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
      }

      ;

      if (v instanceof Bind) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(function ($136) {
          return Control_Monad_Rec_Class.Loop.create(v.value1($136));
        })(k(v.value0));
      }

      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [v.constructor.name]);
    };

    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
  };
};

var eqFree = function eqFree(dictFunctor) {
  return function (dictEq1) {
    return function (dictEq) {
      return new Data_Eq.Eq(function (x) {
        return function (y) {
          var v = resume(dictFunctor)(y);
          var v1 = resume(dictFunctor)(x);

          if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
            return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
          }

          ;

          if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
            return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
          }

          ;
          return false;
        };
      });
    };
  };
};

var ordFree = function ordFree(dictFunctor) {
  return function (dictOrd1) {
    return function (dictOrd) {
      return new Data_Ord.Ord(function () {
        return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
      }, function (x) {
        return function (y) {
          var v = resume(dictFunctor)(y);
          var v1 = resume(dictFunctor)(x);

          if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
            return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
          }

          ;

          if (v1 instanceof Data_Either.Left) {
            return Data_Ordering.LT.value;
          }

          ;

          if (v instanceof Data_Either.Left) {
            return Data_Ordering.GT.value;
          }

          ;

          if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
            return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
          }

          ;
          throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [v1.constructor.name, v.constructor.name]);
        };
      });
    };
  };
};

var eq1Free = function eq1Free(dictFunctor) {
  return function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
    });
  };
};

var ord1Free = function ord1Free(dictFunctor) {
  return function (dictOrd1) {
    return function (dictOrd) {
      return new Data_Ord.Ord1(function () {
        return eq1Free(dictFunctor)(dictOrd1.Eq10());
      }, function (dictOrd2) {
        return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd2));
      });
    };
  };
};

module.exports = {
  suspendF: suspendF,
  wrap: wrap,
  liftF: liftF,
  hoistFree: hoistFree,
  foldFree: foldFree,
  substFree: substFree,
  runFree: runFree,
  runFreeM: runFreeM,
  resume: resume,
  "resume'": resume$prime,
  eqFree: eqFree,
  eq1Free: eq1Free,
  ordFree: ordFree,
  ord1Free: ord1Free,
  freeFunctor: freeFunctor,
  freeBind: freeBind,
  freeApplicative: freeApplicative,
  freeApply: freeApply,
  freeMonad: freeMonad,
  freeMonadTrans: freeMonadTrans,
  freeMonadRec: freeMonadRec,
  foldableFree: foldableFree,
  traversableFree: traversableFree,
  semigroupFree: semigroupFree,
  monoidFree: monoidFree
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Data.CatList/index.js":"../output/Data.CatList/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Monoid/index.js":"../output/Data.Monoid/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Semigroup/index.js":"../output/Data.Semigroup/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Effect.Aff.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");

var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");

var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var MonadAff = function MonadAff(MonadEffect0, liftAff) {
  this.MonadEffect0 = MonadEffect0;
  this.liftAff = liftAff;
};

var monadAffAff = new MonadAff(function () {
  return Effect_Aff.monadEffectAff;
}, Control_Category.identity(Control_Category.categoryFn));

var liftAff = function liftAff(dict) {
  return dict.liftAff;
};

var monadAffContT = function monadAffContT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
  }, function () {
    var $10 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonadAff.MonadEffect0().Monad0());
    var $11 = liftAff(dictMonadAff);
    return function ($12) {
      return $10($11($12));
    };
  }());
};

var monadAffExceptT = function monadAffExceptT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
  }, function () {
    var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonadAff.MonadEffect0().Monad0());
    var $14 = liftAff(dictMonadAff);
    return function ($15) {
      return $13($14($15));
    };
  }());
};

var monadAffListT = function monadAffListT(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
  }, function () {
    var $16 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)(dictMonadAff.MonadEffect0().Monad0());
    var $17 = liftAff(dictMonadAff);
    return function ($18) {
      return $16($17($18));
    };
  }());
};

var monadAffMaybe = function monadAffMaybe(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
  }, function () {
    var $19 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonadAff.MonadEffect0().Monad0());
    var $20 = liftAff(dictMonadAff);
    return function ($21) {
      return $19($20($21));
    };
  }());
};

var monadAffRWS = function monadAffRWS(dictMonadAff) {
  return function (dictMonoid) {
    return new MonadAff(function () {
      return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
    }, function () {
      var $22 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonadAff.MonadEffect0().Monad0());
      var $23 = liftAff(dictMonadAff);
      return function ($24) {
        return $22($23($24));
      };
    }());
  };
};

var monadAffReader = function monadAffReader(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
  }, function () {
    var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadAff.MonadEffect0().Monad0());
    var $26 = liftAff(dictMonadAff);
    return function ($27) {
      return $25($26($27));
    };
  }());
};

var monadAffState = function monadAffState(dictMonadAff) {
  return new MonadAff(function () {
    return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
  }, function () {
    var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadAff.MonadEffect0().Monad0());
    var $29 = liftAff(dictMonadAff);
    return function ($30) {
      return $28($29($30));
    };
  }());
};

var monadAffWriter = function monadAffWriter(dictMonadAff) {
  return function (dictMonoid) {
    return new MonadAff(function () {
      return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
    }, function () {
      var $31 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonadAff.MonadEffect0().Monad0());
      var $32 = liftAff(dictMonadAff);
      return function ($33) {
        return $31($32($33));
      };
    }());
  };
};

module.exports = {
  liftAff: liftAff,
  MonadAff: MonadAff,
  monadAffAff: monadAffAff,
  monadAffContT: monadAffContT,
  monadAffExceptT: monadAffExceptT,
  monadAffListT: monadAffListT,
  monadAffMaybe: monadAffMaybe,
  monadAffReader: monadAffReader,
  monadAffRWS: monadAffRWS,
  monadAffState: monadAffState,
  monadAffWriter: monadAffWriter
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad.Cont.Trans/index.js":"../output/Control.Monad.Cont.Trans/index.js","../Control.Monad.Except.Trans/index.js":"../output/Control.Monad.Except.Trans/index.js","../Control.Monad.List.Trans/index.js":"../output/Control.Monad.List.Trans/index.js","../Control.Monad.Maybe.Trans/index.js":"../output/Control.Monad.Maybe.Trans/index.js","../Control.Monad.RWS.Trans/index.js":"../output/Control.Monad.RWS.Trans/index.js","../Control.Monad.Reader.Trans/index.js":"../output/Control.Monad.Reader.Trans/index.js","../Control.Monad.State.Trans/index.js":"../output/Control.Monad.State.Trans/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Trans/index.js":"../output/Control.Monad.Writer.Trans/index.js","../Effect.Aff/index.js":"../output/Effect.Aff/index.js"}],"../output/Run.Internal/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Empty = function () {
  function Empty() {}

  ;
  Empty.value = new Empty();
  return Empty;
}();

var Alt = function () {
  function Alt(value0) {
    this.value0 = value0;
  }

  ;

  Alt.create = function (value0) {
    return new Alt(value0);
  };

  return Alt;
}();

var toRows = function toRows(dictTypeEquals) {
  return Unsafe_Coerce.unsafeCoerce;
};

var functorChoose = new Data_Functor.Functor(function (f) {
  return function (m) {
    if (m instanceof Empty) {
      return Empty.value;
    }

    ;

    if (m instanceof Alt) {
      return new Alt(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
    }

    ;
    throw new Error("Failed pattern match at Run.Internal (line 20, column 1 - line 20, column 47): " + [m.constructor.name]);
  };
});

var fromRows = function fromRows(dictTypeEquals) {
  return Unsafe_Coerce.unsafeCoerce;
};

var _choose = Data_Symbol.SProxy.value;
module.exports = {
  Empty: Empty,
  Alt: Alt,
  "_choose": _choose,
  toRows: toRows,
  fromRows: fromRows,
  functorChoose: functorChoose
};
},{"../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Run/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Alt = require("../Control.Alt/index.js");

var Control_Alternative = require("../Control.Alternative/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Free = require("../Control.Monad.Free/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Control_Plus = require("../Control.Plus/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_Function = require("../Data.Function/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Data_Tuple = require("../Data.Tuple/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Partial_Unsafe = require("../Partial.Unsafe/index.js");

var Run_Internal = require("../Run.Internal/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Run = function Run(x) {
  return x;
};

var send = function send($42) {
  return Run(Control_Monad_Free.liftF($42));
};

var newtypeRun = new Data_Newtype.Newtype(function (n) {
  return n;
}, Run);

var resume = function resume(k1) {
  return function (k2) {
    var $43 = Control_Monad_Free["resume'"](function (x) {
      return function (f) {
        return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($46) {
          return Run(f($46));
        })(x));
      };
    })(k2);
    var $44 = Data_Newtype.unwrap(newtypeRun);
    return function ($45) {
      return $43($44($45));
    };
  };
};

var peel = resume(Data_Either.Left.create)(Data_Either.Right.create);

var run = function run(dictMonad) {
  return function (k) {
    var loop = resume(function (a) {
      return Control_Bind.bindFlipped(dictMonad.Bind1())(loop)(k(a));
    })(Control_Applicative.pure(dictMonad.Applicative0()));
    return loop;
  };
};

var runBaseAff = run(Effect_Aff.monadAff)(Data_Functor_Variant.match()()()({
  aff: function aff(a) {
    return a;
  }
}));
var runBaseAff$prime = run(Effect_Aff.monadAff)(Data_Functor_Variant.match()()()({
  aff: function aff(a) {
    return a;
  },
  effect: function effect(a) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(a);
  }
}));

var runAccum = function runAccum(dictMonad) {
  return function (k) {
    var loop = function loop(s) {
      return resume(function (b) {
        return Control_Bind.bindFlipped(dictMonad.Bind1())(Data_Tuple.uncurry(loop))(k(s)(b));
      })(Control_Applicative.pure(dictMonad.Applicative0()));
    };

    return loop;
  };
};

var runAccumCont = function runAccumCont(k1) {
  return function (k2) {
    var loop = function loop(s) {
      return resume(function (b) {
        return k1(s)(Data_Functor.map(Data_Functor_Variant.functorVariantF)(Data_Function.flip(loop))(b));
      })(k2(s));
    };

    return loop;
  };
};

var runAccumRec = function runAccumRec(dictMonadRec) {
  return function (k) {
    var loop = function loop(s) {
      return resume(function (b) {
        return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Loop.create)(k(s)(b));
      })(function () {
        var $47 = Control_Applicative.pure(dictMonadRec.Monad0().Applicative0());
        return function ($48) {
          return $47(Control_Monad_Rec_Class.Done.create($48));
        };
      }());
    };

    return Data_Tuple.curry(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Data_Tuple.uncurry(loop)));
  };
};

var runCont = function runCont(k1) {
  return function (k2) {
    var loop = resume(function (b) {
      return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(loop)(b));
    })(k2);
    return loop;
  };
};

var runRec = function runRec(dictMonadRec) {
  return function (k) {
    var $49 = Control_Monad_Free.runFreeM(Data_Functor_Variant.functorVariantF)(dictMonadRec)(k);
    var $50 = Data_Newtype.unwrap(newtypeRun);
    return function ($51) {
      return $49($50($51));
    };
  };
};

var runBaseEffect = runRec(Control_Monad_Rec_Class.monadRecEffect)(Data_Functor_Variant.match()()()({
  effect: function effect(a) {
    return a;
  }
}));
var monadRun = Control_Monad_Free.freeMonad;

var lift = function lift(dictCons) {
  return function (dictIsSymbol) {
    return function (dictFunctor) {
      return function (p) {
        var $52 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(p);
        return function ($53) {
          return Run(Control_Monad_Free.liftF($52($53)));
        };
      };
    };
  };
};

var liftAff = lift()(new Data_Symbol.IsSymbol(function () {
  return "aff";
}))(Effect_Aff.functorAff)(Data_Symbol.SProxy.value);
var liftChoose = lift()(new Data_Symbol.IsSymbol(function () {
  return "choose";
}))(Run_Internal.functorChoose)(Run_Internal["_choose"]);
var liftEffect = lift()(new Data_Symbol.IsSymbol(function () {
  return "effect";
}))(Effect.functorEffect)(Data_Symbol.SProxy.value);

var runMonadEffect = function runMonadEffect(dictTypeEquals) {
  return new Effect_Class.MonadEffect(function () {
    return monadRun;
  }, function () {
    var $54 = Run_Internal.fromRows(dictTypeEquals);
    return function ($55) {
      return $54(liftEffect($55));
    };
  }());
};

var runMonadAff = function runMonadAff(dictTypeEquals) {
  return new Effect_Aff_Class.MonadAff(function () {
    return runMonadEffect(dictTypeEquals);
  }, function () {
    var $56 = Run_Internal.fromRows(dictTypeEquals);
    return function ($57) {
      return $56(liftAff($57));
    };
  }());
};

var interpretRec = function interpretRec(dictMonadRec) {
  return runRec(dictMonadRec);
};

var interpret = function interpret(dictMonad) {
  return run(dictMonad);
};

var functorRun = Control_Monad_Free.freeFunctor;

var extract = function () {
  var $58 = Control_Monad_Free.runFree(Data_Functor_Variant.functorVariantF)(function (v) {
    return Partial_Unsafe.unsafeCrashWith("Run: the impossible happened");
  });
  var $59 = Data_Newtype.unwrap(newtypeRun);
  return function ($60) {
    return $58($59($60));
  };
}();

var expand = function expand(dictUnion) {
  return Unsafe_Coerce.unsafeCoerce;
};

var bindRun = Control_Monad_Free.freeBind;

var runAlt = function runAlt(dictTypeEquals) {
  return new Control_Alt.Alt(function () {
    return functorRun;
  }, function (a) {
    return function (b) {
      return Run_Internal.fromRows(dictTypeEquals)(Control_Bind.bind(bindRun)(liftChoose(new Run_Internal.Alt(Control_Category.identity(Control_Category.categoryFn))))(function (v) {
        if (v) {
          return Run_Internal.toRows(dictTypeEquals)(a);
        }

        ;
        return Run_Internal.toRows(dictTypeEquals)(b);
      }));
    };
  });
};

var runPlus = function runPlus(dictTypeEquals) {
  return new Control_Plus.Plus(function () {
    return runAlt(dictTypeEquals);
  }, Run_Internal.fromRows(dictTypeEquals)(liftChoose(Run_Internal.Empty.value)));
};

var applyRun = Control_Monad_Free.freeApply;
var applicativeRun = Control_Monad_Free.freeApplicative;
var monadRecRun = new Control_Monad_Rec_Class.MonadRec(function () {
  return monadRun;
}, function (f) {
  var loop = function loop(a) {
    return Control_Bind.bind(bindRun)(f(a))(function (b) {
      if (b instanceof Control_Monad_Rec_Class.Done) {
        return Control_Applicative.pure(applicativeRun)(b.value0);
      }

      ;

      if (b instanceof Control_Monad_Rec_Class.Loop) {
        return loop(b.value0);
      }

      ;
      throw new Error("Failed pattern match at Run (line 108, column 7 - line 110, column 24): " + [b.constructor.name]);
    });
  };

  return loop;
});

var runAccumPure = function runAccumPure(k1) {
  return function (k2) {
    var loop = function loop($copy_s) {
      return function ($copy_r) {
        var $tco_var_s = $copy_s;
        var $tco_done = false;
        var $tco_result;

        function $tco_loop(s, r) {
          var v = peel(r);

          if (v instanceof Data_Either.Left) {
            var v1 = k1(s)(v.value0);

            if (v1 instanceof Control_Monad_Rec_Class.Loop) {
              $tco_var_s = v1.value0.value0;
              $copy_r = v1.value0.value1;
              return;
            }

            ;

            if (v1 instanceof Control_Monad_Rec_Class.Done) {
              $tco_done = true;
              return Control_Bind.bind(bindRun)(send(v1.value0))(runAccumPure(k1)(k2)(s));
            }

            ;
            throw new Error("Failed pattern match at Run (line 305, column 14 - line 307, column 49): " + [v1.constructor.name]);
          }

          ;

          if (v instanceof Data_Either.Right) {
            $tco_done = true;
            return Control_Applicative.pure(applicativeRun)(k2(s)(v.value0));
          }

          ;
          throw new Error("Failed pattern match at Run (line 304, column 14 - line 309, column 20): " + [v.constructor.name]);
        }

        ;

        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_s, $copy_r);
        }

        ;
        return $tco_result;
      };
    };

    return loop;
  };
};

var runAlternative = function runAlternative(dictTypeEquals) {
  return new Control_Alternative.Alternative(function () {
    return applicativeRun;
  }, function () {
    return runPlus(dictTypeEquals);
  });
};

var runPure = function runPure(k) {
  var loop = function loop($copy_r) {
    var $tco_done = false;
    var $tco_result;

    function $tco_loop(r) {
      var v = peel(r);

      if (v instanceof Data_Either.Left) {
        var v1 = k(v.value0);

        if (v1 instanceof Control_Monad_Rec_Class.Loop) {
          $copy_r = v1.value0;
          return;
        }

        ;

        if (v1 instanceof Control_Monad_Rec_Class.Done) {
          $tco_done = true;
          return Control_Bind.bind(bindRun)(send(v1.value0))(runPure(k));
        }

        ;
        throw new Error("Failed pattern match at Run (line 286, column 14 - line 288, column 38): " + [v1.constructor.name]);
      }

      ;

      if (v instanceof Data_Either.Right) {
        $tco_done = true;
        return Control_Applicative.pure(applicativeRun)(v.value0);
      }

      ;
      throw new Error("Failed pattern match at Run (line 285, column 12 - line 290, column 13): " + [v.constructor.name]);
    }

    ;

    while (!$tco_done) {
      $tco_result = $tco_loop($copy_r);
    }

    ;
    return $tco_result;
  };

  return loop;
};

module.exports = {
  Run: Run,
  lift: lift,
  send: send,
  extract: extract,
  interpret: interpret,
  interpretRec: interpretRec,
  run: run,
  runRec: runRec,
  runCont: runCont,
  runPure: runPure,
  runAccum: runAccum,
  runAccumRec: runAccumRec,
  runAccumCont: runAccumCont,
  runAccumPure: runAccumPure,
  peel: peel,
  resume: resume,
  expand: expand,
  liftEffect: liftEffect,
  liftAff: liftAff,
  runBaseEffect: runBaseEffect,
  runBaseAff: runBaseAff,
  "runBaseAff'": runBaseAff$prime,
  newtypeRun: newtypeRun,
  functorRun: functorRun,
  applyRun: applyRun,
  applicativeRun: applicativeRun,
  bindRun: bindRun,
  monadRun: monadRun,
  monadRecRun: monadRecRun,
  runMonadEffect: runMonadEffect,
  runMonadAff: runMonadAff,
  runAlt: runAlt,
  runPlus: runPlus,
  runAlternative: runAlternative
};
},{"../Control.Alt/index.js":"../output/Control.Alt/index.js","../Control.Alternative/index.js":"../output/Control.Alternative/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad.Free/index.js":"../output/Control.Monad.Free/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Control.Plus/index.js":"../output/Control.Plus/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.Function/index.js":"../output/Data.Function/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Functor.Variant/index.js":"../output/Data.Functor.Variant/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Data.Tuple/index.js":"../output/Data.Tuple/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Aff/index.js":"../output/Effect.Aff/index.js","../Effect.Aff.Class/index.js":"../output/Effect.Aff.Class/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Partial.Unsafe/index.js":"../output/Partial.Unsafe/index.js","../Run.Internal/index.js":"../output/Run.Internal/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js"}],"../output/Graphics.CanvasAction.Run/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");

var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");

var Data_Symbol = require("../Data.Symbol/index.js");

var Effect = require("../Effect/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Graphics_CanvasAction_Types = require("../Graphics.CanvasAction.Types/index.js");

var Run = require("../Run/index.js");

var runCanvasAt = function runCanvasAt(dictIsSymbol) {
  return function (dictIsSymbol1) {
    return function (dictCons) {
      return function (dictCons1) {
        return function (effect) {
          return function (canvas) {
            return function (ctx) {
              return Run.interpret(Run.monadRun)(Data_Functor_Variant.on()(dictIsSymbol1)(canvas)(function () {
                var $12 = Run.lift()(dictIsSymbol)(Effect.functorEffect)(effect);
                var $13 = Graphics_CanvasAction_Types.runAction(Effect_Class.monadEffectEffect)(ctx);
                return function ($14) {
                  return $12($13($14));
                };
              }())(Run.send));
            };
          };
        };
      };
    };
  };
};

var runBaseCanvasAt$prime = function runBaseCanvasAt$prime(dictIsSymbol) {
  return function (dictIsSymbol1) {
    return function (dictCons) {
      return function (dictCons1) {
        return function (effect) {
          return function (canvas) {
            return Run.runRec(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(Data_Functor_Variant.on()(dictIsSymbol1)(canvas)(Control_Category.identity(Control_Category.categoryFn))(Data_Functor_Variant.on()(dictIsSymbol)(effect)(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect)))(Data_Functor_Variant.case_)));
          };
        };
      };
    };
  };
};

var runBaseCanvasAt = function runBaseCanvasAt(dictIsSymbol) {
  return function (dictCons) {
    return function (p) {
      return Run.runRec(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(Data_Functor_Variant.on()(dictIsSymbol)(p)(Control_Category.identity(Control_Category.categoryFn))(Data_Functor_Variant.case_));
    };
  };
};

var liftCanvasActionAt = function liftCanvasActionAt(dictIsSymbol) {
  return function (dictCons) {
    return Run.lift()(dictIsSymbol)(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect));
  };
};

var _canvas = Data_Symbol.SProxy.value;
var liftCanvasAction = liftCanvasActionAt(new Data_Symbol.IsSymbol(function () {
  return "canvas";
}))()(_canvas);
var runBaseCanvas = runBaseCanvasAt(new Data_Symbol.IsSymbol(function () {
  return "canvas";
}))()(_canvas);
var runBaseCanvas$prime = runBaseCanvasAt$prime(new Data_Symbol.IsSymbol(function () {
  return "effect";
}))(new Data_Symbol.IsSymbol(function () {
  return "canvas";
}))()()(Data_Symbol.SProxy.value)(_canvas);
var runCanvas = runCanvasAt(new Data_Symbol.IsSymbol(function () {
  return "effect";
}))(new Data_Symbol.IsSymbol(function () {
  return "canvas";
}))()()(Data_Symbol.SProxy.value)(_canvas);
module.exports = {
  "_canvas": _canvas,
  liftCanvasAction: liftCanvasAction,
  liftCanvasActionAt: liftCanvasActionAt,
  runCanvas: runCanvas,
  runCanvasAt: runCanvasAt,
  runBaseCanvas: runBaseCanvas,
  runBaseCanvasAt: runBaseCanvasAt,
  "runBaseCanvas'": runBaseCanvas$prime,
  "runBaseCanvasAt'": runBaseCanvasAt$prime
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad.Reader.Trans/index.js":"../output/Control.Monad.Reader.Trans/index.js","../Control.Monad.Rec.Class/index.js":"../output/Control.Monad.Rec.Class/index.js","../Data.Functor.Variant/index.js":"../output/Data.Functor.Variant/index.js","../Data.Symbol/index.js":"../output/Data.Symbol/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Graphics.CanvasAction.Types/index.js":"../output/Graphics.CanvasAction.Types/index.js","../Run/index.js":"../output/Run/index.js"}],"../output/Graphics.CanvasAction.Class/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Category = require("../Control.Category/index.js");

var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");

var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");

var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");

var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");

var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");

var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");

var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Graphics_CanvasAction_Run = require("../Graphics.CanvasAction.Run/index.js");

var Run = require("../Run/index.js");

var Run_Internal = require("../Run.Internal/index.js");

var MonadCanvasAction = function MonadCanvasAction(MonadEffect0, liftCanvasAction) {
  this.MonadEffect0 = MonadEffect0;
  this.liftCanvasAction = liftCanvasAction;
};

var monadCanvasActionRun = function monadCanvasActionRun(dictTypeEquals) {
  return new MonadCanvasAction(function () {
    return Run.runMonadEffect(dictTypeEquals);
  }, function () {
    var $11 = Run_Internal.fromRows(dictTypeEquals);
    return function ($12) {
      return $11(Graphics_CanvasAction_Run.liftCanvasAction($12));
    };
  }());
};

var monadCanvasActionCanvasActionM = new MonadCanvasAction(function () {
  return Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect);
}, Control_Category.identity(Control_Category.categoryFn));

var liftCanvasAction = function liftCanvasAction(dict) {
  return dict.liftCanvasAction;
};

var monadCanvasActionContT = function monadCanvasActionContT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_Cont_Trans.monadEffectContT(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $14 = liftCanvasAction(dictMonadCanvasAction);
    return function ($15) {
      return $13($14($15));
    };
  }());
};

var monadCanvasActionExceptT = function monadCanvasActionExceptT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $16 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $17 = liftCanvasAction(dictMonadCanvasAction);
    return function ($18) {
      return $16($17($18));
    };
  }());
};

var monadCanvasActionListT = function monadCanvasActionListT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_List_Trans.monadEffectListT(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $19 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $20 = liftCanvasAction(dictMonadCanvasAction);
    return function ($21) {
      return $19($20($21));
    };
  }());
};

var monadCanvasActionMaybeT = function monadCanvasActionMaybeT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $22 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $23 = liftCanvasAction(dictMonadCanvasAction);
    return function ($24) {
      return $22($23($24));
    };
  }());
};

var monadCanvasActionRWST = function monadCanvasActionRWST(dictMonoid) {
  return function (dictMonadCanvasAction) {
    return new MonadCanvasAction(function () {
      return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadCanvasAction.MonadEffect0());
    }, function () {
      var $25 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonadCanvasAction.MonadEffect0().Monad0());
      var $26 = liftCanvasAction(dictMonadCanvasAction);
      return function ($27) {
        return $25($26($27));
      };
    }());
  };
};

var monadCanvasActionReaderT = function monadCanvasActionReaderT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_Reader_Trans.monadEffectReader(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $28 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $29 = liftCanvasAction(dictMonadCanvasAction);
    return function ($30) {
      return $28($29($30));
    };
  }());
};

var monadCanvasActionStateT = function monadCanvasActionStateT(dictMonadCanvasAction) {
  return new MonadCanvasAction(function () {
    return Control_Monad_State_Trans.monadEffectState(dictMonadCanvasAction.MonadEffect0());
  }, function () {
    var $31 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadCanvasAction.MonadEffect0().Monad0());
    var $32 = liftCanvasAction(dictMonadCanvasAction);
    return function ($33) {
      return $31($32($33));
    };
  }());
};

var monadCanvasActionWriterT = function monadCanvasActionWriterT(dictMonoid) {
  return function (dictMonadCanvasAction) {
    return new MonadCanvasAction(function () {
      return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadCanvasAction.MonadEffect0());
    }, function () {
      var $34 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonadCanvasAction.MonadEffect0().Monad0());
      var $35 = liftCanvasAction(dictMonadCanvasAction);
      return function ($36) {
        return $34($35($36));
      };
    }());
  };
};

module.exports = {
  liftCanvasAction: liftCanvasAction,
  MonadCanvasAction: MonadCanvasAction,
  monadCanvasActionCanvasActionM: monadCanvasActionCanvasActionM,
  monadCanvasActionReaderT: monadCanvasActionReaderT,
  monadCanvasActionRun: monadCanvasActionRun,
  monadCanvasActionContT: monadCanvasActionContT,
  monadCanvasActionExceptT: monadCanvasActionExceptT,
  monadCanvasActionListT: monadCanvasActionListT,
  monadCanvasActionMaybeT: monadCanvasActionMaybeT,
  monadCanvasActionRWST: monadCanvasActionRWST,
  monadCanvasActionStateT: monadCanvasActionStateT,
  monadCanvasActionWriterT: monadCanvasActionWriterT
};
},{"../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad.Cont.Trans/index.js":"../output/Control.Monad.Cont.Trans/index.js","../Control.Monad.Except.Trans/index.js":"../output/Control.Monad.Except.Trans/index.js","../Control.Monad.List.Trans/index.js":"../output/Control.Monad.List.Trans/index.js","../Control.Monad.Maybe.Trans/index.js":"../output/Control.Monad.Maybe.Trans/index.js","../Control.Monad.RWS.Trans/index.js":"../output/Control.Monad.RWS.Trans/index.js","../Control.Monad.Reader.Trans/index.js":"../output/Control.Monad.Reader.Trans/index.js","../Control.Monad.State.Trans/index.js":"../output/Control.Monad.State.Trans/index.js","../Control.Monad.Trans.Class/index.js":"../output/Control.Monad.Trans.Class/index.js","../Control.Monad.Writer.Trans/index.js":"../output/Control.Monad.Writer.Trans/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Graphics.CanvasAction.Run/index.js":"../output/Graphics.CanvasAction.Run/index.js","../Run/index.js":"../output/Run/index.js","../Run.Internal/index.js":"../output/Run.Internal/index.js"}],"../output/Web.DOM.Document/foreign.js":[function(require,module,exports) {
"use strict";

var getEffProp = function getEffProp(name) {
  return function (doc) {
    return function () {
      return doc[name];
    };
  };
};

exports.url = getEffProp("URL");
exports.documentURI = getEffProp("documentURI");
exports.origin = getEffProp("origin");
exports.compatMode = getEffProp("compatMode");
exports.characterSet = getEffProp("characterSet");
exports.contentType = getEffProp("contentType");
exports._doctype = getEffProp("doctype");
exports._documentElement = getEffProp("documentElement");

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.createElement = function (localName) {
  return function (doc) {
    return function () {
      return doc.createElement(localName);
    };
  };
};

exports._createElementNS = function (ns) {
  return function (qualifiedName) {
    return function (doc) {
      return function () {
        return doc.createElementNS(ns, qualifiedName);
      };
    };
  };
};

exports.createDocumentFragment = function (doc) {
  return function () {
    return doc.createDocumentFragment();
  };
};

exports.createTextNode = function (data) {
  return function (doc) {
    return function () {
      return doc.createTextNode(data);
    };
  };
};

exports.createComment = function (data) {
  return function (doc) {
    return function () {
      return doc.createComment(data);
    };
  };
};

exports.createProcessingInstruction = function (target) {
  return function (data) {
    return function (doc) {
      return function () {
        return doc.createProcessingInstruction(target, data);
      };
    };
  };
};

exports.importNode = function (node) {
  return function (deep) {
    return function (doc) {
      return function () {
        return doc.importNode(node, deep);
      };
    };
  };
};

exports.adoptNode = function (node) {
  return function (doc) {
    return function () {
      return doc.adoptNode(node);
    };
  };
};
},{}],"../output/Web.DOM.Document/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;

var getElementsByTagNameNS = function getElementsByTagNameNS($0) {
  return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($0));
};

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Document");

var documentElement = function () {
  var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($2) {
    return $1($foreign["_documentElement"]($2));
  };
}();

var doctype = function () {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($4) {
    return $3($foreign["_doctype"]($4));
  };
}();

var createElementNS = function createElementNS($5) {
  return $foreign["_createElementNS"](Data_Nullable.toNullable($5));
};

module.exports = {
  fromNode: fromNode,
  fromParentNode: fromParentNode,
  fromNonElementParentNode: fromNonElementParentNode,
  fromEventTarget: fromEventTarget,
  toNode: toNode,
  toParentNode: toParentNode,
  toNonElementParentNode: toNonElementParentNode,
  toEventTarget: toEventTarget,
  doctype: doctype,
  documentElement: documentElement,
  getElementsByTagNameNS: getElementsByTagNameNS,
  createElementNS: createElementNS,
  url: $foreign.url,
  documentURI: $foreign.documentURI,
  origin: $foreign.origin,
  compatMode: $foreign.compatMode,
  characterSet: $foreign.characterSet,
  contentType: $foreign.contentType,
  getElementsByTagName: $foreign.getElementsByTagName,
  getElementsByClassName: $foreign.getElementsByClassName,
  createElement: $foreign.createElement,
  createDocumentFragment: $foreign.createDocumentFragment,
  createTextNode: $foreign.createTextNode,
  createComment: $foreign.createComment,
  createProcessingInstruction: $foreign.createProcessingInstruction,
  importNode: $foreign.importNode,
  adoptNode: $foreign.adoptNode
};
},{"./foreign.js":"../output/Web.DOM.Document/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Effect/index.js":"../output/Effect/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.Internal.FFI/index.js":"../output/Web.Internal.FFI/index.js"}],"../output/Web.DOM.ParentNode/foreign.js":[function(require,module,exports) {
"use strict";

var getEffProp = function getEffProp(name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.children = getEffProp("children");
exports._firstElementChild = getEffProp("firstElementChild");
exports._lastElementChild = getEffProp("lastElementChild");
exports.childElementCount = getEffProp("childElementCount");

exports._querySelector = function (selector) {
  return function (node) {
    return function () {
      return node.querySelector(selector);
    };
  };
};

exports.querySelectorAll = function (selector) {
  return function (node) {
    return function () {
      return node.querySelectorAll(selector);
    };
  };
};
},{}],"../output/Web.DOM.ParentNode/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Eq = require("../Data.Eq/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Newtype = require("../Data.Newtype/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Effect = require("../Effect/index.js");

var QuerySelector = function QuerySelector(x) {
  return x;
};

var querySelector = function querySelector(qs) {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $4 = $foreign["_querySelector"](qs);
  return function ($5) {
    return $3($4($5));
  };
};

var ordQuerySelector = Data_Ord.ordString;
var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
  return n;
}, QuerySelector);

var lastElementChild = function () {
  var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($7) {
    return $6($foreign["_lastElementChild"]($7));
  };
}();

var firstElementChild = function () {
  var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($9) {
    return $8($foreign["_firstElementChild"]($9));
  };
}();

var eqQuerySelector = Data_Eq.eqString;
module.exports = {
  firstElementChild: firstElementChild,
  lastElementChild: lastElementChild,
  QuerySelector: QuerySelector,
  querySelector: querySelector,
  eqQuerySelector: eqQuerySelector,
  ordQuerySelector: ordQuerySelector,
  newtypeQuerySelector: newtypeQuerySelector,
  children: $foreign.children,
  childElementCount: $foreign.childElementCount,
  querySelectorAll: $foreign.querySelectorAll
};
},{"./foreign.js":"../output/Web.DOM.ParentNode/foreign.js","../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Newtype/index.js":"../output/Data.Newtype/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Effect/index.js":"../output/Effect/index.js"}],"../output/Web.HTML.HTMLCanvasElement/foreign.js":[function(require,module,exports) {
"use strict";

exports.width = function (canvas) {
  return function () {
    return canvas.width;
  };
};

exports.setWidth = function (width) {
  return function (canvas) {
    return function () {
      canvas.width = width;
    };
  };
}; // ----------------------------------------------------------------------------


exports.height = function (canvas) {
  return function () {
    return canvas.height;
  };
};

exports.setHeight = function (height) {
  return function (canvas) {
    return function () {
      canvas.height = height;
    };
  };
};
},{}],"../output/Web.HTML.HTMLCanvasElement/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
module.exports = {
  fromHTMLElement: fromHTMLElement,
  fromElement: fromElement,
  fromNode: fromNode,
  fromChildNode: fromChildNode,
  fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
  fromParentNode: fromParentNode,
  fromEventTarget: fromEventTarget,
  toHTMLElement: toHTMLElement,
  toElement: toElement,
  toNode: toNode,
  toChildNode: toChildNode,
  toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
  toParentNode: toParentNode,
  toEventTarget: toEventTarget,
  width: $foreign.width,
  setWidth: $foreign.setWidth,
  height: $foreign.height,
  setHeight: $foreign.setHeight
};
},{"./foreign.js":"../output/Web.HTML.HTMLCanvasElement/foreign.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.Internal.FFI/index.js":"../output/Web.Internal.FFI/index.js"}],"../output/Web.HTML.HTMLDocument/foreign.js":[function(require,module,exports) {
"use strict";

exports._head = function (doc) {
  return function () {
    return doc.head;
  };
};

exports._body = function (doc) {
  return function () {
    return doc.body;
  };
};

exports._readyState = function (doc) {
  return function () {
    return doc.readyState;
  };
};

exports._activeElement = function (doc) {
  return function () {
    return doc.activeElement;
  };
};

exports._currentScript = function (doc) {
  return function () {
    return doc.currentScript;
  };
};

exports.referrer = function (doc) {
  return function () {
    return doc.referrer;
  };
};

exports.title = function (doc) {
  return function () {
    return doc.title;
  };
};

exports.setTitle = function (title) {
  return function (doc) {
    return function () {
      doc.title = title;
      return {};
    };
  };
};
},{}],"../output/Web.HTML.HTMLDocument.ReadyState/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Eq = require("../Data.Eq/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Ord = require("../Data.Ord/index.js");

var Data_Ordering = require("../Data.Ordering/index.js");

var Data_Show = require("../Data.Show/index.js");

var Loading = function () {
  function Loading() {}

  ;
  Loading.value = new Loading();
  return Loading;
}();

var Interactive = function () {
  function Interactive() {}

  ;
  Interactive.value = new Interactive();
  return Interactive;
}();

var Complete = function () {
  function Complete() {}

  ;
  Complete.value = new Complete();
  return Complete;
}();

var showReadyState = new Data_Show.Show(function (v) {
  if (v instanceof Loading) {
    return "Loading";
  }

  ;

  if (v instanceof Interactive) {
    return "Interactive";
  }

  ;

  if (v instanceof Complete) {
    return "Complete";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [v.constructor.name]);
});

var print = function print(v) {
  if (v instanceof Loading) {
    return "loading";
  }

  ;

  if (v instanceof Interactive) {
    return "interactive";
  }

  ;

  if (v instanceof Complete) {
    return "complete";
  }

  ;
  throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [v.constructor.name]);
};

var parse = function parse(v) {
  if (v === "loading") {
    return new Data_Maybe.Just(Loading.value);
  }

  ;

  if (v === "interactive") {
    return new Data_Maybe.Just(Interactive.value);
  }

  ;

  if (v === "complete") {
    return new Data_Maybe.Just(Complete.value);
  }

  ;
  return Data_Maybe.Nothing.value;
};

var eqReadyState = new Data_Eq.Eq(function (x) {
  return function (y) {
    if (x instanceof Loading && y instanceof Loading) {
      return true;
    }

    ;

    if (x instanceof Interactive && y instanceof Interactive) {
      return true;
    }

    ;

    if (x instanceof Complete && y instanceof Complete) {
      return true;
    }

    ;
    return false;
  };
});
var ordReadyState = new Data_Ord.Ord(function () {
  return eqReadyState;
}, function (x) {
  return function (y) {
    if (x instanceof Loading && y instanceof Loading) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Loading) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Loading) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Interactive && y instanceof Interactive) {
      return Data_Ordering.EQ.value;
    }

    ;

    if (x instanceof Interactive) {
      return Data_Ordering.LT.value;
    }

    ;

    if (y instanceof Interactive) {
      return Data_Ordering.GT.value;
    }

    ;

    if (x instanceof Complete && y instanceof Complete) {
      return Data_Ordering.EQ.value;
    }

    ;
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [x.constructor.name, y.constructor.name]);
  };
});
module.exports = {
  Loading: Loading,
  Interactive: Interactive,
  Complete: Complete,
  print: print,
  parse: parse,
  eqReadyState: eqReadyState,
  ordReadyState: ordReadyState,
  showReadyState: showReadyState
};
},{"../Data.Eq/index.js":"../output/Data.Eq/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Ord/index.js":"../output/Data.Ord/index.js","../Data.Ordering/index.js":"../output/Data.Ordering/index.js","../Data.Show/index.js":"../output/Data.Show/index.js"}],"../output/Web.HTML.HTMLDocument/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toDocument = Unsafe_Coerce.unsafeCoerce;

var readyState = function () {
  var $0 = Data_Functor.map(Effect.functorEffect)(function () {
    var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
    return function ($3) {
      return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
    };
  }());
  return function ($1) {
    return $0($foreign["_readyState"]($1));
  };
}();

var head = function () {
  var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($5) {
    return $4($foreign["_head"]($5));
  };
}();

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");

var currentScript = function () {
  var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($7) {
    return $6($foreign["_currentScript"]($7));
  };
}();

var body = function () {
  var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($9) {
    return $8($foreign["_body"]($9));
  };
}();

var activeElement = function () {
  var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  return function ($11) {
    return $10($foreign["_activeElement"]($11));
  };
}();

module.exports = {
  fromDocument: fromDocument,
  fromNode: fromNode,
  fromParentNode: fromParentNode,
  fromNonElementParentNode: fromNonElementParentNode,
  fromEventTarget: fromEventTarget,
  toDocument: toDocument,
  toNode: toNode,
  toParentNode: toParentNode,
  toNonElementParentNode: toNonElementParentNode,
  toEventTarget: toEventTarget,
  head: head,
  body: body,
  readyState: readyState,
  activeElement: activeElement,
  currentScript: currentScript,
  referrer: $foreign.referrer,
  title: $foreign.title,
  setTitle: $foreign.setTitle
};
},{"./foreign.js":"../output/Web.HTML.HTMLDocument/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Effect/index.js":"../output/Effect/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.HTML.HTMLDocument.ReadyState/index.js":"../output/Web.HTML.HTMLDocument.ReadyState/index.js","../Web.Internal.FFI/index.js":"../output/Web.Internal.FFI/index.js"}],"../output/Graphics.CanvasAction/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Color = require("../Color/index.js");

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Apply = require("../Control.Apply/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Category = require("../Control.Category/index.js");

var Control_Monad = require("../Control.Monad/index.js");

var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");

var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");

var Data_Boolean = require("../Data.Boolean/index.js");

var Data_Either = require("../Data.Either/index.js");

var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");

var Data_Foldable = require("../Data.Foldable/index.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Semiring = require("../Data.Semiring/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Vector_Polymorphic = require("../Data.Vector.Polymorphic/index.js");

var Data_Vector_Polymorphic_Class = require("../Data.Vector.Polymorphic.Class/index.js");

var Data_Vector_Polymorphic_Types = require("../Data.Vector.Polymorphic.Types/index.js");

var Effect = require("../Effect/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Class = require("../Effect.Class/index.js");

var Effect_Exception = require("../Effect.Exception/index.js");

var Effect_Exception_Unsafe = require("../Effect.Exception.Unsafe/index.js");

var Effect_Ref = require("../Effect.Ref/index.js");

var Graphics_Canvas = require("../Graphics.Canvas/index.js");

var Graphics_CanvasAction_Class = require("../Graphics.CanvasAction.Class/index.js");

var Graphics_CanvasAction_Types = require("../Graphics.CanvasAction.Types/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_DOM_Document = require("../Web.DOM.Document/index.js");

var Web_DOM_ParentNode = require("../Web.DOM.ParentNode/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_HTMLCanvasElement = require("../Web.HTML.HTMLCanvasElement/index.js");

var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var BaselineTop = function () {
  function BaselineTop() {}

  ;
  BaselineTop.value = new BaselineTop();
  return BaselineTop;
}();

var BaselineHanging = function () {
  function BaselineHanging() {}

  ;
  BaselineHanging.value = new BaselineHanging();
  return BaselineHanging;
}();

var BaselineMiddle = function () {
  function BaselineMiddle() {}

  ;
  BaselineMiddle.value = new BaselineMiddle();
  return BaselineMiddle;
}();

var BaselineAlphabetic = function () {
  function BaselineAlphabetic() {}

  ;
  BaselineAlphabetic.value = new BaselineAlphabetic();
  return BaselineAlphabetic;
}();

var BaselineIdeographic = function () {
  function BaselineIdeographic() {}

  ;
  BaselineIdeographic.value = new BaselineIdeographic();
  return BaselineIdeographic;
}();

var BaselineBottom = function () {
  function BaselineBottom() {}

  ;
  BaselineBottom.value = new BaselineBottom();
  return BaselineBottom;
}();

var CanvasStyleRep = function CanvasStyleRep(toStyle) {
  this.toStyle = toStyle;
};

var CanvasColorRep = function CanvasColorRep(toColor) {
  this.toColor = toColor;
};

var withCtx = function withCtx(dictMonadCanvasAction) {
  var $272 = Graphics_CanvasAction_Class.liftCanvasAction(dictMonadCanvasAction);
  return function ($273) {
    return $272(Control_Monad_Reader_Trans.ReaderT($273));
  };
};

var withCtx1 = function withCtx1(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return withCtx(dictMonadCanvasAction)(function (ctx) {
        return action(ctx)(a);
      });
    };
  };
};

var withCtx2 = function withCtx2(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return withCtx(dictMonadCanvasAction)(function (ctx) {
          return action(ctx)(a)(b);
        });
      };
    };
  };
};

var withCtx3 = function withCtx3(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return withCtx(dictMonadCanvasAction)(function (ctx) {
            return action(ctx)(a)(b)(c);
          });
        };
      };
    };
  };
};

var withCtx4 = function withCtx4(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return withCtx(dictMonadCanvasAction)(function (ctx) {
              return action(ctx)(a)(b)(c)(d);
            });
          };
        };
      };
    };
  };
};

var withCtx5 = function withCtx5(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return withCtx(dictMonadCanvasAction)(function (ctx) {
                return action(ctx)(a)(b)(c)(d)(e);
              });
            };
          };
        };
      };
    };
  };
};

var withCtx6 = function withCtx6(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return withCtx(dictMonadCanvasAction)(function (ctx) {
                  return action(ctx)(a)(b)(c)(d)(e)(f);
                });
              };
            };
          };
        };
      };
    };
  };
};

var withCtx7 = function withCtx7(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return withCtx(dictMonadCanvasAction)(function (ctx) {
                    return action(ctx)(a)(b)(c)(d)(e)(f)(g);
                  });
                };
              };
            };
          };
        };
      };
    };
  };
};

var withCtx8 = function withCtx8(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return withCtx(dictMonadCanvasAction)(function (ctx) {
                      return action(ctx)(a)(b)(c)(d)(e)(f)(g)(h);
                    });
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

var withCtx9 = function withCtx9(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return withCtx(dictMonadCanvasAction)(function (ctx) {
                        return action(ctx)(a)(b)(c)(d)(e)(f)(g)(h)(i);
                      });
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

var withCanvas = function withCanvas(dictMonadCanvasAction) {
  return function (action) {
    return withCtx(dictMonadCanvasAction)(function (ctx) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.getCanvasEffect(ctx))(action);
    });
  };
};

var withCanvas1 = function withCanvas1(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return withCanvas(dictMonadCanvasAction)(function (canv) {
        return action(canv)(a);
      });
    };
  };
};

var withCanvas2 = function withCanvas2(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return withCanvas(dictMonadCanvasAction)(function (canv) {
          return action(canv)(a)(b);
        });
      };
    };
  };
};

var withCanvas3 = function withCanvas3(dictMonadCanvasAction) {
  return function (action) {
    return function (a) {
      return function (b) {
        return function (c) {
          return withCanvas(dictMonadCanvasAction)(function (canv) {
            return action(canv)(a)(b)(c);
          });
        };
      };
    };
  };
};

var tryLoadImage$prime = function tryLoadImage$prime(dictMonadEffect) {
  return function (path) {
    return function (action) {
      return Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.tryLoadImage(path)(action));
    };
  };
};

var tryLoadImage = function tryLoadImage(dictMonadCanvasAction) {
  return function (path) {
    return function (action) {
      return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Graphics_CanvasAction_Class.liftCanvasAction(dictMonadCanvasAction)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (ctx) {
        return tryLoadImage$prime(dictMonadCanvasAction.MonadEffect0())(path)(function () {
          var $274 = Graphics_CanvasAction_Types.runAction(Effect_Class.monadEffectEffect)(ctx);
          return function ($275) {
            return $274(action($275));
          };
        }());
      });
    };
  };
};

var translate_ = function translate_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.translate);
};

var toStyle = function toStyle(dict) {
  return dict.toStyle;
};

var toDataUrl = function toDataUrl(dictMonadCanvasAction) {
  return withCanvas(dictMonadCanvasAction)(Graphics_Canvas.canvasToDataURL);
};

var toColor = function toColor(dict) {
  return dict.toColor;
};

var styleToX = function styleToX(isCorrect) {
  return function (style) {
    if (isCorrect(style)) {
      return new Data_Maybe.Just(style);
    }

    ;

    if (Data_Boolean.otherwise) {
      return Data_Maybe.Nothing.value;
    }

    ;
    throw new Error("Failed pattern match at Graphics.CanvasAction (line 247, column 1 - line 247, column 66): " + [isCorrect.constructor.name, style.constructor.name]);
  };
};

var styleToX$prime = function styleToX$prime(isC) {
  return function (dictPartial) {
    return function (style) {
      return Data_Maybe.fromJust()(styleToX(isC)(style));
    };
  };
};

var styleToString$prime = function styleToString$prime(dictPartial) {
  return styleToX$prime($foreign.styleIsString)();
};

var styleToString = styleToX($foreign.styleIsString);

var styleToPattern$prime = function styleToPattern$prime(dictPartial) {
  return styleToX$prime($foreign.styleIsPattern)();
};

var styleToPattern = styleToX($foreign.styleIsPattern);

var styleToGradient$prime = function styleToGradient$prime(dictPartial) {
  return styleToX$prime($foreign.styleIsGradient)();
};

var styleToGradient = styleToX($foreign.styleIsGradient);

var stroke_ = function stroke_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.stroke);
};

var strokeText = function strokeText(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (text) {
      return function (pos) {
        var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
        return withCtx3(dictMonadCanvasAction)(Graphics_Canvas.strokeText)(text)(v.value0)(v.value1);
      };
    };
  };
};

var strokeRect = function strokeRect(dictMonadCanvasAction) {
  return function (dictToRegion) {
    var $276 = withCtx1(dictMonadCanvasAction)(Graphics_Canvas.strokeRect);
    var $277 = Data_Vector_Polymorphic.toRectangle(dictToRegion);
    return function ($278) {
      return $276($277($278));
    };
  };
};

var showTextBaseline = new Data_Show.Show(function (v) {
  if (v instanceof BaselineTop) {
    return "BaselineTop";
  }

  ;

  if (v instanceof BaselineHanging) {
    return "BaselineHanging";
  }

  ;

  if (v instanceof BaselineMiddle) {
    return "BaselineMiddle";
  }

  ;

  if (v instanceof BaselineAlphabetic) {
    return "BaselineAlphabetic";
  }

  ;

  if (v instanceof BaselineIdeographic) {
    return "BaselineIdeographic";
  }

  ;

  if (v instanceof BaselineBottom) {
    return "BaselineBottom";
  }

  ;
  throw new Error("Failed pattern match at Graphics.CanvasAction (line 228, column 1 - line 234, column 41): " + [v.constructor.name]);
});

var setWidth = function setWidth(dictMonadCanvasAction) {
  return withCanvas1(dictMonadCanvasAction)(Graphics_Canvas.setCanvasWidth);
};

var setTransform_ = function setTransform_(dictMonadCanvasAction) {
  return function (v) {
    return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setTransform)({
      m11: v.a,
      m12: v.b,
      m21: v.c,
      m22: v.d,
      m31: v.e,
      m32: v.f
    });
  };
};

var setTextBaseline = function setTextBaseline(dictMonadCanvasAction) {
  return function (baseline) {
    var toString = function toString(v) {
      if (v instanceof BaselineTop) {
        return "top";
      }

      ;

      if (v instanceof BaselineHanging) {
        return "hanging";
      }

      ;

      if (v instanceof BaselineMiddle) {
        return "middle";
      }

      ;

      if (v instanceof BaselineAlphabetic) {
        return "alphabetic";
      }

      ;

      if (v instanceof BaselineIdeographic) {
        return "ideographic";
      }

      ;

      if (v instanceof BaselineBottom) {
        return "bottom";
      }

      ;
      throw new Error("Failed pattern match at Graphics.CanvasAction (line 689, column 5 - line 689, column 33): " + [v.constructor.name]);
    };

    return withCtx1(dictMonadCanvasAction)($foreign.setTextBaselineImpl)(toString(baseline));
  };
};

var setTextAlign = function setTextAlign(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setTextAlign);
};

var setStrokeStyle = function setStrokeStyle(dictMonadCanvasAction) {
  return function (dictCanvasStyleRep) {
    var $279 = withCtx1(dictMonadCanvasAction)($foreign.setStrokeStyleImpl);
    var $280 = toStyle(dictCanvasStyleRep);
    return function ($281) {
      return $279($280($281));
    };
  };
};

var setShadowOffsetY = function setShadowOffsetY(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setShadowOffsetY);
};

var setShadowOffsetX = function setShadowOffsetX(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setShadowOffsetX);
};

var setShadowOffset = function setShadowOffset(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (offset) {
      var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(offset);
      return Control_Apply.applySecond(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(setShadowOffsetX(dictMonadCanvasAction)(v.value0))(setShadowOffsetY(dictMonadCanvasAction)(v.value1));
    };
  };
};

var setShadowColor = function setShadowColor(dictMonadCanvasAction) {
  return function (dictCanvasColorRep) {
    var $282 = withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setShadowColor);
    var $283 = toColor(dictCanvasColorRep);
    return function ($284) {
      return $282($283($284));
    };
  };
};

var setShadowBlur = function setShadowBlur(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setShadowBlur);
};

var setMiterLimit = function setMiterLimit(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setMiterLimit);
};

var setLineWidth = function setLineWidth(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setLineWidth);
};

var setLineJoin = function setLineJoin(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setLineJoin);
};

var setLineDash = function setLineDash(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setLineDash);
};

var setLineCap = function setLineCap(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setLineCap);
};

var setImageSmoothing = function setImageSmoothing(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)($foreign.setImageSmoothingImpl);
};

var setHeight = function setHeight(dictMonadCanvasAction) {
  return withCanvas1(dictMonadCanvasAction)(Graphics_Canvas.setCanvasHeight);
};

var setGlobalCompositeOperation = function setGlobalCompositeOperation(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setGlobalCompositeOperation);
};

var setGlobalAlpha = function setGlobalAlpha(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setGlobalAlpha);
};

var setFont = function setFont(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.setFont);
};

var setFillStyle = function setFillStyle(dictMonadCanvasAction) {
  return function (dictCanvasStyleRep) {
    var $285 = withCtx1(dictMonadCanvasAction)($foreign.setFillStyleImpl);
    var $286 = toStyle(dictCanvasStyleRep);
    return function ($287) {
      return $285($286($287));
    };
  };
};

var setDimensions = function setDimensions(dictMonadCanvasAction) {
  return withCanvas1(dictMonadCanvasAction)(Graphics_Canvas.setCanvasDimensions);
};

var scale_ = function scale_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.scale);
};

var save = function save(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.save);
};

var rotate_ = function rotate_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.rotate);
};

var restore = function restore(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.restore);
};

var restoreAfter = function restoreAfter(dictMonadCanvasAction) {
  return function (action) {
    return Control_Apply.applyFirst(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(Control_Apply.applySecond(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(save(dictMonadCanvasAction))(action))(restore(dictMonadCanvasAction));
  };
};

var resetTransform_ = function resetTransform_(dictMonadCanvasAction) {
  return setTransform_(dictMonadCanvasAction)({
    a: 1.0,
    b: 0.0,
    c: 0.0,
    d: 1.0,
    e: 0.0,
    f: 0.0
  });
};

var rect_ = function rect_(dictMonadCanvasAction) {
  return function (dictToRegion) {
    var $288 = withCtx1(dictMonadCanvasAction)(Graphics_Canvas.rect);
    var $289 = Data_Vector_Polymorphic.toRectangle(dictToRegion);
    return function ($290) {
      return $288($289($290));
    };
  };
};

var querySelectCanvas = function querySelectCanvas(dictMonadEffect) {
  return function (canvas) {
    return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
      var doc = Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.toParentNode)();
      return Data_Functor.mapFlipped(Effect.functorEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Web_DOM_ParentNode.querySelector(canvas)(doc))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLCanvasElement.fromElement)))(Data_Functor.map(Data_Maybe.functorMaybe)(Unsafe_Coerce.unsafeCoerce))();
    });
  };
};

var quadraticCurveTo_ = function quadraticCurveTo_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.quadraticCurveTo);
};

var putImageDataFull = function putImageDataFull(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (dictToRegion) {
      return function (dest) {
        return function (dirty) {
          return function (img) {
            var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(dest);
            var v1 = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(dirty);
            return withCtx7(dictMonadCanvasAction)(Graphics_Canvas.putImageDataFull)(img)(v.value0)(v.value1)(v1.value0.value0)(v1.value0.value1)(v1.value1.value0)(v1.value1.value1);
          };
        };
      };
    };
  };
};

var putImageData = function putImageData(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (dest) {
      return function (img) {
        var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(dest);
        return withCtx3(dictMonadCanvasAction)(Graphics_Canvas.putImageData)(img)(v.value0)(v.value1);
      };
    };
  };
};

var moveTo_ = function moveTo_(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (pos) {
      var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
      return withCtx2(dictMonadCanvasAction)(Graphics_Canvas.moveTo)(v.value0)(v.value1);
    };
  };
};

var measureText = function measureText(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.measureText);
};

var matrixTransform_ = function matrixTransform_(dictMonadCanvasAction) {
  return function (v) {
    return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.transform)({
      m11: v.a,
      m12: v.b,
      m21: v.c,
      m22: v.d,
      m31: v.e,
      m32: v.f
    });
  };
};

var skew_ = function skew_(dictMonadCanvasAction) {
  return function (v) {
    return matrixTransform_(dictMonadCanvasAction)({
      a: 1.0,
      b: v.skewY,
      c: v.skewX,
      d: 1.0,
      e: 0.0,
      f: 0.0
    });
  };
};

var loadImageAff = function loadImageAff(path) {
  return Effect_Aff.makeAff(function (cb) {
    return function __do() {
      var canceled = Effect_Ref["new"](false)();
      tryLoadImage$prime(Effect_Class.monadEffectEffect)(path)(function () {
        var $291 = Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(canceled));
        return function ($292) {
          return $291(function (v) {
            if (v instanceof Data_Maybe.Just) {
              return cb(new Data_Either.Right(v.value0));
            }

            ;

            if (v instanceof Data_Maybe.Nothing) {
              return cb(new Data_Either.Left(Effect_Exception.error("Image \"" + (path + "\" not found"))));
            }

            ;
            throw new Error("Failed pattern match at Graphics.CanvasAction (line 823, column 37 - line 825, column 74): " + [v.constructor.name]);
          }($292));
        };
      }())();
      return Effect_Aff.effectCanceler(Effect_Ref.write(true)(canceled));
    };
  });
};

var lineTo_ = function lineTo_(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (pos) {
      var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
      return withCtx2(dictMonadCanvasAction)(Graphics_Canvas.lineTo)(v.value0)(v.value1);
    };
  };
};

var imageSource = function imageSource(dictMonadCanvasAction) {
  return withCanvas(dictMonadCanvasAction)(function () {
    var $293 = Control_Applicative.pure(Effect.applicativeEffect);
    return function ($294) {
      return $293(Graphics_Canvas.canvasElementToImageSource($294));
    };
  }());
};

var getWidth = function getWidth(dictMonadCanvasAction) {
  return withCanvas(dictMonadCanvasAction)(Graphics_Canvas.getCanvasWidth);
};

var getTransform_ = function getTransform_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)($foreign.getTransformImpl);
};

var getTextBaseline = function getTextBaseline(dictMonadCanvasAction) {
  var unsafeParseBaseline = function unsafeParseBaseline(v) {
    if (v === "top") {
      return BaselineTop.value;
    }

    ;

    if (v === "hanging") {
      return BaselineHanging.value;
    }

    ;

    if (v === "middle") {
      return BaselineMiddle.value;
    }

    ;

    if (v === "alphabetic") {
      return BaselineAlphabetic.value;
    }

    ;

    if (v === "ideographic") {
      return BaselineIdeographic.value;
    }

    ;

    if (v === "bottom") {
      return BaselineBottom.value;
    }

    ;
    return Effect_Exception_Unsafe.unsafeThrow("Invalid TextBaseline: " + v);
  };

  return withCtx(dictMonadCanvasAction)(function (ctx) {
    return Data_Functor.map(Effect.functorEffect)(unsafeParseBaseline)($foreign.getTextBaselineImpl(ctx));
  });
};

var getTextAlign = function getTextAlign(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.textAlign);
};

var getStrokeStyle = function getStrokeStyle(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)($foreign.getStrokeStyleImpl);
};

var getImageSmoothing = function getImageSmoothing(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)($foreign.getImageSmoothingImpl);
};

var getImageData = function getImageData(dictMonadCanvasAction) {
  return function (dictToRegion) {
    return function (region) {
      var v = Data_Vector_Polymorphic.toRectangle(dictToRegion)(region);
      return withCtx4(dictMonadCanvasAction)(Graphics_Canvas.getImageData)(v.x)(v.y)(v.width)(v.height);
    };
  };
};

var getHeight = function getHeight(dictMonadCanvasAction) {
  return withCanvas(dictMonadCanvasAction)(Graphics_Canvas.getCanvasHeight);
};

var getFont = function getFont(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.font);
};

var getFillStyle = function getFillStyle(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)($foreign.getFillStyleImpl);
};

var getDimensions = function getDimensions(dictMonadCanvasAction) {
  return withCanvas(dictMonadCanvasAction)(Graphics_Canvas.getCanvasDimensions);
};

var getContext2D = function getContext2D(dictMonadEffect) {
  var $295 = Effect_Class.liftEffect(dictMonadEffect);
  return function ($296) {
    return $295(Graphics_Canvas.getContext2D($296));
  };
};

var querySelectContext2D = function querySelectContext2D(dictMonadEffect) {
  return Control_Bind.composeKleisli(dictMonadEffect.Monad0().Bind1())(querySelectCanvas(dictMonadEffect))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictMonadEffect.Monad0().Applicative0())(getContext2D(dictMonadEffect)));
};

var getCanvasElementById = function getCanvasElementById(dictMonadEffect) {
  var $297 = Effect_Class.liftEffect(dictMonadEffect);
  return function ($298) {
    return $297(Graphics_Canvas.getCanvasElementById($298));
  };
};

var getContext2DById = function getContext2DById(dictMonadEffect) {
  return Control_Bind.composeKleisli(dictMonadEffect.Monad0().Bind1())(getCanvasElementById(dictMonadEffect))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictMonadEffect.Monad0().Applicative0())(getContext2D(dictMonadEffect)));
};

var getCanvas = function getCanvas(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)($foreign.getCanvasEffect);
};

var fill_ = function fill_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.fill);
};

var fillText = function fillText(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (text) {
      return function (pos) {
        var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
        return withCtx3(dictMonadCanvasAction)(Graphics_Canvas.fillText)(text)(v.value0)(v.value1);
      };
    };
  };
};

var fillRect = function fillRect(dictMonadCanvasAction) {
  return function (dictToRegion) {
    var $299 = withCtx1(dictMonadCanvasAction)(Graphics_Canvas.fillRect);
    var $300 = Data_Vector_Polymorphic.toRectangle(dictToRegion);
    return function ($301) {
      return $299($300($301));
    };
  };
};

var drawImageScale = function drawImageScale(dictMonadCanvasAction) {
  return function (dictToRegion) {
    return function (dirty) {
      return function (img) {
        var v = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(dirty);
        return withCtx5(dictMonadCanvasAction)(Graphics_Canvas.drawImageScale)(img)(v.value0.value0)(v.value0.value1)(v.value1.value0)(v.value1.value1);
      };
    };
  };
};

var drawImageFull = function drawImageFull(dictMonadCanvasAction) {
  return function (dictToRegion) {
    return function (source) {
      return function (dirty) {
        return function (img) {
          var v = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(source);
          var v1 = Data_Vector_Polymorphic_Class.toRegion(dictToRegion)(dirty);
          return withCtx9(dictMonadCanvasAction)(Graphics_Canvas.drawImageFull)(img)(v.value0.value0)(v.value0.value1)(v.value1.value0)(v.value1.value1)(v1.value0.value0)(v1.value0.value1)(v1.value1.value0)(v1.value1.value1);
        };
      };
    };
  };
};

var drawImage = function drawImage(dictMonadCanvasAction) {
  return function (dictToPos) {
    return function (pos) {
      return function (img) {
        var v = Data_Vector_Polymorphic_Class.toPos(dictToPos)(pos);
        return withCtx3(dictMonadCanvasAction)(Graphics_Canvas.drawImage)(img)(v.value0)(v.value1);
      };
    };
  };
};

var dimensionsToSize = function dimensionsToSize(dictFromSize) {
  return function (v) {
    return Data_Vector_Polymorphic_Class.fromSize(dictFromSize)(new Data_Vector_Polymorphic_Types.Vector2(v.width, v.height));
  };
};

var withFull = function withFull(dictMonadCanvasAction) {
  return function (action) {
    var dimsToVector2 = dimensionsToSize(Data_Vector_Polymorphic_Class.fromSizeVector2);
    return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Graphics_CanvasAction_Class.liftCanvasAction(dictMonadCanvasAction)(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(getDimensions(Graphics_CanvasAction_Class.monadCanvasActionCanvasActionM))(dimsToVector2)))(action(Data_Vector_Polymorphic_Class.toRegionVector2(Data_Semiring.semiringNumber)));
  };
};

var fillRectFull = function fillRectFull(dictMonadCanvasAction) {
  return withFull(dictMonadCanvasAction)(function (dictToRegion) {
    return fillRect(dictMonadCanvasAction)(dictToRegion);
  });
};

var strokeRectFull = function strokeRectFull(dictMonadCanvasAction) {
  return withFull(dictMonadCanvasAction)(function (dictToRegion) {
    return strokeRect(dictMonadCanvasAction)(dictToRegion);
  });
};

var withMidPos = function withMidPos(dictMonadCanvasAction) {
  return function (action) {
    var dimsToVector2 = dimensionsToSize(Data_Vector_Polymorphic_Class.fromSizeVector2);

    var midPos$prime = function () {
      var $302 = Data_Vector_Polymorphic.midPos(Data_Vector_Polymorphic_Class.toRegionVector2(Data_Semiring.semiringNumber))(Data_Vector_Polymorphic_Class.fromPosVector2)(Data_EuclideanRing.euclideanRingNumber);
      return function ($303) {
        return $302(dimsToVector2($303));
      };
    }();

    return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Graphics_CanvasAction_Class.liftCanvasAction(dictMonadCanvasAction)(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(getDimensions(Graphics_CanvasAction_Class.monadCanvasActionCanvasActionM))(midPos$prime)))(action(Data_Vector_Polymorphic_Class.toPosVector2));
  };
};

var createRadialGradient = function createRadialGradient(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.createRadialGradient);
};

var createPattern = function createPattern(dictMonadCanvasAction) {
  return withCtx2(dictMonadCanvasAction)(Graphics_Canvas.createPattern);
};

var createLinearGradient = function createLinearGradient(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.createLinearGradient);
};

var createImageDataCopy = function createImageDataCopy(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.createImageDataCopy);
};

var createImageData = function createImageData(dictMonadCanvasAction) {
  return function (dictToSize) {
    return function (size) {
      var v = Data_Vector_Polymorphic_Class.toSize(dictToSize)(size);
      return withCtx2(dictMonadCanvasAction)(Graphics_Canvas.createImageData)(v.value0)(v.value1);
    };
  };
};

var createCanvas_ = function () {
  var $304 = Data_Functor.map(Effect.functorEffect)(Unsafe_Coerce.unsafeCoerce);
  var $305 = Web_DOM_Document.createElement("canvas");
  return function ($306) {
    return $304($305($306));
  };
}();

var createCanvasEffect$prime = function createCanvasEffect$prime(dictToSize) {
  return function (doc) {
    var $307 = Data_Vector_Polymorphic_Class.toSize(dictToSize);
    return function ($308) {
      return function (v) {
        return function __do() {
          var canvas = createCanvas_(doc)();
          Graphics_Canvas.setCanvasDimensions(canvas)({
            width: v.value0,
            height: v.value1
          })();
          return canvas;
        };
      }($307($308));
    };
  };
};

var createCanvasEffect = function createCanvasEffect(dictToSize) {
  return function (s) {
    return function __do() {
      var doc = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document)();
      return createCanvasEffect$prime(dictToSize)(Web_HTML_HTMLDocument.toDocument(doc))(s)();
    };
  };
};

var createCanvas$prime = function createCanvas$prime(dictMonadEffect) {
  return function (dictToSize) {
    return function (doc) {
      return function (s) {
        return Effect_Class.liftEffect(dictMonadEffect)(createCanvasEffect$prime(dictToSize)(doc)(s));
      };
    };
  };
};

var createCanvas = function createCanvas(dictMonadEffect) {
  return function (dictToSize) {
    return function (s) {
      return Effect_Class.liftEffect(dictMonadEffect)(createCanvasEffect(dictToSize)(s));
    };
  };
};

var runActionOffscreen = function runActionOffscreen(dictMonadEffect) {
  return function (dictToSize) {
    return function (size) {
      return function (action) {
        return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(createCanvas(dictMonadEffect)(dictToSize)(size))(getContext2D(dictMonadEffect)))(function (ctx) {
          return Graphics_CanvasAction_Types.runAction(dictMonadEffect)(ctx)(action);
        });
      };
    };
  };
};

var runActionOffscreen$prime = function runActionOffscreen$prime(dictMonadCanvasAction) {
  return function (action) {
    return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Graphics_CanvasAction_Class.liftCanvasAction(dictMonadCanvasAction)(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(getDimensions(Graphics_CanvasAction_Class.monadCanvasActionCanvasActionM))(dimensionsToSize(Data_Vector_Polymorphic_Class.fromSizeVector2))))(function (v) {
      return runActionOffscreen(dictMonadCanvasAction.MonadEffect0())(Data_Vector_Polymorphic_Class.toSizeVector2)(v)(action);
    });
  };
};

var closePath_ = function closePath_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.closePath);
};

var clip_ = function clip_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.clip);
};

var clearRect = function clearRect(dictMonadCanvasAction) {
  return function (dictToRegion) {
    var $309 = withCtx1(dictMonadCanvasAction)(Graphics_Canvas.clearRect);
    var $310 = Data_Vector_Polymorphic.toRectangle(dictToRegion);
    return function ($311) {
      return $309($310($311));
    };
  };
};

var clearRectFull = function clearRectFull(dictMonadCanvasAction) {
  return withFull(dictMonadCanvasAction)(function (dictToRegion) {
    return clearRect(dictMonadCanvasAction)(dictToRegion);
  });
};

var canvasStyleRepString = new CanvasStyleRep(Unsafe_Coerce.unsafeCoerce);
var canvasStyleRepPattern = new CanvasStyleRep(Unsafe_Coerce.unsafeCoerce);
var canvasStyleRepGradient = new CanvasStyleRep(Unsafe_Coerce.unsafeCoerce);
var canvasStyleRepColor = new CanvasStyleRep(function () {
  var $312 = toStyle(canvasStyleRepString);
  return function ($313) {
    return $312(Color.cssStringRGBA($313));
  };
}());
var canvasStyleRepCanvasStyle = new CanvasStyleRep(Control_Category.identity(Control_Category.categoryFn));

var filled = function filled(dictMonadCanvasAction) {
  return function (dictCanvasStyleRep) {
    return function (style) {
      return function (action) {
        return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(getFillStyle(dictMonadCanvasAction))(function (old) {
          return Control_Apply.applyFirst(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(Control_Apply.applySecond(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(setFillStyle(dictMonadCanvasAction)(dictCanvasStyleRep)(style))(action))(setFillStyle(dictMonadCanvasAction)(canvasStyleRepCanvasStyle)(old));
        });
      };
    };
  };
};

var stroked = function stroked(dictMonadCanvasAction) {
  return function (dictCanvasStyleRep) {
    return function (style) {
      return function (action) {
        return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(getStrokeStyle(dictMonadCanvasAction))(function (old) {
          return Control_Apply.applyFirst(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(Control_Apply.applySecond(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1().Apply0())(setStrokeStyle(dictMonadCanvasAction)(dictCanvasStyleRep)(style))(action))(setStrokeStyle(dictMonadCanvasAction)(canvasStyleRepCanvasStyle)(old));
        });
      };
    };
  };
};

var canvasColorRepString = new CanvasColorRep(Control_Category.identity(Control_Category.categoryFn));
var canvasColorRepColor = new CanvasColorRep(Color.cssStringRGBA);

var bezierCurveTo_ = function bezierCurveTo_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.bezierCurveTo);
};

var beginPath_ = function beginPath_(dictMonadCanvasAction) {
  return withCtx(dictMonadCanvasAction)(Graphics_Canvas.beginPath);
};

var asEffect = function asEffect(dictFunctor) {
  return function (dictMonadEffect) {
    return function (ctx) {
      return Data_Functor.map(dictFunctor)(Graphics_CanvasAction_Types.runAction(dictMonadEffect)(ctx));
    };
  };
};

var arc_ = function arc_(dictMonadCanvasAction) {
  return withCtx1(dictMonadCanvasAction)(Graphics_Canvas.arc);
};

var addColorStop = function addColorStop(dictMonadEffect) {
  return function (dictCanvasColorRep) {
    return function (grad) {
      return function (n) {
        return function (col) {
          return Effect_Class.liftEffect(dictMonadEffect)(Graphics_Canvas.addColorStop(grad)(n)(toColor(dictCanvasColorRep)(col)));
        };
      };
    };
  };
};

var linearGradient = function linearGradient(dictMonadCanvasAction) {
  return function (dictCanvasColorRep) {
    return function (dictFoldable) {
      return function (grad) {
        return function (cols) {
          return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(createLinearGradient(dictMonadCanvasAction)(grad))(function (canvasGradient) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Data_Foldable.for_(dictMonadCanvasAction.MonadEffect0().Monad0().Applicative0())(dictFoldable)(cols)(function (v) {
              return addColorStop(dictMonadCanvasAction.MonadEffect0())(dictCanvasColorRep)(canvasGradient)(v.value0)(v.value1);
            }))(function () {
              return Control_Applicative.pure(dictMonadCanvasAction.MonadEffect0().Monad0().Applicative0())(canvasGradient);
            });
          });
        };
      };
    };
  };
};

var radialGradient = function radialGradient(dictMonadCanvasAction) {
  return function (dictCanvasColorRep) {
    return function (dictFoldable) {
      return function (grad) {
        return function (cols) {
          return Control_Bind.bind(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(createRadialGradient(dictMonadCanvasAction)(grad))(function (canvasGradient) {
            return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadCanvasAction.MonadEffect0().Monad0().Bind1())(Data_Foldable.for_(dictMonadCanvasAction.MonadEffect0().Monad0().Applicative0())(dictFoldable)(cols)(function (v) {
              return addColorStop(dictMonadCanvasAction.MonadEffect0())(dictCanvasColorRep)(canvasGradient)(v.value0)(v.value1);
            }))(function () {
              return Control_Applicative.pure(dictMonadCanvasAction.MonadEffect0().Monad0().Applicative0())(canvasGradient);
            });
          });
        };
      };
    };
  };
};

module.exports = {
  BaselineTop: BaselineTop,
  BaselineHanging: BaselineHanging,
  BaselineMiddle: BaselineMiddle,
  BaselineAlphabetic: BaselineAlphabetic,
  BaselineIdeographic: BaselineIdeographic,
  BaselineBottom: BaselineBottom,
  styleToString: styleToString,
  "styleToString'": styleToString$prime,
  styleToGradient: styleToGradient,
  "styleToGradient'": styleToGradient$prime,
  styleToPattern: styleToPattern,
  "styleToPattern'": styleToPattern$prime,
  CanvasStyleRep: CanvasStyleRep,
  toStyle: toStyle,
  CanvasColorRep: CanvasColorRep,
  toColor: toColor,
  createCanvas: createCanvas,
  "createCanvas'": createCanvas$prime,
  createCanvasEffect: createCanvasEffect,
  "createCanvasEffect'": createCanvasEffect$prime,
  getCanvasElementById: getCanvasElementById,
  querySelectCanvas: querySelectCanvas,
  getContext2D: getContext2D,
  getContext2DById: getContext2DById,
  querySelectContext2D: querySelectContext2D,
  runActionOffscreen: runActionOffscreen,
  "runActionOffscreen'": runActionOffscreen$prime,
  asEffect: asEffect,
  withCtx: withCtx,
  withCtx1: withCtx1,
  withCtx2: withCtx2,
  withCtx3: withCtx3,
  withCtx4: withCtx4,
  withCtx5: withCtx5,
  withCtx6: withCtx6,
  withCtx7: withCtx7,
  withCtx8: withCtx8,
  withCtx9: withCtx9,
  withFull: withFull,
  withMidPos: withMidPos,
  getCanvas: getCanvas,
  withCanvas: withCanvas,
  withCanvas1: withCanvas1,
  withCanvas2: withCanvas2,
  withCanvas3: withCanvas3,
  fillRect: fillRect,
  fillRectFull: fillRectFull,
  strokeRect: strokeRect,
  strokeRectFull: strokeRectFull,
  clearRect: clearRect,
  clearRectFull: clearRectFull,
  setFillStyle: setFillStyle,
  setStrokeStyle: setStrokeStyle,
  getFillStyle: getFillStyle,
  getStrokeStyle: getStrokeStyle,
  filled: filled,
  stroked: stroked,
  setLineWidth: setLineWidth,
  setLineDash: setLineDash,
  setShadowBlur: setShadowBlur,
  setShadowOffsetX: setShadowOffsetX,
  setShadowOffsetY: setShadowOffsetY,
  setShadowOffset: setShadowOffset,
  setShadowColor: setShadowColor,
  setMiterLimit: setMiterLimit,
  setLineCap: setLineCap,
  setLineJoin: setLineJoin,
  setGlobalCompositeOperation: setGlobalCompositeOperation,
  setGlobalAlpha: setGlobalAlpha,
  getTextAlign: getTextAlign,
  setTextAlign: setTextAlign,
  getTextBaseline: getTextBaseline,
  setTextBaseline: setTextBaseline,
  getFont: getFont,
  setFont: setFont,
  fillText: fillText,
  strokeText: strokeText,
  measureText: measureText,
  dimensionsToSize: dimensionsToSize,
  getDimensions: getDimensions,
  setDimensions: setDimensions,
  getHeight: getHeight,
  setHeight: setHeight,
  getWidth: getWidth,
  setWidth: setWidth,
  toDataUrl: toDataUrl,
  getImageData: getImageData,
  putImageDataFull: putImageDataFull,
  putImageData: putImageData,
  createImageData: createImageData,
  createImageDataCopy: createImageDataCopy,
  imageSource: imageSource,
  drawImage: drawImage,
  drawImageScale: drawImageScale,
  drawImageFull: drawImageFull,
  tryLoadImage: tryLoadImage,
  "tryLoadImage'": tryLoadImage$prime,
  loadImageAff: loadImageAff,
  setImageSmoothing: setImageSmoothing,
  getImageSmoothing: getImageSmoothing,
  createPattern: createPattern,
  createLinearGradient: createLinearGradient,
  createRadialGradient: createRadialGradient,
  addColorStop: addColorStop,
  linearGradient: linearGradient,
  radialGradient: radialGradient,
  resetTransform_: resetTransform_,
  setTransform_: setTransform_,
  getTransform_: getTransform_,
  translate_: translate_,
  scale_: scale_,
  skew_: skew_,
  rotate_: rotate_,
  matrixTransform_: matrixTransform_,
  beginPath_: beginPath_,
  stroke_: stroke_,
  fill_: fill_,
  clip_: clip_,
  lineTo_: lineTo_,
  moveTo_: moveTo_,
  closePath_: closePath_,
  arc_: arc_,
  rect_: rect_,
  quadraticCurveTo_: quadraticCurveTo_,
  bezierCurveTo_: bezierCurveTo_,
  save: save,
  restore: restore,
  restoreAfter: restoreAfter,
  showTextBaseline: showTextBaseline,
  canvasStyleRepCanvasStyle: canvasStyleRepCanvasStyle,
  canvasStyleRepString: canvasStyleRepString,
  canvasStyleRepColor: canvasStyleRepColor,
  canvasStyleRepGradient: canvasStyleRepGradient,
  canvasStyleRepPattern: canvasStyleRepPattern,
  canvasColorRepString: canvasColorRepString,
  canvasColorRepColor: canvasColorRepColor,
  styleIsString: $foreign.styleIsString,
  styleIsGradient: $foreign.styleIsGradient,
  styleIsPattern: $foreign.styleIsPattern,
  getCanvasEffect: $foreign.getCanvasEffect
};
},{"./foreign.js":"../output/Graphics.CanvasAction/foreign.js","../Color/index.js":"../output/Color/index.js","../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Apply/index.js":"../output/Control.Apply/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Category/index.js":"../output/Control.Category/index.js","../Control.Monad/index.js":"../output/Control.Monad/index.js","../Control.Monad.Reader.Class/index.js":"../output/Control.Monad.Reader.Class/index.js","../Control.Monad.Reader.Trans/index.js":"../output/Control.Monad.Reader.Trans/index.js","../Data.Boolean/index.js":"../output/Data.Boolean/index.js","../Data.Either/index.js":"../output/Data.Either/index.js","../Data.EuclideanRing/index.js":"../output/Data.EuclideanRing/index.js","../Data.Foldable/index.js":"../output/Data.Foldable/index.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Semiring/index.js":"../output/Data.Semiring/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Vector.Polymorphic/index.js":"../output/Data.Vector.Polymorphic/index.js","../Data.Vector.Polymorphic.Class/index.js":"../output/Data.Vector.Polymorphic.Class/index.js","../Data.Vector.Polymorphic.Types/index.js":"../output/Data.Vector.Polymorphic.Types/index.js","../Effect/index.js":"../output/Effect/index.js","../Effect.Aff/index.js":"../output/Effect.Aff/index.js","../Effect.Class/index.js":"../output/Effect.Class/index.js","../Effect.Exception/index.js":"../output/Effect.Exception/index.js","../Effect.Exception.Unsafe/index.js":"../output/Effect.Exception.Unsafe/index.js","../Effect.Ref/index.js":"../output/Effect.Ref/index.js","../Graphics.Canvas/index.js":"../output/Graphics.Canvas/index.js","../Graphics.CanvasAction.Class/index.js":"../output/Graphics.CanvasAction.Class/index.js","../Graphics.CanvasAction.Types/index.js":"../output/Graphics.CanvasAction.Types/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.DOM.Document/index.js":"../output/Web.DOM.Document/index.js","../Web.DOM.ParentNode/index.js":"../output/Web.DOM.ParentNode/index.js","../Web.HTML/index.js":"../output/Web.HTML/index.js","../Web.HTML.HTMLCanvasElement/index.js":"../output/Web.HTML.HTMLCanvasElement/index.js","../Web.HTML.HTMLDocument/index.js":"../output/Web.HTML.HTMLDocument/index.js","../Web.HTML.Window/index.js":"../output/Web.HTML.Window/index.js"}],"../output/Web.DOM.Element/foreign.js":[function(require,module,exports) {
"use strict";

var getProp = function getProp(name) {
  return function (doctype) {
    return doctype[name];
  };
};

exports._namespaceURI = getProp("namespaceURI");
exports._prefix = getProp("prefix");
exports.localName = getProp("localName");
exports.tagName = getProp("tagName");

exports.id = function (node) {
  return function () {
    return node.id;
  };
};

exports.setId = function (id) {
  return function (node) {
    return function () {
      node.id = id;
      return {};
    };
  };
};

exports.className = function (node) {
  return function () {
    return node.className;
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

exports.setClassName = function (className) {
  return function (node) {
    return function () {
      node.className = className;
      return {};
    };
  };
};

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.setAttribute = function (name) {
  return function (value) {
    return function (element) {
      return function () {
        element.setAttribute(name, value);
        return {};
      };
    };
  };
};

exports._getAttribute = function (name) {
  return function (element) {
    return function () {
      return element.getAttribute(name);
    };
  };
};

exports.hasAttribute = function (name) {
  return function (element) {
    return function () {
      return element.hasAttribute(name);
    };
  };
};

exports.removeAttribute = function (name) {
  return function (element) {
    return function () {
      element.removeAttribute(name);
      return {};
    };
  };
}; // - CSSOM ---------------------------------------------------------------------


exports.scrollTop = function (node) {
  return function () {
    return node.scrollTop;
  };
};

exports.setScrollTop = function (scrollTop) {
  return function (node) {
    return function () {
      node.scrollTop = scrollTop;
      return {};
    };
  };
};

exports.scrollLeft = function (node) {
  return function () {
    return node.scrollLeft;
  };
};

exports.setScrollLeft = function (scrollLeft) {
  return function (node) {
    return function () {
      node.scrollLeft = scrollLeft;
      return {};
    };
  };
};

exports.scrollWidth = function (el) {
  return function () {
    return el.scrollWidth;
  };
};

exports.scrollHeight = function (el) {
  return function () {
    return el.scrollHeight;
  };
};

exports.clientTop = function (el) {
  return function () {
    return el.clientTop;
  };
};

exports.clientLeft = function (el) {
  return function () {
    return el.clientLeft;
  };
};

exports.clientWidth = function (el) {
  return function () {
    return el.clientWidth;
  };
};

exports.clientHeight = function (el) {
  return function () {
    return el.clientHeight;
  };
};
},{}],"../output/Web.DOM.Element/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");

var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;

var prefix = function prefix($0) {
  return Data_Nullable.toMaybe($foreign["_prefix"]($0));
};

var namespaceURI = function namespaceURI($1) {
  return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
};

var getElementsByTagNameNS = function getElementsByTagNameNS($2) {
  return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
};

var getAttribute = function getAttribute(attr) {
  var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $4 = $foreign["_getAttribute"](attr);
  return function ($5) {
    return $3($4($5));
  };
};

var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
module.exports = {
  fromNode: fromNode,
  fromChildNode: fromChildNode,
  fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
  fromParentNode: fromParentNode,
  fromEventTarget: fromEventTarget,
  toNode: toNode,
  toChildNode: toChildNode,
  toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
  toParentNode: toParentNode,
  toEventTarget: toEventTarget,
  namespaceURI: namespaceURI,
  prefix: prefix,
  getElementsByTagNameNS: getElementsByTagNameNS,
  getAttribute: getAttribute,
  localName: $foreign.localName,
  tagName: $foreign.tagName,
  id: $foreign.id,
  setId: $foreign.setId,
  className: $foreign.className,
  classList: $foreign.classList,
  setClassName: $foreign.setClassName,
  getElementsByTagName: $foreign.getElementsByTagName,
  getElementsByClassName: $foreign.getElementsByClassName,
  setAttribute: $foreign.setAttribute,
  hasAttribute: $foreign.hasAttribute,
  removeAttribute: $foreign.removeAttribute,
  scrollTop: $foreign.scrollTop,
  setScrollTop: $foreign.setScrollTop,
  scrollLeft: $foreign.scrollLeft,
  setScrollLeft: $foreign.setScrollLeft,
  scrollWidth: $foreign.scrollWidth,
  scrollHeight: $foreign.scrollHeight,
  clientTop: $foreign.clientTop,
  clientLeft: $foreign.clientLeft,
  clientWidth: $foreign.clientWidth,
  clientHeight: $foreign.clientHeight
};
},{"./foreign.js":"../output/Web.DOM.Element/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Effect/index.js":"../output/Effect/index.js","../Unsafe.Coerce/index.js":"../output/Unsafe.Coerce/index.js","../Web.Internal.FFI/index.js":"../output/Web.Internal.FFI/index.js"}],"../output/ReceptiveField.Main/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Control_Applicative = require("../Control.Applicative/index.js");

var Control_Bind = require("../Control.Bind/index.js");

var Control_Parallel = require("../Control.Parallel/index.js");

var Data_Array = require("../Data.Array/index.js");

var Data_Int = require("../Data.Int/index.js");

var Data_Show = require("../Data.Show/index.js");

var Data_Traversable = require("../Data.Traversable/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Graphics_CanvasAction = require("../Graphics.CanvasAction/index.js");

var Web_DOM_Element = require("../Web.DOM.Element/index.js");

var render = function render(imgElem) {
  return function (path) {
    return Web_DOM_Element.setAttribute("src")(path)(imgElem);
  };
};

var int2img = function int2img(s) {
  return function (y) {
    return function (x) {
      return s + (Data_Show.show(Data_Show.showInt)(y) + ("_" + (Data_Show.show(Data_Show.showInt)(x) + ".png")));
    };
  };
};

var imgPercentile = function imgPercentile(imW) {
  return function (x) {
    return function (w) {
      return Data_Int.floor(Data_Int.toNumber(imW) * Data_Int.toNumber(x) / w);
    };
  };
};

var imageStrs = function imageStrs(s) {
  return function (h) {
    return function (w) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(1)(h))(function (i) {
        return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(1)(w))(function (j) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(int2img(s)(i)(j));
        });
      });
    };
  };
};

var preloadImages = function preloadImages(s) {
  return function (h) {
    return function (w) {
      var preLoad = function preLoad(str) {
        return Graphics_CanvasAction.loadImageAff(str);
      };

      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel.parTraverse(Effect_Aff.parallelAff)(Data_Traversable.traversableArray)(preLoad)(imageStrs(s)(h)(w)))(function () {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      });
    };
  };
};

module.exports = {
  int2img: int2img,
  imageStrs: imageStrs,
  preloadImages: preloadImages,
  imgPercentile: imgPercentile,
  render: render
};
},{"../Control.Applicative/index.js":"../output/Control.Applicative/index.js","../Control.Bind/index.js":"../output/Control.Bind/index.js","../Control.Parallel/index.js":"../output/Control.Parallel/index.js","../Data.Array/index.js":"../output/Data.Array/index.js","../Data.Int/index.js":"../output/Data.Int/index.js","../Data.Show/index.js":"../output/Data.Show/index.js","../Data.Traversable/index.js":"../output/Data.Traversable/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Aff/index.js":"../output/Effect.Aff/index.js","../Graphics.CanvasAction/index.js":"../output/Graphics.CanvasAction/index.js","../Web.DOM.Element/index.js":"../output/Web.DOM.Element/index.js"}],"../output/Web.DOM.NonElementParentNode/foreign.js":[function(require,module,exports) {
"use strict";

exports._getElementById = function (id) {
  return function (node) {
    return function () {
      return node.getElementById(id);
    };
  };
};
},{}],"../output/Web.DOM.NonElementParentNode/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var $foreign = require("./foreign.js");

var Data_Functor = require("../Data.Functor/index.js");

var Data_Nullable = require("../Data.Nullable/index.js");

var Effect = require("../Effect/index.js");

var getElementById = function getElementById(eid) {
  var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
  var $1 = $foreign["_getElementById"](eid);
  return function ($2) {
    return $0($1($2));
  };
};

module.exports = {
  getElementById: getElementById
};
},{"./foreign.js":"../output/Web.DOM.NonElementParentNode/foreign.js","../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Nullable/index.js":"../output/Data.Nullable/index.js","../Effect/index.js":"../output/Effect/index.js"}],"../output/ReceptiveField.Pixel2retina/index.js":[function(require,module,exports) {
// Generated by purs version 0.13.8
"use strict";

var Data_Functor = require("../Data.Functor/index.js");

var Data_Maybe = require("../Data.Maybe/index.js");

var Data_Unit = require("../Data.Unit/index.js");

var Effect_Aff = require("../Effect.Aff/index.js");

var Effect_Console = require("../Effect.Console/index.js");

var FRP_Behavior = require("../FRP.Behavior/index.js");

var FRP_Behavior_Mouse = require("../FRP.Behavior.Mouse/index.js");

var FRP_Event = require("../FRP.Event/index.js");

var FRP_Event_Mouse = require("../FRP.Event.Mouse/index.js");

var Global = require("../Global/index.js");

var ReceptiveField_Main = require("../ReceptiveField.Main/index.js");

var Web_DOM_Document = require("../Web.DOM.Document/index.js");

var Web_DOM_Element = require("../Web.DOM.Element/index.js");

var Web_DOM_NonElementParentNode = require("../Web.DOM.NonElementParentNode/index.js");

var Web_HTML = require("../Web.HTML/index.js");

var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");

var Web_HTML_Window = require("../Web.HTML.Window/index.js");

var scene = function scene(mouse) {
  return function (v) {
    var widthPerc = ReceptiveField_Main.imgPercentile(64);
    var heightPerc = ReceptiveField_Main.imgPercentile(64);
    return Data_Functor.map(FRP_Behavior.functorABehavior(FRP_Event.functorEvent))(Data_Maybe.maybe("pixel2retina/16_16.png")(function (v1) {
      return ReceptiveField_Main.int2img("pixel2retina/")(heightPerc(v1.y)(v.h))(widthPerc(v1.x)(v.w));
    }))(FRP_Behavior_Mouse.position(mouse));
  };
};

var main = function __do() {
  var mouse = FRP_Event_Mouse.getMouse();
  var win = Web_HTML.window();
  var doc = Web_HTML_Window.document(win)();
  var maybeElement = Web_DOM_NonElementParentNode.getElementById("retina2pixel")(Web_DOM_Document.toNonElementParentNode(Web_HTML_HTMLDocument.toDocument(doc)))();
  Effect_Aff.launchAff_(ReceptiveField_Main.preloadImages("pixel2retina/")(64)(64))();

  (function () {
    if (maybeElement instanceof Data_Maybe.Nothing) {
      return Effect_Console.log("couldn't find img by ID")();
    }

    ;

    if (maybeElement instanceof Data_Maybe.Just) {
      var mH = Web_DOM_Element.getAttribute("height")(maybeElement.value0)();
      var h = Global.readFloat(Data_Maybe.fromJust()(mH));
      var mW = Web_DOM_Element.getAttribute("width")(maybeElement.value0)();
      var w = Global.readFloat(Data_Maybe.fromJust()(mW));
      FRP_Behavior.animate(scene(mouse)({
        w: w,
        h: h
      }))(ReceptiveField_Main.render(maybeElement.value0))();
      return Data_Unit.unit;
    }

    ;
    throw new Error("Failed pattern match at ReceptiveField.Pixel2retina (line 37, column 3 - line 45, column 16): " + [maybeElement.constructor.name]);
  })();

  return Data_Unit.unit;
};

module.exports = {
  scene: scene,
  main: main
};
},{"../Data.Functor/index.js":"../output/Data.Functor/index.js","../Data.Maybe/index.js":"../output/Data.Maybe/index.js","../Data.Unit/index.js":"../output/Data.Unit/index.js","../Effect.Aff/index.js":"../output/Effect.Aff/index.js","../Effect.Console/index.js":"../output/Effect.Console/index.js","../FRP.Behavior/index.js":"../output/FRP.Behavior/index.js","../FRP.Behavior.Mouse/index.js":"../output/FRP.Behavior.Mouse/index.js","../FRP.Event/index.js":"../output/FRP.Event/index.js","../FRP.Event.Mouse/index.js":"../output/FRP.Event.Mouse/index.js","../Global/index.js":"../output/Global/index.js","../ReceptiveField.Main/index.js":"../output/ReceptiveField.Main/index.js","../Web.DOM.Document/index.js":"../output/Web.DOM.Document/index.js","../Web.DOM.Element/index.js":"../output/Web.DOM.Element/index.js","../Web.DOM.NonElementParentNode/index.js":"../output/Web.DOM.NonElementParentNode/index.js","../Web.HTML/index.js":"../output/Web.HTML/index.js","../Web.HTML.HTMLDocument/index.js":"../output/Web.HTML.HTMLDocument/index.js","../Web.HTML.Window/index.js":"../output/Web.HTML.Window/index.js"}],"pix2ret.js":[function(require,module,exports) {
require("../output/ReceptiveField.Pixel2retina/index.js").main();
},{"../output/ReceptiveField.Pixel2retina/index.js":"../output/ReceptiveField.Pixel2retina/index.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "41421" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","pix2ret.js"], null)
//# sourceMappingURL=/pix2ret.912b99a9.js.map